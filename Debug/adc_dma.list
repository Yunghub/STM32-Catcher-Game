
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006248  08006248  00007248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006390  08006390  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006398  08006398  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080063a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000060  08006400  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006400  000083e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea4  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250e  00000000  00000000  00019f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d85  00000000  00000000  0001d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180d7  00000000  00000000  0001e2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014396  00000000  00000000  000363ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bca2  00000000  00000000  0004a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e63e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e6c  00000000  00000000  000e6428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000eb294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006230 	.word	0x08006230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006230 	.word	0x08006230

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <beep>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void beep(uint32_t score)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if (!beepActive)
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <beep+0x84>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d032      	beq.n	8000638 <beep+0x7c>
  {
    beepActive = true;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <beep+0x84>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
    beepStartTick = HAL_GetTick();
 80005d8:	f001 f92e 	bl	8001838 <HAL_GetTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <beep+0x88>)
 80005e0:	6013      	str	r3, [r2, #0]

    // Calculate tone period based on score (lower period means higher pitch)
    uint32_t basePeriod = 3000; // Start with a low tone
 80005e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005e6:	613b      	str	r3, [r7, #16]
    uint32_t decrement  = 50;
 80005e8:	2332      	movs	r3, #50	@ 0x32
 80005ea:	60fb      	str	r3, [r7, #12]
    uint32_t minPeriod  = 300;  // Clamp to a high tone at minimum period
 80005ec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005f0:	60bb      	str	r3, [r7, #8]
    uint32_t tonePeriod;

    if (score * decrement < (basePeriod - minPeriod))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	fb03 f202 	mul.w	r2, r3, r2
 80005fa:	6939      	ldr	r1, [r7, #16]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1acb      	subs	r3, r1, r3
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <beep+0x58>
    {
      tonePeriod = basePeriod - score * decrement;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	fb02 f303 	mul.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e001      	b.n	8000618 <beep+0x5c>
    }
    else
    {
      tonePeriod = minPeriod;
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	617b      	str	r3, [r7, #20]
    }

    __HAL_TIM_SET_AUTORELOAD(&htim3, tonePeriod);
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <beep+0x8c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <beep+0x8c>)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, tonePeriod / 2);
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <beep+0x8c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	0852      	lsrs	r2, r2, #1
 800062e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <beep+0x8c>)
 8000634:	f003 fe7e 	bl	8004334 <HAL_TIM_PWM_Start>
  }
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000027c 	.word	0x2000027c
 8000644:	20000280 	.word	0x20000280
 8000648:	200001c0 	.word	0x200001c0

0800064c <beepBlocking>:

void beepBlocking(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period / 2);
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <beepBlocking+0x2c>)
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <beepBlocking+0x2c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	0852      	lsrs	r2, r2, #1
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <beepBlocking+0x2c>)
 8000660:	f003 fe68 	bl	8004334 <HAL_TIM_PWM_Start>
  HAL_Delay(300);
 8000664:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000668:	f001 f8f2 	bl	8001850 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800066c:	2100      	movs	r1, #0
 800066e:	4802      	ldr	r0, [pc, #8]	@ (8000678 <beepBlocking+0x2c>)
 8000670:	f003 ff10 	bl	8004494 <HAL_TIM_PWM_Stop>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001c0 	.word	0x200001c0

0800067c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068c:	d10e      	bne.n	80006ac <HAL_GPIO_EXTI_Callback+0x30>
  {
    paused = !paused;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f083 0301 	eor.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80006aa:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == GPIO_PIN_5)
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d109      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x4a>
  {
    // Speed up the game: decrease gameDelay (with a lower limit of minDelay)
    if (gameDelay > minDelay)
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2232      	movs	r2, #50	@ 0x32
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d904      	bls.n	80006c6 <HAL_GPIO_EXTI_Callback+0x4a>
    {
      gameDelay -= 10;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3b0a      	subs	r3, #10
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006c4:	6013      	str	r3, [r2, #0]
    }
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000028f 	.word	0x2000028f
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006ec:	d107      	bne.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x22>
  {
    Xaxis = rawValues[0];
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006f0:	881a      	ldrh	r2, [r3, #0]
 80006f2:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006f4:	801a      	strh	r2, [r3, #0]
    Yaxis = rawValues[1];
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006f8:	885a      	ldrh	r2, [r3, #2]
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80006fc:	801a      	strh	r2, [r3, #0]
    // sprintf(msg, "X: %hu, Y: %hu\r\n", Xaxis, Yaxis);
    // HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000250 	.word	0x20000250
 8000710:	2000024c 	.word	0x2000024c
 8000714:	2000024e 	.word	0x2000024e

08000718 <clearscreen>:

static void clearscreen(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af02      	add	r7, sp, #8
  uint8_t data[2];
  for (uint8_t r = 0; r < 11; r++)
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	e024      	b.n	800076e <clearscreen+0x56>
  {
    data[0] = COM_REG;
 8000724:	23fd      	movs	r3, #253	@ 0xfd
 8000726:	713b      	strb	r3, [r7, #4]
    data[1] = PAGE_1;
 8000728:	2300      	movs	r3, #0
 800072a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800072c:	23ea      	movs	r3, #234	@ 0xea
 800072e:	4619      	mov	r1, r3
 8000730:	1d3a      	adds	r2, r7, #4
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2302      	movs	r3, #2
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <clearscreen+0x68>)
 800073c:	f002 fd58 	bl	80031f0 <HAL_I2C_Master_Transmit>
    data[0] = MAT_ROW[r];
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <clearscreen+0x6c>)
 8000744:	5cd3      	ldrb	r3, [r2, r3]
 8000746:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00;
 8000748:	2300      	movs	r3, #0
 800074a:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800074c:	23ea      	movs	r3, #234	@ 0xea
 800074e:	4619      	mov	r1, r3
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2302      	movs	r3, #2
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <clearscreen+0x68>)
 800075c:	f002 fd48 	bl	80031f0 <HAL_I2C_Master_Transmit>
    screenstatus[r] = 0;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <clearscreen+0x70>)
 8000764:	2100      	movs	r1, #0
 8000766:	54d1      	strb	r1, [r2, r3]
  for (uint8_t r = 0; r < 11; r++)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	3301      	adds	r3, #1
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b0a      	cmp	r3, #10
 8000772:	d9d7      	bls.n	8000724 <clearscreen+0xc>
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000124 	.word	0x20000124
 8000784:	08006290 	.word	0x08006290
 8000788:	20000284 	.word	0x20000284

0800078c <turnonscreen>:
  data[1] = 0x00;
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
}

static void turnonscreen(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
  uint8_t data[2];
  data[0] = COM_REG;
 8000792:	23fd      	movs	r3, #253	@ 0xfd
 8000794:	713b      	strb	r3, [r7, #4]
  data[1] = FUN_REG;
 8000796:	230b      	movs	r3, #11
 8000798:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800079a:	23ea      	movs	r3, #234	@ 0xea
 800079c:	4619      	mov	r1, r3
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2302      	movs	r3, #2
 80007a8:	480a      	ldr	r0, [pc, #40]	@ (80007d4 <turnonscreen+0x48>)
 80007aa:	f002 fd21 	bl	80031f0 <HAL_I2C_Master_Transmit>

  data[0] = 0x0A;
 80007ae:	230a      	movs	r3, #10
 80007b0:	713b      	strb	r3, [r7, #4]
  data[1] = 0x01;
 80007b2:	2301      	movs	r3, #1
 80007b4:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80007b6:	23ea      	movs	r3, #234	@ 0xea
 80007b8:	4619      	mov	r1, r3
 80007ba:	1d3a      	adds	r2, r7, #4
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2302      	movs	r3, #2
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <turnonscreen+0x48>)
 80007c6:	f002 fd13 	bl	80031f0 <HAL_I2C_Master_Transmit>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000124 	.word	0x20000124

080007d8 <addpixel>:

static void addpixel(uint8_t r, uint8_t c)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  screenstatus[r] |= MAT_COL[c];
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <addpixel+0x74>)
 80007ec:	5cd1      	ldrb	r1, [r2, r3]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <addpixel+0x78>)
 80007f2:	5cd2      	ldrb	r2, [r2, r3]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	b2d1      	uxtb	r1, r2
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <addpixel+0x74>)
 80007fc:	54d1      	strb	r1, [r2, r3]
  data[0] = COM_REG;
 80007fe:	23fd      	movs	r3, #253	@ 0xfd
 8000800:	733b      	strb	r3, [r7, #12]
  data[1] = PAGE_1;
 8000802:	2300      	movs	r3, #0
 8000804:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000806:	23ea      	movs	r3, #234	@ 0xea
 8000808:	4619      	mov	r1, r3
 800080a:	f107 020c 	add.w	r2, r7, #12
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	480f      	ldr	r0, [pc, #60]	@ (8000854 <addpixel+0x7c>)
 8000818:	f002 fcea 	bl	80031f0 <HAL_I2C_Master_Transmit>
  data[0] = MAT_ROW[r];
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <addpixel+0x80>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	733b      	strb	r3, [r7, #12]
  data[1] = screenstatus[r];
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a09      	ldr	r2, [pc, #36]	@ (800084c <addpixel+0x74>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800082c:	23ea      	movs	r3, #234	@ 0xea
 800082e:	4619      	mov	r1, r3
 8000830:	f107 020c 	add.w	r2, r7, #12
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2302      	movs	r3, #2
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <addpixel+0x7c>)
 800083e:	f002 fcd7 	bl	80031f0 <HAL_I2C_Master_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000284 	.word	0x20000284
 8000850:	0800629c 	.word	0x0800629c
 8000854:	20000124 	.word	0x20000124
 8000858:	08006290 	.word	0x08006290

0800085c <drawPaddle>:
  data[1] = screenstatus[r];
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
}

static void drawPaddle(uint8_t centerCol)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if (centerCol == 0)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10c      	bne.n	8000886 <drawPaddle+0x2a>
  {
    addpixel(10, 0);
 800086c:	2100      	movs	r1, #0
 800086e:	200a      	movs	r0, #10
 8000870:	f7ff ffb2 	bl	80007d8 <addpixel>
    addpixel(10, 1);
 8000874:	2101      	movs	r1, #1
 8000876:	200a      	movs	r0, #10
 8000878:	f7ff ffae 	bl	80007d8 <addpixel>
    addpixel(10, 2);
 800087c:	2102      	movs	r1, #2
 800087e:	200a      	movs	r0, #10
 8000880:	f7ff ffaa 	bl	80007d8 <addpixel>
  {
    addpixel(10, centerCol - 1);
    addpixel(10, centerCol);
    addpixel(10, centerCol + 1);
  }
}
 8000884:	e022      	b.n	80008cc <drawPaddle+0x70>
  else if (centerCol >= 6)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b05      	cmp	r3, #5
 800088a:	d90c      	bls.n	80008a6 <drawPaddle+0x4a>
    addpixel(10, 4);
 800088c:	2104      	movs	r1, #4
 800088e:	200a      	movs	r0, #10
 8000890:	f7ff ffa2 	bl	80007d8 <addpixel>
    addpixel(10, 5);
 8000894:	2105      	movs	r1, #5
 8000896:	200a      	movs	r0, #10
 8000898:	f7ff ff9e 	bl	80007d8 <addpixel>
    addpixel(10, 6);
 800089c:	2106      	movs	r1, #6
 800089e:	200a      	movs	r0, #10
 80008a0:	f7ff ff9a 	bl	80007d8 <addpixel>
}
 80008a4:	e012      	b.n	80008cc <drawPaddle+0x70>
    addpixel(10, centerCol - 1);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	200a      	movs	r0, #10
 80008b0:	f7ff ff92 	bl	80007d8 <addpixel>
    addpixel(10, centerCol);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4619      	mov	r1, r3
 80008b8:	200a      	movs	r0, #10
 80008ba:	f7ff ff8d 	bl	80007d8 <addpixel>
    addpixel(10, centerCol + 1);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4619      	mov	r1, r3
 80008c6:	200a      	movs	r0, #10
 80008c8:	f7ff ff86 	bl	80007d8 <addpixel>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <drawDigit>:

static void drawDigit(uint8_t digit, uint8_t topRow, uint8_t leftCol)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	460b      	mov	r3, r1
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	4613      	mov	r3, r2
 80008e4:	717b      	strb	r3, [r7, #5]
  if (digit > 9) return;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b09      	cmp	r3, #9
 80008ea:	d82d      	bhi.n	8000948 <drawDigit+0x74>
  for (uint8_t i = 0; i < 5; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e026      	b.n	8000940 <drawDigit+0x6c>
  {
    for (uint8_t j = 0; j < 3; j++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
 80008f6:	e01d      	b.n	8000934 <drawDigit+0x60>
    {
      if (digitPatterns[digit][i][j])
 80008f8:	79f9      	ldrb	r1, [r7, #7]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	7bb8      	ldrb	r0, [r7, #14]
 80008fe:	4c14      	ldr	r4, [pc, #80]	@ (8000950 <drawDigit+0x7c>)
 8000900:	461a      	mov	r2, r3
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	441a      	add	r2, r3
 8000906:	460b      	mov	r3, r1
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	4413      	add	r3, r2
 800090e:	4423      	add	r3, r4
 8000910:	4403      	add	r3, r0
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00a      	beq.n	800092e <drawDigit+0x5a>
      {
        addpixel(topRow + i, leftCol + j);
 8000918:	79ba      	ldrb	r2, [r7, #6]
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	4413      	add	r3, r2
 800091e:	b2d8      	uxtb	r0, r3
 8000920:	797a      	ldrb	r2, [r7, #5]
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	4413      	add	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	f7ff ff55 	bl	80007d8 <addpixel>
    for (uint8_t j = 0; j < 3; j++)
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	3301      	adds	r3, #1
 8000932:	73bb      	strb	r3, [r7, #14]
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d9de      	bls.n	80008f8 <drawDigit+0x24>
  for (uint8_t i = 0; i < 5; i++)
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	3301      	adds	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d9d5      	bls.n	80008f2 <drawDigit+0x1e>
 8000946:	e000      	b.n	800094a <drawDigit+0x76>
  if (digit > 9) return;
 8000948:	bf00      	nop
      }
    }
  }
}
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	080062a4 	.word	0x080062a4

08000954 <displayScore>:

static void displayScore(uint32_t score)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  clearscreen();
 800095c:	f7ff fedc 	bl	8000718 <clearscreen>
  uint8_t topRow = 3;
 8000960:	2303      	movs	r3, #3
 8000962:	73fb      	strb	r3, [r7, #15]
  if (score < 10)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b09      	cmp	r3, #9
 8000968:	d807      	bhi.n	800097a <displayScore+0x26>
  {
    drawDigit((uint8_t)score, topRow, 2);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	7bf9      	ldrb	r1, [r7, #15]
 8000970:	2202      	movs	r2, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ffae 	bl	80008d4 <drawDigit>
    uint8_t tens = (score / 10) % 10;
    uint8_t ones = score % 10;
    drawDigit(tens, topRow, 0);
    drawDigit(ones, topRow, 4);
  }
}
 8000978:	e027      	b.n	80009ca <displayScore+0x76>
    uint8_t tens = (score / 10) % 10;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <displayScore+0x80>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	08d9      	lsrs	r1, r3, #3
 8000984:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <displayScore+0x80>)
 8000986:	fba3 2301 	umull	r2, r3, r3, r1
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	1aca      	subs	r2, r1, r3
 8000996:	4613      	mov	r3, r2
 8000998:	73bb      	strb	r3, [r7, #14]
    uint8_t ones = score % 10;
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <displayScore+0x80>)
 800099e:	fba3 2301 	umull	r2, r3, r3, r1
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	1aca      	subs	r2, r1, r3
 80009ae:	4613      	mov	r3, r2
 80009b0:	737b      	strb	r3, [r7, #13]
    drawDigit(tens, topRow, 0);
 80009b2:	7bf9      	ldrb	r1, [r7, #15]
 80009b4:	7bbb      	ldrb	r3, [r7, #14]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff8b 	bl	80008d4 <drawDigit>
    drawDigit(ones, topRow, 4);
 80009be:	7bf9      	ldrb	r1, [r7, #15]
 80009c0:	7b7b      	ldrb	r3, [r7, #13]
 80009c2:	2204      	movs	r2, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff85 	bl	80008d4 <drawDigit>
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	cccccccd 	.word	0xcccccccd

080009d8 <flashScreen>:

static void flashScreen(uint8_t times)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af02      	add	r7, sp, #8
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2];
  uint32_t defaultPeriod = htim3.Init.Period;
 80009e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b20 <flashScreen+0x148>)
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t notePeriods[3] = {999, 1249, 1666};
 80009e8:	4a4e      	ldr	r2, [pc, #312]	@ (8000b24 <flashScreen+0x14c>)
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t noteDurations[3] = {150, 150, 300};
 80009f4:	4a4c      	ldr	r2, [pc, #304]	@ (8000b28 <flashScreen+0x150>)
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  for (uint8_t t = 0; t < times; t++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a06:	e07a      	b.n	8000afe <flashScreen+0x126>
  {
    for (uint8_t r = 0; r < 11; r++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000a0e:	e02e      	b.n	8000a6e <flashScreen+0x96>
    {
      data[0] = COM_REG;
 8000a10:	23fd      	movs	r3, #253	@ 0xfd
 8000a12:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      data[1] = PAGE_1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000a1c:	23ea      	movs	r3, #234	@ 0xea
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	483f      	ldr	r0, [pc, #252]	@ (8000b2c <flashScreen+0x154>)
 8000a2e:	f002 fbdf 	bl	80031f0 <HAL_I2C_Master_Transmit>
      data[0] = MAT_ROW[r];
 8000a32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a36:	4a3e      	ldr	r2, [pc, #248]	@ (8000b30 <flashScreen+0x158>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      data[1] = 0x7F;
 8000a3e:	237f      	movs	r3, #127	@ 0x7f
 8000a40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000a44:	23ea      	movs	r3, #234	@ 0xea
 8000a46:	4619      	mov	r1, r3
 8000a48:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2302      	movs	r3, #2
 8000a54:	4835      	ldr	r0, [pc, #212]	@ (8000b2c <flashScreen+0x154>)
 8000a56:	f002 fbcb 	bl	80031f0 <HAL_I2C_Master_Transmit>
      screenstatus[r] = 0x7F;
 8000a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a5e:	4a35      	ldr	r2, [pc, #212]	@ (8000b34 <flashScreen+0x15c>)
 8000a60:	217f      	movs	r1, #127	@ 0x7f
 8000a62:	54d1      	strb	r1, [r2, r3]
    for (uint8_t r = 0; r < 11; r++)
 8000a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a68:	3301      	adds	r3, #1
 8000a6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000a6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d9cc      	bls.n	8000a10 <flashScreen+0x38>
    }
    if (t < 3)
 8000a76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d830      	bhi.n	8000ae0 <flashScreen+0x108>
    {
      __HAL_TIM_SET_AUTORELOAD(&htim3, notePeriods[t]);
 8000a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a82:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <flashScreen+0x148>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	3330      	adds	r3, #48	@ 0x30
 8000a8a:	443b      	add	r3, r7
 8000a8c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	3330      	adds	r3, #48	@ 0x30
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b20 <flashScreen+0x148>)
 8000aa2:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, notePeriods[t] / 2);
 8000aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	3330      	adds	r3, #48	@ 0x30
 8000aac:	443b      	add	r3, r7
 8000aae:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <flashScreen+0x148>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	0852      	lsrs	r2, r2, #1
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000aba:	2100      	movs	r1, #0
 8000abc:	4818      	ldr	r0, [pc, #96]	@ (8000b20 <flashScreen+0x148>)
 8000abe:	f003 fc39 	bl	8004334 <HAL_TIM_PWM_Start>
      HAL_Delay(noteDurations[t]);
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	3330      	adds	r3, #48	@ 0x30
 8000aca:	443b      	add	r3, r7
 8000acc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 febd 	bl	8001850 <HAL_Delay>
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <flashScreen+0x148>)
 8000ada:	f003 fcdb 	bl	8004494 <HAL_TIM_PWM_Stop>
 8000ade:	e001      	b.n	8000ae4 <flashScreen+0x10c>
    }
    else
    {
      beepBlocking();
 8000ae0:	f7ff fdb4 	bl	800064c <beepBlocking>
    }
    HAL_Delay(200);
 8000ae4:	20c8      	movs	r0, #200	@ 0xc8
 8000ae6:	f000 feb3 	bl	8001850 <HAL_Delay>
    clearscreen();
 8000aea:	f7ff fe15 	bl	8000718 <clearscreen>
    HAL_Delay(200);
 8000aee:	20c8      	movs	r0, #200	@ 0xc8
 8000af0:	f000 feae 	bl	8001850 <HAL_Delay>
  for (uint8_t t = 0; t < times; t++)
 8000af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000af8:	3301      	adds	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000afe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f4ff af7f 	bcc.w	8000a08 <flashScreen+0x30>
  }
  __HAL_TIM_SET_AUTORELOAD(&htim3, defaultPeriod);
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <flashScreen+0x148>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b12:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <flashScreen+0x148>)
 8000b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	@ 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200001c0 	.word	0x200001c0
 8000b24:	08006248 	.word	0x08006248
 8000b28:	08006254 	.word	0x08006254
 8000b2c:	20000124 	.word	0x20000124
 8000b30:	08006290 	.word	0x08006290
 8000b34:	20000284 	.word	0x20000284

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 fe15 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */
  // (Additional initialization before system clock config)
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f909 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // (Additional system initialization)
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 faf3 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4a:	f000 fad1 	bl	80010f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b4e:	f000 faa5 	bl	800109c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b52:	f000 f96d 	bl	8000e30 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b56:	f000 f9f9 	bl	8000f4c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b5a:	f000 f9c9 	bl	8000ef0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b5e:	f000 fa43 	bl	8000fe8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rawValues, 2);
 8000b62:	2202      	movs	r2, #2
 8000b64:	496d      	ldr	r1, [pc, #436]	@ (8000d1c <main+0x1e4>)
 8000b66:	486e      	ldr	r0, [pc, #440]	@ (8000d20 <main+0x1e8>)
 8000b68:	f000 ffea 	bl	8001b40 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b6c:	486d      	ldr	r0, [pc, #436]	@ (8000d24 <main+0x1ec>)
 8000b6e:	f003 fb2f 	bl	80041d0 <HAL_TIM_Base_Start_IT>
  turnonscreen();
 8000b72:	f7ff fe0b 	bl	800078c <turnonscreen>

  /* Game variables for paddle and falling object are now local */
  uint8_t paddlePos = 3;
 8000b76:	2303      	movs	r3, #3
 8000b78:	73fb      	strb	r3, [r7, #15]
  uint8_t fallRow   = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
  uint8_t fallCol   = 3;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	737b      	strb	r3, [r7, #13]
  /* 'score' is local to main in this example; if needed globally, move it to USER CODE PV */
  uint32_t scoreLocal = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  /* Note: gameDelay and minDelay are now global */

  /* Joystick thresholds */
  const uint16_t thresholdRight = 2500;
 8000b86:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000b8a:	80bb      	strh	r3, [r7, #4]
  const uint16_t thresholdLeft  = 1500;
 8000b8c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b90:	807b      	strh	r3, [r7, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (!paused)
 8000b92:	4b65      	ldr	r3, [pc, #404]	@ (8000d28 <main+0x1f0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f083 0301 	eor.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 809f 	beq.w	8000ce0 <main+0x1a8>
    {
      clearscreen();
 8000ba2:	f7ff fdb9 	bl	8000718 <clearscreen>

      if (Yaxis > thresholdRight && paddlePos > 0)
 8000ba6:	4b61      	ldr	r3, [pc, #388]	@ (8000d2c <main+0x1f4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	88ba      	ldrh	r2, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d206      	bcs.n	8000bbe <main+0x86>
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <main+0x86>
      {
        paddlePos--;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e00a      	b.n	8000bd4 <main+0x9c>
      }
      else if (Yaxis < thresholdLeft && paddlePos < 6)
 8000bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8000d2c <main+0x1f4>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d905      	bls.n	8000bd4 <main+0x9c>
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d802      	bhi.n	8000bd4 <main+0x9c>
      {
        paddlePos++;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
      }
      drawPaddle(paddlePos);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe40 	bl	800085c <drawPaddle>
      addpixel(fallRow, fallCol);
 8000bdc:	7b7a      	ldrb	r2, [r7, #13]
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fdf8 	bl	80007d8 <addpixel>
      HAL_Delay(gameDelay);
 8000be8:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <main+0x1f8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fe2f 	bl	8001850 <HAL_Delay>

      if (fallRow < 10)
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	d803      	bhi.n	8000c00 <main+0xc8>
      {
        fallRow++;
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	73bb      	strb	r3, [r7, #14]
 8000bfe:	e076      	b.n	8000cee <main+0x1b6>
      }
      else
      {
        uint8_t catchStart, catchEnd;
        if (paddlePos == 0)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d104      	bne.n	8000c10 <main+0xd8>
        {
          catchStart = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	71fb      	strb	r3, [r7, #7]
          catchEnd   = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	e00d      	b.n	8000c2c <main+0xf4>
        }
        else if (paddlePos >= 6)
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d904      	bls.n	8000c20 <main+0xe8>
        {
          catchStart = 4;
 8000c16:	2304      	movs	r3, #4
 8000c18:	71fb      	strb	r3, [r7, #7]
          catchEnd   = 6;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	71bb      	strb	r3, [r7, #6]
 8000c1e:	e005      	b.n	8000c2c <main+0xf4>
        }
        else
        {
          catchStart = paddlePos - 1;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
          catchEnd   = paddlePos + 1;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	71bb      	strb	r3, [r7, #6]
        }

        if (fallCol >= catchStart && fallCol <= catchEnd)
 8000c2c:	7b7a      	ldrb	r2, [r7, #13]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d324      	bcc.n	8000c7e <main+0x146>
 8000c34:	7b7a      	ldrb	r2, [r7, #13]
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d820      	bhi.n	8000c7e <main+0x146>
        {
          beep(scoreLocal);
 8000c3c:	68b8      	ldr	r0, [r7, #8]
 8000c3e:	f7ff fcbd 	bl	80005bc <beep>
          scoreLocal++;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3301      	adds	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
          sprintf(msg, "Score: %lu\r\n", scoreLocal);
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	493a      	ldr	r1, [pc, #232]	@ (8000d34 <main+0x1fc>)
 8000c4c:	483a      	ldr	r0, [pc, #232]	@ (8000d38 <main+0x200>)
 8000c4e:	f004 fe4f 	bl	80058f0 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000c52:	4839      	ldr	r0, [pc, #228]	@ (8000d38 <main+0x200>)
 8000c54:	f7ff fac4 	bl	80001e0 <strlen>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	4935      	ldr	r1, [pc, #212]	@ (8000d38 <main+0x200>)
 8000c62:	4836      	ldr	r0, [pc, #216]	@ (8000d3c <main+0x204>)
 8000c64:	f004 facf 	bl	8005206 <HAL_UART_Transmit>
          if (gameDelay > minDelay)
 8000c68:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <main+0x1f8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2232      	movs	r2, #50	@ 0x32
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d924      	bls.n	8000cbc <main+0x184>
          {
            gameDelay -= 10;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <main+0x1f8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3b0a      	subs	r3, #10
 8000c78:	4a2d      	ldr	r2, [pc, #180]	@ (8000d30 <main+0x1f8>)
 8000c7a:	6013      	str	r3, [r2, #0]
          if (gameDelay > minDelay)
 8000c7c:	e01e      	b.n	8000cbc <main+0x184>
          }
        }
        else
        {
          sprintf(msg, "Game Over! Final Score: %lu\r\n", scoreLocal);
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	492f      	ldr	r1, [pc, #188]	@ (8000d40 <main+0x208>)
 8000c82:	482d      	ldr	r0, [pc, #180]	@ (8000d38 <main+0x200>)
 8000c84:	f004 fe34 	bl	80058f0 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000c88:	482b      	ldr	r0, [pc, #172]	@ (8000d38 <main+0x200>)
 8000c8a:	f7ff faa9 	bl	80001e0 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	4928      	ldr	r1, [pc, #160]	@ (8000d38 <main+0x200>)
 8000c98:	4828      	ldr	r0, [pc, #160]	@ (8000d3c <main+0x204>)
 8000c9a:	f004 fab4 	bl	8005206 <HAL_UART_Transmit>
          flashScreen(3);
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f7ff fe9a 	bl	80009d8 <flashScreen>
          displayScore(scoreLocal);
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f7ff fe55 	bl	8000954 <displayScore>
          HAL_Delay(2000);
 8000caa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cae:	f000 fdcf 	bl	8001850 <HAL_Delay>
          scoreLocal = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
          gameDelay = 150;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <main+0x1f8>)
 8000cb8:	2296      	movs	r2, #150	@ 0x96
 8000cba:	601a      	str	r2, [r3, #0]
        }
        fallRow = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73bb      	strb	r3, [r7, #14]
        fallCol = (fallCol + 2) % 7;
 8000cc0:	7b7b      	ldrb	r3, [r7, #13]
 8000cc2:	1c9a      	adds	r2, r3, #2
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <main+0x20c>)
 8000cc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cca:	4413      	add	r3, r2
 8000ccc:	1099      	asrs	r1, r3, #2
 8000cce:	17d3      	asrs	r3, r2, #31
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a5b      	subs	r3, r3, r1
 8000cd8:	1ad1      	subs	r1, r2, r3
 8000cda:	460b      	mov	r3, r1
 8000cdc:	737b      	strb	r3, [r7, #13]
 8000cde:	e006      	b.n	8000cee <main+0x1b6>
      }
    }
    else
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4819      	ldr	r0, [pc, #100]	@ (8000d48 <main+0x210>)
 8000ce4:	f002 f90d 	bl	8002f02 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8000ce8:	20c8      	movs	r0, #200	@ 0xc8
 8000cea:	f000 fdb1 	bl	8001850 <HAL_Delay>
    }

    if (beepActive && (HAL_GetTick() - beepStartTick >= beepDuration))
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <main+0x214>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f43f af4d 	beq.w	8000b92 <main+0x5a>
 8000cf8:	f000 fd9e 	bl	8001838 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <main+0x218>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2264      	movs	r2, #100	@ 0x64
 8000d06:	4293      	cmp	r3, r2
 8000d08:	f4ff af43 	bcc.w	8000b92 <main+0x5a>
    {
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4811      	ldr	r0, [pc, #68]	@ (8000d54 <main+0x21c>)
 8000d10:	f003 fbc0 	bl	8004494 <HAL_TIM_PWM_Stop>
      beepActive = false;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <main+0x214>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
    if (!paused)
 8000d1a:	e73a      	b.n	8000b92 <main+0x5a>
 8000d1c:	20000250 	.word	0x20000250
 8000d20:	2000007c 	.word	0x2000007c
 8000d24:	20000178 	.word	0x20000178
 8000d28:	2000028f 	.word	0x2000028f
 8000d2c:	2000024e 	.word	0x2000024e
 8000d30:	20000000 	.word	0x20000000
 8000d34:	08006260 	.word	0x08006260
 8000d38:	20000254 	.word	0x20000254
 8000d3c:	20000208 	.word	0x20000208
 8000d40:	08006270 	.word	0x08006270
 8000d44:	92492493 	.word	0x92492493
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	2000027c 	.word	0x2000027c
 8000d50:	20000280 	.word	0x20000280
 8000d54:	200001c0 	.word	0x200001c0

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	@ 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2230      	movs	r2, #48	@ 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fde4 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <SystemClock_Config+0xd0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <SystemClock_Config+0xd0>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8c:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <SystemClock_Config+0xd0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000da4:	4a21      	ldr	r2, [pc, #132]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fd0c 	bl	8003800 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dee:	f000 fa2d 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 ff6e 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e1a:	f000 fa17 	bl	800124c <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	@ 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e44:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <MX_ADC1_Init+0xb8>)
 8000e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e48:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e56:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e72:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <MX_ADC1_Init+0xbc>)
 8000e74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e90:	4814      	ldr	r0, [pc, #80]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000e92:	f000 fd01 	bl	8001898 <HAL_ADC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f9d6 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000eb2:	f000 ff5d 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ebc:	f000 f9c6 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_ADC1_Init+0xb4>)
 8000ece:	f000 ff4f 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ed8:	f000 f9b8 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000007c 	.word	0x2000007c
 8000ee8:	40012000 	.word	0x40012000
 8000eec:	0f000001 	.word	0x0f000001

08000ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000ef6:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <MX_I2C1_Init+0x54>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000efc:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_I2C1_Init+0x58>)
 8000efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 234;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f08:	22ea      	movs	r2, #234	@ 0xea
 8000f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <MX_I2C1_Init+0x50>)
 8000f2e:	f002 f81b 	bl	8002f68 <HAL_I2C_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f38:	f000 f988 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000124 	.word	0x20000124
 8000f44:	40005400 	.word	0x40005400
 8000f48:	00061a80 	.word	0x00061a80

08000f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f72:	220a      	movs	r2, #10
 8000f74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f7e:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8e:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000f90:	f003 f8ce 	bl	8004130 <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 f957 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000fac:	f003 fca0 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 f949 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_TIM2_Init+0x94>)
 8000fc8:	f004 f84e 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000fd2:	f000 f93b 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000178 	.word	0x20000178
 8000fe4:	0001481f 	.word	0x0001481f

08000fe8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <MX_TIM3_Init+0xac>)
 800100c:	4a22      	ldr	r2, [pc, #136]	@ (8001098 <MX_TIM3_Init+0xb0>)
 800100e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001012:	2253      	movs	r2, #83	@ 0x53
 8001014:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_TIM3_Init+0xac>)
 800101e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001022:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_TIM3_Init+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001030:	4818      	ldr	r0, [pc, #96]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001032:	f003 f92f 	bl	8004294 <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 f906 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001050:	f004 f80a 	bl	8005068 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800105a:	f000 f8f7 	bl	800124c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	@ 0x60
 8001060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001076:	f003 fb79 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001080:	f000 f8e4 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_TIM3_Init+0xac>)
 8001086:	f000 fa1f 	bl	80014c8 <HAL_TIM_MspPostInit>

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001c0 	.word	0x200001c0
 8001098:	40000400 	.word	0x40000400

0800109c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <MX_USART2_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f004 f84a 	bl	800516c <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f8b5 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000208 	.word	0x20000208
 80010ec:	40004400 	.word	0x40004400

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_DMA_Init+0x3c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <MX_DMA_Init+0x3c>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_DMA_Init+0x3c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2038      	movs	r0, #56	@ 0x38
 8001118:	f001 f9af 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800111c:	2038      	movs	r0, #56	@ 0x38
 800111e:	f001 f9c8 	bl	80024b2 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	@ 0x28
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <MX_GPIO_Init+0x10c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a3b      	ldr	r2, [pc, #236]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b39      	ldr	r3, [pc, #228]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b35      	ldr	r3, [pc, #212]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a34      	ldr	r2, [pc, #208]	@ (800123c <MX_GPIO_Init+0x10c>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b32      	ldr	r3, [pc, #200]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <MX_GPIO_Init+0x10c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <MX_GPIO_Init+0x10c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a26      	ldr	r2, [pc, #152]	@ (800123c <MX_GPIO_Init+0x10c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_GPIO_Init+0x10c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	4821      	ldr	r0, [pc, #132]	@ (8001240 <MX_GPIO_Init+0x110>)
 80011bc:	f001 fe88 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	481b      	ldr	r0, [pc, #108]	@ (8001244 <MX_GPIO_Init+0x114>)
 80011d8:	f001 fcf6 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011dc:	2320      	movs	r3, #32
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_GPIO_Init+0x110>)
 80011f4:	f001 fce8 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f8:	2320      	movs	r3, #32
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <MX_GPIO_Init+0x118>)
 800120e:	f001 fcdb 	bl	8002bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2017      	movs	r0, #23
 8001218:	f001 f92f 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800121c:	2017      	movs	r0, #23
 800121e:	f001 f948 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2028      	movs	r0, #40	@ 0x28
 8001228:	f001 f927 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800122c:	2028      	movs	r0, #40	@ 0x28
 800122e:	f001 f940 	bl	80024b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020800 	.word	0x40020800
 8001248:	40020400 	.word	0x40020400

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a33      	ldr	r2, [pc, #204]	@ (8001394 <HAL_ADC_MspInit+0xec>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d15f      	bne.n	800138a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a31      	ldr	r2, [pc, #196]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_ADC_MspInit+0xf0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001302:	2303      	movs	r3, #3
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4821      	ldr	r0, [pc, #132]	@ (800139c <HAL_ADC_MspInit+0xf4>)
 8001316:	f001 fc57 	bl	8002bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 800131c:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_ADC_MspInit+0xfc>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800135e:	4810      	ldr	r0, [pc, #64]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001360:	f001 f8c2 	bl	80024e8 <HAL_DMA_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800136a:	f7ff ff6f 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001372:	639a      	str	r2, [r3, #56]	@ 0x38
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2101      	movs	r1, #1
 800137e:	2012      	movs	r0, #18
 8001380:	f001 f87b 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001384:	2012      	movs	r0, #18
 8001386:	f001 f894 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012000 	.word	0x40012000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	200000c4 	.word	0x200000c4
 80013a4:	40026410 	.word	0x40026410

080013a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	@ (800142c <HAL_I2C_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12c      	bne.n	8001424 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ec:	2312      	movs	r3, #18
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f8:	2304      	movs	r3, #4
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	480c      	ldr	r0, [pc, #48]	@ (8001434 <HAL_I2C_MspInit+0x8c>)
 8001404:	f001 fbe0 	bl	8002bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 8001412:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001416:	6413      	str	r3, [r2, #64]	@ 0x40
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_I2C_MspInit+0x88>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001448:	d115      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_TIM_Base_MspInit+0x48>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201c      	movs	r0, #28
 800146c:	f001 f805 	bl	800247a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001470:	201c      	movs	r0, #28
 8001472:	f001 f81e 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_TIM_PWM_MspInit+0x40>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_TIM_PWM_MspInit+0x40>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_TIM_PWM_MspInit+0x40>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40000400 	.word	0x40000400
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <HAL_TIM_MspPostInit+0x68>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11d      	bne.n	8001526 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001506:	2310      	movs	r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_TIM_MspPostInit+0x70>)
 8001522:	f001 fb51 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000400 	.word	0x40000400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_UART_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001596:	230c      	movs	r3, #12
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <HAL_UART_MspInit+0x8c>)
 80015b2:	f001 fb09 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f8f5 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <ADC_IRQHandler+0x10>)
 8001632:	f000 f974 	bl	800191e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000007c 	.word	0x2000007c

08001640 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001644:	2020      	movs	r0, #32
 8001646:	f001 fc77 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f002 ff81 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000178 	.word	0x20000178

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001668:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800166c:	f001 fc64 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA2_Stream0_IRQHandler+0x10>)
 800167a:	f001 f83b 	bl	80026f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000c4 	.word	0x200000c4

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f004 f944 	bl	8005944 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20018000 	.word	0x20018000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000290 	.word	0x20000290
 80016f0:	200003e0 	.word	0x200003e0

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171e:	490e      	ldr	r1, [pc, #56]	@ (8001758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001720:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001734:	4c0b      	ldr	r4, [pc, #44]	@ (8001764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001742:	f7ff ffd7 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f004 f903 	bl	8005950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff f9f5 	bl	8000b38 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800175c:	080063a0 	.word	0x080063a0
  ldr r2, =_sbss
 8001760:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001764:	200003e0 	.word	0x200003e0

08001768 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <DMA1_Stream0_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_Init+0x40>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_Init+0x40>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	@ (80017ac <HAL_Init+0x40>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fe65 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fd5a 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fe7d 	bl	80024ce <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 fe45 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000004 	.word	0x20000004
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20000294 	.word	0x20000294

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000294 	.word	0x20000294

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000000c 	.word	0x2000000c

08001898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e033      	b.n	8001916 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fcf6 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	f043 0202 	orr.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fb62 	bl	8001fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
 8001906:	e001      	b.n	800190c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d049      	beq.n	80019e8 <HAL_ADC_IRQHandler+0xca>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d046      	beq.n	80019e8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d12b      	bne.n	80019d8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001984:	2b00      	cmp	r3, #0
 8001986:	d127      	bne.n	80019d8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d119      	bne.n	80019d8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0220 	bic.w	r2, r2, #32
 80019b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f9a1 	bl	8001d20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 0212 	mvn.w	r2, #18
 80019e6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d057      	beq.n	8001aae <HAL_ADC_IRQHandler+0x190>
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d054      	beq.n	8001aae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d139      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12b      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d124      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d11d      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d119      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fc06 	bl	80022b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 020c 	mvn.w	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001abc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d017      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x1d6>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d014      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10d      	bne.n	8001af4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f92f 	bl	8001d48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f06f 0201 	mvn.w	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b02:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x218>
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f043 0202 	orr.w	r2, r3, #2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0220 	mvn.w	r2, #32
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f918 	bl	8001d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0220 	mvn.w	r2, #32
 8001b34:	601a      	str	r2, [r3, #0]
  }
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start_DMA+0x1e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0ce      	b.n	8001cfc <HAL_ADC_Start_DMA+0x1bc>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b84:	4b5f      	ldr	r3, [pc, #380]	@ (8001d04 <HAL_ADC_Start_DMA+0x1c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_ADC_Start_DMA+0x1c8>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b98:	e002      	b.n	8001ba0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f9      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb4:	d107      	bne.n	8001bc6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 8086 	bne.w	8001ce2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c14:	d106      	bne.n	8001c24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f023 0206 	bic.w	r2, r3, #6
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c22:	e002      	b.n	8001c2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <HAL_ADC_Start_DMA+0x1cc>)
 8001c34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	4a35      	ldr	r2, [pc, #212]	@ (8001d10 <HAL_ADC_Start_DMA+0x1d0>)
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c42:	4a34      	ldr	r2, [pc, #208]	@ (8001d14 <HAL_ADC_Start_DMA+0x1d4>)
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <HAL_ADC_Start_DMA+0x1d8>)
 8001c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	334c      	adds	r3, #76	@ 0x4c
 8001c82:	4619      	mov	r1, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f000 fcdc 	bl	8002644 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10f      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d129      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	e020      	b.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_ADC_Start_DMA+0x1dc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d114      	bne.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e00b      	b.n	8001cfa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000004 	.word	0x20000004
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	080021ad 	.word	0x080021ad
 8001d14:	08002267 	.word	0x08002267
 8001d18:	08002283 	.word	0x08002283
 8001d1c:	40012000 	.word	0x40012000

08001d20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x1c>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e105      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x228>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d925      	bls.n	8001de8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68d9      	ldr	r1, [r3, #12]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	3b1e      	subs	r3, #30
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43da      	mvns	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4403      	add	r3, r0
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e022      	b.n	8001e2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4403      	add	r3, r0
 8001e24:	409a      	lsls	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d824      	bhi.n	8001e80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b05      	subs	r3, #5
 8001e48:	221f      	movs	r2, #31
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7e:	e04c      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d824      	bhi.n	8001ed2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b23      	subs	r3, #35	@ 0x23
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b23      	subs	r3, #35	@ 0x23
 8001ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed0:	e023      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b41      	subs	r3, #65	@ 0x41
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b41      	subs	r3, #65	@ 0x41
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x234>)
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x238>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d109      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x238>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d123      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d003      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0x1e6>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d11b      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d111      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_ADC_ConfigChannel+0x23c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x240>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9a      	lsrs	r2, r3, #18
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	431bde83 	.word	0x431bde83

08001fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fbc:	4b79      	ldr	r3, [pc, #484]	@ (80021a4 <ADC_Init+0x1f0>)
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	021a      	lsls	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800200c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800202e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6899      	ldr	r1, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	4a58      	ldr	r2, [pc, #352]	@ (80021a8 <ADC_Init+0x1f4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800205a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800207c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e00f      	b.n	80020b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0202 	bic.w	r2, r2, #2
 80020c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	005a      	lsls	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01b      	beq.n	8002118 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	3b01      	subs	r3, #1
 800210c:	035a      	lsls	r2, r3, #13
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e007      	b.n	8002128 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002136:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	3b01      	subs	r3, #1
 8002144:	051a      	lsls	r2, r3, #20
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800215c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800216a:	025a      	lsls	r2, r3, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	029a      	lsls	r2, r3, #10
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40012300 	.word	0x40012300
 80021a8:	0f000001 	.word	0x0f000001

080021ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13c      	bne.n	8002240 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d12b      	bne.n	8002238 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d127      	bne.n	8002238 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002200:	2b00      	cmp	r3, #0
 8002202:	d119      	bne.n	8002238 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0220 	bic.w	r2, r2, #32
 8002212:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fd71 	bl	8001d20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800223e:	e00e      	b.n	800225e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff fd85 	bl	8001d5c <HAL_ADC_ErrorCallback>
}
 8002252:	e004      	b.n	800225e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002272:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff fd5d 	bl	8001d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff fd5a 	bl	8001d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff3e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff31 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff f9a0 	bl	8001838 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e099      	b.n	8002638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002524:	e00f      	b.n	8002546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002526:	f7ff f987 	bl	8001838 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b05      	cmp	r3, #5
 8002532:	d908      	bls.n	8002546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e078      	b.n	8002638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e8      	bne.n	8002526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4b38      	ldr	r3, [pc, #224]	@ (8002640 <HAL_DMA_Init+0x158>)
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2b04      	cmp	r3, #4
 800259e:	d107      	bne.n	80025b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	4313      	orrs	r3, r2
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d117      	bne.n	800260a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fa6f 	bl	8002ad0 <DMA_CheckFifoParam>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002606:	2301      	movs	r3, #1
 8002608:	e016      	b.n	8002638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa26 	bl	8002a64 <DMA_CalcBaseAndBitshift>
 8002618:	4603      	mov	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	223f      	movs	r2, #63	@ 0x3f
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f010803f 	.word	0xf010803f

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_DMA_Start_IT+0x26>
 8002666:	2302      	movs	r3, #2
 8002668:	e040      	b.n	80026ec <HAL_DMA_Start_IT+0xa8>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d12f      	bne.n	80026de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f9b8 	bl	8002a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	223f      	movs	r2, #63	@ 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0216 	orr.w	r2, r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002700:	4b8e      	ldr	r3, [pc, #568]	@ (800293c <HAL_DMA_IRQHandler+0x248>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a8e      	ldr	r2, [pc, #568]	@ (8002940 <HAL_DMA_IRQHandler+0x24c>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2208      	movs	r2, #8
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	2208      	movs	r2, #8
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	f043 0202 	orr.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	2204      	movs	r2, #4
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d012      	beq.n	80027cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	2204      	movs	r2, #4
 80027ba:	409a      	lsls	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2210      	movs	r2, #16
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d043      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03c      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	2210      	movs	r2, #16
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d024      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e01f      	b.n	8002864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e016      	b.n	8002864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0208 	bic.w	r2, r2, #8
 8002852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	2220      	movs	r2, #32
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 808f 	beq.w	8002994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8087 	beq.w	8002994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	2220      	movs	r2, #32
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b05      	cmp	r3, #5
 800289c:	d136      	bne.n	800290c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0216 	bic.w	r2, r2, #22
 80028ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_DMA_IRQHandler+0x1da>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0208 	bic.w	r2, r2, #8
 80028dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	223f      	movs	r2, #63	@ 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d07e      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
        }
        return;
 800290a:	e079      	b.n	8002a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	2b00      	cmp	r3, #0
 800292e:	d031      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e02c      	b.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
 800293a:	bf00      	nop
 800293c:	20000004 	.word	0x20000004
 8002940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e01e      	b.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10f      	bne.n	8002984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0210 	bic.w	r2, r2, #16
 8002972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	2b00      	cmp	r3, #0
 800299a:	d032      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2205      	movs	r2, #5
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d307      	bcc.n	80029dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f2      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x2cc>
 80029da:	e000      	b.n	80029de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a00:	bf00      	nop
    }
  }
}
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	d108      	bne.n	8002a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a46:	e007      	b.n	8002a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3b10      	subs	r3, #16
 8002a74:	4a14      	ldr	r2, [pc, #80]	@ (8002ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7e:	4a13      	ldr	r2, [pc, #76]	@ (8002acc <DMA_CalcBaseAndBitshift+0x68>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d909      	bls.n	8002aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa4:	e007      	b.n	8002ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	aaaaaaab 	.word	0xaaaaaaab
 8002acc:	08006354 	.word	0x08006354

08002ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d856      	bhi.n	8002b9e <DMA_CheckFifoParam+0xce>
 8002af0:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <DMA_CheckFifoParam+0x28>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b1b 	.word	0x08002b1b
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b9f 	.word	0x08002b9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d046      	beq.n	8002ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e043      	b.n	8002ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b22:	d140      	bne.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e03d      	b.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b32:	d121      	bne.n	8002b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d837      	bhi.n	8002baa <DMA_CheckFifoParam+0xda>
 8002b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <DMA_CheckFifoParam+0x70>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b57 	.word	0x08002b57
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002b69 	.word	0x08002b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e030      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d025      	beq.n	8002bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e022      	b.n	8002bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b76:	e01c      	b.n	8002bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d903      	bls.n	8002b86 <DMA_CheckFifoParam+0xb6>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d003      	beq.n	8002b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b84:	e018      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8a:	e015      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e00b      	b.n	8002bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e00a      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e008      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e006      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e004      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e159      	b.n	8002e98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8148 	bne.w	8002e92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a2 	beq.w	8002e92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b57      	ldr	r3, [pc, #348]	@ (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	4a56      	ldr	r2, [pc, #344]	@ (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5e:	4b54      	ldr	r3, [pc, #336]	@ (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a52      	ldr	r2, [pc, #328]	@ (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	@ (8002eb8 <HAL_GPIO_Init+0x2f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x202>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	@ (8002ebc <HAL_GPIO_Init+0x2f4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fe>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a47      	ldr	r2, [pc, #284]	@ (8002ec0 <HAL_GPIO_Init+0x2f8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x1fa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a46      	ldr	r2, [pc, #280]	@ (8002ec4 <HAL_GPIO_Init+0x2fc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x1f6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a45      	ldr	r2, [pc, #276]	@ (8002ec8 <HAL_GPIO_Init+0x300>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x1f2>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	@ (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f aea2 	bls.w	8002be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f14:	887a      	ldrh	r2, [r7, #2]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	400b      	ands	r3, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fb90 	bl	800067c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e12b      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fa0a 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f001 f888 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a81      	ldr	r2, [pc, #516]	@ (80031dc <HAL_I2C_Init+0x274>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d807      	bhi.n	8002fec <HAL_I2C_Init+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a80      	ldr	r2, [pc, #512]	@ (80031e0 <HAL_I2C_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e006      	b.n	8002ffa <HAL_I2C_Init+0x92>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a7d      	ldr	r2, [pc, #500]	@ (80031e4 <HAL_I2C_Init+0x27c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e7      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a78      	ldr	r2, [pc, #480]	@ (80031e8 <HAL_I2C_Init+0x280>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a6a      	ldr	r2, [pc, #424]	@ (80031dc <HAL_I2C_Init+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d802      	bhi.n	800303c <HAL_I2C_Init+0xd4>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	e009      	b.n	8003050 <HAL_I2C_Init+0xe8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a69      	ldr	r2, [pc, #420]	@ (80031ec <HAL_I2C_Init+0x284>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003062:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	495c      	ldr	r1, [pc, #368]	@ (80031dc <HAL_I2C_Init+0x274>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d819      	bhi.n	80030a4 <HAL_I2C_Init+0x13c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fbb1 f3f3 	udiv	r3, r1, r3
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003084:	400b      	ands	r3, r1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_Init+0x138>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e59      	subs	r1, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	e051      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e04f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <HAL_I2C_Init+0x168>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e012      	b.n	80030f6 <HAL_I2C_Init+0x18e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x196>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_I2C_Init+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e58      	subs	r0, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	fbb0 f3f3 	udiv	r3, r0, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	0099      	lsls	r1, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003172:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6911      	ldr	r1, [r2, #16]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	003d08ff 	.word	0x003d08ff
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	817b      	strh	r3, [r7, #10]
 8003200:	4613      	mov	r3, r2
 8003202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7fe fb18 	bl	8001838 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	f040 80e0 	bne.w	80033d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	4970      	ldr	r1, [pc, #448]	@ (80033e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f964 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e0d3      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_I2C_Master_Transmit+0x50>
 800323c:	2302      	movs	r3, #2
 800323e:	e0cc      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d007      	beq.n	8003266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2221      	movs	r2, #33	@ 0x21
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2210      	movs	r2, #16
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	893a      	ldrh	r2, [r7, #8]
 8003296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f89c 	bl	80033ec <I2C_MasterRequestWrite>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e08d      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d4:	e066      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f9de 	bl	800369c <I2C_WaitOnTXEFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d11b      	bne.n	8003378 <HAL_I2C_Master_Transmit+0x188>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f9ce 	bl	800371e <I2C_WaitOnBTFFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d194      	bne.n	80032d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00100002 	.word	0x00100002
 80033e8:	ffff0000 	.word	0xffff0000

080033ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d006      	beq.n	8003416 <I2C_MasterRequestWrite+0x2a>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d003      	beq.n	8003416 <I2C_MasterRequestWrite+0x2a>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e00b      	b.n	8003440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	2b12      	cmp	r3, #18
 800342e:	d107      	bne.n	8003440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800343e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f84f 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003466:	d103      	bne.n	8003470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e035      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347c:	d108      	bne.n	8003490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e01b      	b.n	80034c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003490:	897b      	ldrh	r3, [r7, #10]
 8003492:	11db      	asrs	r3, r3, #7
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0306 	and.w	r3, r3, #6
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f063 030f 	orn	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	490e      	ldr	r1, [pc, #56]	@ (80034e8 <I2C_MasterRequestWrite+0xfc>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f875 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e010      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4907      	ldr	r1, [pc, #28]	@ (80034ec <I2C_MasterRequestWrite+0x100>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f865 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	00010008 	.word	0x00010008
 80034ec:	00010002 	.word	0x00010002

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e025      	b.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d021      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe f995 	bl	8001838 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d116      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e023      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10d      	bne.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	e00c      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b6      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ac:	e051      	b.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035bc:	d123      	bne.n	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f043 0204 	orr.w	r2, r3, #4
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e046      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe f913 	bl	8001838 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e020      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10c      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	e00b      	b.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d18d      	bne.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a8:	e02d      	b.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f878 	bl	80037a0 <I2C_IsAcknowledgeFailed>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e02d      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe f8b9 	bl	8001838 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d1ca      	bne.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800372a:	e02d      	b.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f837 	bl	80037a0 <I2C_IsAcknowledgeFailed>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e02d      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d021      	beq.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe f878 	bl	8001838 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d1ca      	bne.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b6:	d11b      	bne.n	80037f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e267      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381e:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00c      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	2b08      	cmp	r3, #8
 8003834:	d112      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b82      	ldr	r3, [pc, #520]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b7e      	ldr	r3, [pc, #504]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e242      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b76      	ldr	r3, [pc, #472]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a75      	ldr	r2, [pc, #468]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b70      	ldr	r3, [pc, #448]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6f      	ldr	r2, [pc, #444]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b69      	ldr	r3, [pc, #420]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a68      	ldr	r2, [pc, #416]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b66      	ldr	r3, [pc, #408]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd ffbe 	bl	8001838 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fd ffba 	bl	8001838 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e207      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd ffaa 	bl	8001838 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd ffa6 	bl	8001838 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e1f3      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	4b51      	ldr	r3, [pc, #324]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003916:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b44      	ldr	r3, [pc, #272]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d116      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e1c7      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4937      	ldr	r1, [pc, #220]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	e03a      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_OscConfig+0x244>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fd ff5f 	bl	8001838 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397e:	f7fd ff5b 	bl	8001838 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1a8      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4925      	ldr	r1, [pc, #148]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCC_OscConfig+0x244>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd ff3e 	bl	8001838 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fd ff3a 	bl	8001838 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e187      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d036      	beq.n	8003a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_RCC_OscConfig+0x248>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd ff1e 	bl	8001838 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fd ff1a 	bl	8001838 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e167      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
 8003a1e:	e01b      	b.n	8003a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x248>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fd ff07 	bl	8001838 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	e00e      	b.n	8003a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fd ff03 	bl	8001838 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d907      	bls.n	8003a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e150      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	42470000 	.word	0x42470000
 8003a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	4b88      	ldr	r3, [pc, #544]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ea      	bne.n	8003a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8097 	beq.w	8003b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b81      	ldr	r3, [pc, #516]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a86:	4b7a      	ldr	r3, [pc, #488]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4b77      	ldr	r3, [pc, #476]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d118      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa2:	4b74      	ldr	r3, [pc, #464]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a73      	ldr	r2, [pc, #460]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fd fec3 	bl	8001838 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fd febf 	bl	8001838 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e10c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x2ea>
 8003adc:	4b64      	ldr	r3, [pc, #400]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	4a63      	ldr	r2, [pc, #396]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCC_OscConfig+0x324>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x30c>
 8003af2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afe:	4b5c      	ldr	r3, [pc, #368]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a5b      	ldr	r2, [pc, #364]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0x324>
 8003b0c:	4b58      	ldr	r3, [pc, #352]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a57      	ldr	r2, [pc, #348]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a54      	ldr	r2, [pc, #336]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0304 	bic.w	r3, r3, #4
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd fe84 	bl	8001838 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fd fe80 	bl	8001838 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0cb      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	4b49      	ldr	r3, [pc, #292]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ee      	beq.n	8003b34 <HAL_RCC_OscConfig+0x334>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fd fe6e 	bl	8001838 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b60:	f7fd fe6a 	bl	8001838 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0b5      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b76:	4b3e      	ldr	r3, [pc, #248]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ee      	bne.n	8003b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b88:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	4a38      	ldr	r2, [pc, #224]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a1 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d05c      	beq.n	8003c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d141      	bne.n	8003c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fe3e 	bl	8001838 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd fe3a 	bl	8001838 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e087      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	019b      	lsls	r3, r3, #6
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	491b      	ldr	r1, [pc, #108]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fe13 	bl	8001838 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd fe0f 	bl	8001838 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e05c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x416>
 8003c34:	e054      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fdfc 	bl	8001838 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fd fdf8 	bl	8001838 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e045      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x444>
 8003c62:	e03d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e038      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x4ec>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d028      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d121      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d11a      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d111      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fd fd2a 	bl	8001838 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fd fd26 	bl	8001838 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fc8a 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800633c 	.word	0x0800633c
 8003eb4:	20000004 	.word	0x20000004
 8003eb8:	20000008 	.word	0x20000008

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b094      	sub	sp, #80	@ 0x50
 8003ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ecc:	2300      	movs	r3, #0
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed4:	4b79      	ldr	r3, [pc, #484]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d00d      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x40>
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	f200 80e1 	bhi.w	80040a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eee:	e0db      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b73      	ldr	r3, [pc, #460]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ef4:	e0db      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef6:	4b73      	ldr	r3, [pc, #460]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efa:	e0d8      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efc:	4b6f      	ldr	r3, [pc, #444]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f06:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d063      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f26:	2300      	movs	r3, #0
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f40:	0150      	lsls	r0, r2, #5
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4621      	mov	r1, r4
 8003f48:	1a51      	subs	r1, r2, r1
 8003f4a:	6139      	str	r1, [r7, #16]
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f60:	4659      	mov	r1, fp
 8003f62:	018b      	lsls	r3, r1, #6
 8003f64:	4651      	mov	r1, sl
 8003f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	018a      	lsls	r2, r1, #6
 8003f6e:	4651      	mov	r1, sl
 8003f70:	ebb2 0801 	subs.w	r8, r2, r1
 8003f74:	4659      	mov	r1, fp
 8003f76:	eb63 0901 	sbc.w	r9, r3, r1
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8e:	4690      	mov	r8, r2
 8003f90:	4699      	mov	r9, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	eb18 0303 	adds.w	r3, r8, r3
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	eb49 0303 	adc.w	r3, r9, r3
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	024b      	lsls	r3, r1, #9
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb8:	4621      	mov	r1, r4
 8003fba:	024a      	lsls	r2, r1, #9
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fcc:	f7fc f960 	bl	8000290 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd8:	e058      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	0159      	lsls	r1, r3, #5
 8004002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004006:	0150      	lsls	r0, r2, #5
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4641      	mov	r1, r8
 800400e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004012:	4649      	mov	r1, r9
 8004014:	eb63 0b01 	sbc.w	fp, r3, r1
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800402c:	ebb2 040a 	subs.w	r4, r2, sl
 8004030:	eb63 050b 	sbc.w	r5, r3, fp
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	00eb      	lsls	r3, r5, #3
 800403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004042:	00e2      	lsls	r2, r4, #3
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4643      	mov	r3, r8
 800404a:	18e3      	adds	r3, r4, r3
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	464b      	mov	r3, r9
 8004050:	eb45 0303 	adc.w	r3, r5, r3
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004062:	4629      	mov	r1, r5
 8004064:	028b      	lsls	r3, r1, #10
 8004066:	4621      	mov	r1, r4
 8004068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800406c:	4621      	mov	r1, r4
 800406e:	028a      	lsls	r2, r1, #10
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	61fa      	str	r2, [r7, #28]
 800407c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004080:	f7fc f906 	bl	8000290 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800409c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800409e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3750      	adds	r7, #80	@ 0x50
 80040b4:	46bd      	mov	sp, r7
 80040b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200

080040c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000004 	.word	0x20000004

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a9b      	lsrs	r3, r3, #10
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	@ (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	0800634c 	.word	0x0800634c

08004108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800410c:	f7ff ffdc 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0b5b      	lsrs	r3, r3, #13
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	@ (800412c <HAL_RCC_GetPCLK2Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	0800634c 	.word	0x0800634c

08004130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e041      	b.n	80041c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd f96e 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f000 fcae 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e044      	b.n	8004272 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1e      	ldr	r2, [pc, #120]	@ (8004280 <HAL_TIM_Base_Start_IT+0xb0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004212:	d013      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_TIM_Base_Start_IT+0xb4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <HAL_TIM_Base_Start_IT+0xb8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_TIM_Base_Start_IT+0xbc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a16      	ldr	r2, [pc, #88]	@ (8004290 <HAL_TIM_Base_Start_IT+0xc0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d111      	bne.n	8004260 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b06      	cmp	r3, #6
 800424c:	d010      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425e:	e007      	b.n	8004270 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40010000 	.word	0x40010000
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40000c00 	.word	0x40000c00
 8004290:	40014000 	.word	0x40014000

08004294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e041      	b.n	800432a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd f8e2 	bl	8001484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 fbfc 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x24>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e022      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start+0x3e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e015      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x58>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e008      	b.n	800439e <HAL_TIM_PWM_Start+0x6a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e068      	b.n	8004478 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x82>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	e013      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x92>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c4:	e00b      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xa2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d4:	e003      	b.n	80043de <HAL_TIM_PWM_Start+0xaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2201      	movs	r2, #1
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fe18 	bl	800501c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <HAL_TIM_PWM_Start+0x14c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d107      	bne.n	8004406 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <HAL_TIM_PWM_Start+0x14c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d013      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a19      	ldr	r2, [pc, #100]	@ (8004484 <HAL_TIM_PWM_Start+0x150>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	@ (8004488 <HAL_TIM_PWM_Start+0x154>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a16      	ldr	r2, [pc, #88]	@ (800448c <HAL_TIM_PWM_Start+0x158>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_PWM_Start+0x10e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <HAL_TIM_PWM_Start+0x15c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d010      	beq.n	8004476 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	e007      	b.n	8004476 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000

08004494 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fdb8 	bl	800501c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a29      	ldr	r2, [pc, #164]	@ (8004558 <HAL_TIM_PWM_Stop+0xc4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d117      	bne.n	80044e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_TIM_PWM_Stop+0x52>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_PWM_Stop+0x52>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <HAL_TIM_PWM_Stop+0x82>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_TIM_PWM_Stop+0x82>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Stop+0x92>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Stop+0xba>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Stop+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Stop+0xba>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Stop+0xb2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Stop+0xba>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40010000 	.word	0x40010000

0800455c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0202 	mvn.w	r2, #2
 8004588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fa77 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa69 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fa7a 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0204 	mvn.w	r2, #4
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa4d 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa3f 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa50 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d122      	bne.n	8004660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b08      	cmp	r3, #8
 8004626:	d11b      	bne.n	8004660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0208 	mvn.w	r2, #8
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2204      	movs	r2, #4
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fa23 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa15 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa26 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b10      	cmp	r3, #16
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0210 	mvn.w	r2, #16
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2208      	movs	r2, #8
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9f9 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9eb 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f9fc 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0201 	mvn.w	r2, #1
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fb fffe 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ea:	2b80      	cmp	r3, #128	@ 0x80
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f8:	2b80      	cmp	r3, #128	@ 0x80
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fd26 	bl	8005158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9c1 	bl	8004aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b20      	cmp	r3, #32
 8004744:	d10e      	bne.n	8004764 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d107      	bne.n	8004764 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0220 	mvn.w	r2, #32
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fcf0 	bl	8005144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e0ae      	b.n	80048e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	f200 809f 	bhi.w	80048d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080048d9 	.word	0x080048d9
 80047a8:	080048d9 	.word	0x080048d9
 80047ac:	080048d9 	.word	0x080048d9
 80047b0:	08004815 	.word	0x08004815
 80047b4:	080048d9 	.word	0x080048d9
 80047b8:	080048d9 	.word	0x080048d9
 80047bc:	080048d9 	.word	0x080048d9
 80047c0:	08004857 	.word	0x08004857
 80047c4:	080048d9 	.word	0x080048d9
 80047c8:	080048d9 	.word	0x080048d9
 80047cc:	080048d9 	.word	0x080048d9
 80047d0:	08004897 	.word	0x08004897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f9f8 	bl	8004bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
      break;
 8004812:	e064      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa3e 	bl	8004c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	021a      	lsls	r2, r3, #8
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	619a      	str	r2, [r3, #24]
      break;
 8004854:	e043      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa89 	bl	8004d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      break;
 8004894:	e023      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fad3 	bl	8004e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
      break;
 80048d6:	e002      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
      break;
 80048dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e0b4      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x186>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004944:	d03e      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494a:	f200 8087 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004952:	f000 8086 	beq.w	8004a62 <HAL_TIM_ConfigClockSource+0x172>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495a:	d87f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d01a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xa6>
 8004960:	2b70      	cmp	r3, #112	@ 0x70
 8004962:	d87b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b60      	cmp	r3, #96	@ 0x60
 8004966:	d050      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x11a>
 8004968:	2b60      	cmp	r3, #96	@ 0x60
 800496a:	d877      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b50      	cmp	r3, #80	@ 0x50
 800496e:	d03c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xfa>
 8004970:	2b50      	cmp	r3, #80	@ 0x50
 8004972:	d873      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d058      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x13a>
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d86f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d064      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d86b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d060      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d867      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d05a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	e062      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f000 fb19 	bl	8004fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e04f      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f000 fb02 	bl	8004fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e03c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fa76 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2150      	movs	r1, #80	@ 0x50
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 facf 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a08:	e02c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fa95 	bl	8004f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2160      	movs	r1, #96	@ 0x60
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fabf 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a28:	e01c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fa56 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2140      	movs	r1, #64	@ 0x40
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 faaf 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 faa6 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <TIM_Base_SetConfig+0xe4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aee:	d00b      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a31      	ldr	r2, [pc, #196]	@ (8004bb8 <TIM_Base_SetConfig+0xe8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a30      	ldr	r2, [pc, #192]	@ (8004bbc <TIM_Base_SetConfig+0xec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a25      	ldr	r2, [pc, #148]	@ (8004bb4 <TIM_Base_SetConfig+0xe4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b28:	d017      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	@ (8004bb8 <TIM_Base_SetConfig+0xe8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a21      	ldr	r2, [pc, #132]	@ (8004bbc <TIM_Base_SetConfig+0xec>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <TIM_Base_SetConfig+0xf0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc4 <TIM_Base_SetConfig+0xf4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <TIM_Base_SetConfig+0xf8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <TIM_Base_SetConfig+0xfc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a08      	ldr	r2, [pc, #32]	@ (8004bb4 <TIM_Base_SetConfig+0xe4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d103      	bne.n	8004ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	615a      	str	r2, [r3, #20]
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800

08004bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f023 0302 	bic.w	r3, r3, #2
 8004c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <TIM_OC1_SetConfig+0xc8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10c      	bne.n	8004c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0308 	bic.w	r3, r3, #8
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 0304 	bic.w	r3, r3, #4
 8004c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a13      	ldr	r2, [pc, #76]	@ (8004c98 <TIM_OC1_SetConfig+0xc8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d111      	bne.n	8004c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40010000 	.word	0x40010000

08004c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f023 0210 	bic.w	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0320 	bic.w	r3, r3, #32
 8004ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <TIM_OC2_SetConfig+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10d      	bne.n	8004d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	@ (8004d70 <TIM_OC2_SetConfig+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d113      	bne.n	8004d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000

08004d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <TIM_OC3_SetConfig+0xd0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <TIM_OC3_SetConfig+0xd0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d113      	bne.n	8004e1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40010000 	.word	0x40010000

08004e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	031b      	lsls	r3, r3, #12
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a10      	ldr	r2, [pc, #64]	@ (8004ee4 <TIM_OC4_SetConfig+0x9c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f043 0307 	orr.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4313      	orrs	r3, r2
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	2201      	movs	r2, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800507c:	2302      	movs	r3, #2
 800507e:	e050      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d013      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a18      	ldr	r2, [pc, #96]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40014000 	.word	0x40014000

08005144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e03f      	b.n	80051fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc f9d2 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	@ 0x24
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f929 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08a      	sub	sp, #40	@ 0x28
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b20      	cmp	r3, #32
 8005224:	d17c      	bne.n	8005320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_UART_Transmit+0x2c>
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e075      	b.n	8005322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_UART_Transmit+0x3e>
 8005240:	2302      	movs	r3, #2
 8005242:	e06e      	b.n	8005322 <HAL_UART_Transmit+0x11c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2221      	movs	r2, #33	@ 0x21
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fc faed 	bl	8001838 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005274:	d108      	bne.n	8005288 <HAL_UART_Transmit+0x82>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	e003      	b.n	8005290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005298:	e02a      	b.n	80052f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	@ 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f840 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e036      	b.n	8005322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	3302      	adds	r3, #2
 80052ce:	61bb      	str	r3, [r7, #24]
 80052d0:	e007      	b.n	80052e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1cf      	bne.n	800529a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	2140      	movs	r1, #64	@ 0x40
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f810 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e006      	b.n	8005322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b090      	sub	sp, #64	@ 0x40
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	e050      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d04c      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <UART_WaitOnFlagUntilTimeout+0x30>
 800534a:	f7fc fa75 	bl	8001838 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005356:	429a      	cmp	r2, r3
 8005358:	d241      	bcs.n	80053de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800537a:	637a      	str	r2, [r7, #52]	@ 0x34
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053ae:	623a      	str	r2, [r7, #32]
 80053b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	69f9      	ldr	r1, [r7, #28]
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e00f      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d09f      	beq.n	800533c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3740      	adds	r7, #64	@ 0x40
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b0c0      	sub	sp, #256	@ 0x100
 800540e:	af00      	add	r7, sp, #0
 8005410:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	ea40 0301 	orr.w	r3, r0, r1
 8005430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	431a      	orrs	r2, r3
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005460:	f021 010c 	bic.w	r1, r1, #12
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800546e:	430b      	orrs	r3, r1
 8005470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	ea40 0301 	orr.w	r3, r0, r1
 800548e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b8f      	ldr	r3, [pc, #572]	@ (80056d4 <UART_SetConfig+0x2cc>)
 8005498:	429a      	cmp	r2, r3
 800549a:	d005      	beq.n	80054a8 <UART_SetConfig+0xa0>
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b8d      	ldr	r3, [pc, #564]	@ (80056d8 <UART_SetConfig+0x2d0>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d104      	bne.n	80054b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe fe2e 	bl	8004108 <HAL_RCC_GetPCLK2Freq>
 80054ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054b0:	e003      	b.n	80054ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7fe fe15 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 80054b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c4:	f040 810c 	bne.w	80056e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	1891      	adds	r1, r2, r2
 80054e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054e2:	415b      	adcs	r3, r3
 80054e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054ea:	4621      	mov	r1, r4
 80054ec:	eb12 0801 	adds.w	r8, r2, r1
 80054f0:	4629      	mov	r1, r5
 80054f2:	eb43 0901 	adc.w	r9, r3, r1
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550a:	4690      	mov	r8, r2
 800550c:	4699      	mov	r9, r3
 800550e:	4623      	mov	r3, r4
 8005510:	eb18 0303 	adds.w	r3, r8, r3
 8005514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005518:	462b      	mov	r3, r5
 800551a:	eb49 0303 	adc.w	r3, r9, r3
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800552e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005536:	460b      	mov	r3, r1
 8005538:	18db      	adds	r3, r3, r3
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50
 800553c:	4613      	mov	r3, r2
 800553e:	eb42 0303 	adc.w	r3, r2, r3
 8005542:	657b      	str	r3, [r7, #84]	@ 0x54
 8005544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800554c:	f7fa fea0 	bl	8000290 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b61      	ldr	r3, [pc, #388]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005568:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800556c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005578:	415b      	adcs	r3, r3
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005580:	4641      	mov	r1, r8
 8005582:	eb12 0a01 	adds.w	sl, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb43 0b01 	adc.w	fp, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800559c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a0:	4692      	mov	sl, r2
 80055a2:	469b      	mov	fp, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	eb1a 0303 	adds.w	r3, sl, r3
 80055aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ae:	464b      	mov	r3, r9
 80055b0:	eb4b 0303 	adc.w	r3, fp, r3
 80055b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055cc:	460b      	mov	r3, r1
 80055ce:	18db      	adds	r3, r3, r3
 80055d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d2:	4613      	mov	r3, r2
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055e2:	f7fa fe55 	bl	8000290 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <UART_SetConfig+0x2d4>)
 80055ee:	fba3 2301 	umull	r2, r3, r3, r1
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2264      	movs	r2, #100	@ 0x64
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	1acb      	subs	r3, r1, r3
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005604:	fba3 2302 	umull	r2, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005610:	441c      	add	r4, r3
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800561c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800562c:	415b      	adcs	r3, r3
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6339      	str	r1, [r7, #48]	@ 0x30
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005668:	464b      	mov	r3, r9
 800566a:	460a      	mov	r2, r1
 800566c:	eb42 0303 	adc.w	r3, r2, r3
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005680:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005688:	460b      	mov	r3, r1
 800568a:	18db      	adds	r3, r3, r3
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568e:	4613      	mov	r3, r2
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800569a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800569e:	f7fa fdf7 	bl	8000290 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056a8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	2164      	movs	r1, #100	@ 0x64
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 0207 	and.w	r2, r3, #7
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4422      	add	r2, r4
 80056ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d0:	e106      	b.n	80058e0 <UART_SetConfig+0x4d8>
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056f2:	4642      	mov	r2, r8
 80056f4:	464b      	mov	r3, r9
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	6239      	str	r1, [r7, #32]
 80056fa:	415b      	adcs	r3, r3
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005702:	4641      	mov	r1, r8
 8005704:	1854      	adds	r4, r2, r1
 8005706:	4649      	mov	r1, r9
 8005708:	eb43 0501 	adc.w	r5, r3, r1
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	00eb      	lsls	r3, r5, #3
 8005716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4643      	mov	r3, r8
 8005722:	18e3      	adds	r3, r4, r3
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005728:	464b      	mov	r3, r9
 800572a:	eb45 0303 	adc.w	r3, r5, r3
 800572e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800573e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800574e:	4629      	mov	r1, r5
 8005750:	008b      	lsls	r3, r1, #2
 8005752:	4621      	mov	r1, r4
 8005754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005758:	4621      	mov	r1, r4
 800575a:	008a      	lsls	r2, r1, #2
 800575c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005760:	f7fa fd96 	bl	8000290 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4b60      	ldr	r3, [pc, #384]	@ (80058ec <UART_SetConfig+0x4e4>)
 800576a:	fba3 2302 	umull	r2, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	011c      	lsls	r4, r3, #4
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800577c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	61b9      	str	r1, [r7, #24]
 800578c:	415b      	adcs	r3, r3
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6139      	str	r1, [r7, #16]
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057ec:	4649      	mov	r1, r9
 80057ee:	008b      	lsls	r3, r1, #2
 80057f0:	4641      	mov	r1, r8
 80057f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f6:	4641      	mov	r1, r8
 80057f8:	008a      	lsls	r2, r1, #2
 80057fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057fe:	f7fa fd47 	bl	8000290 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4611      	mov	r1, r2
 8005808:	4b38      	ldr	r3, [pc, #224]	@ (80058ec <UART_SetConfig+0x4e4>)
 800580a:	fba3 2301 	umull	r2, r3, r3, r1
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2264      	movs	r2, #100	@ 0x64
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	1acb      	subs	r3, r1, r3
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	3332      	adds	r3, #50	@ 0x32
 800581c:	4a33      	ldr	r2, [pc, #204]	@ (80058ec <UART_SetConfig+0x4e4>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005828:	441c      	add	r4, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	673b      	str	r3, [r7, #112]	@ 0x70
 8005832:	677a      	str	r2, [r7, #116]	@ 0x74
 8005834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	415b      	adcs	r3, r3
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005848:	4641      	mov	r1, r8
 800584a:	1851      	adds	r1, r2, r1
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	4649      	mov	r1, r9
 8005850:	414b      	adcs	r3, r1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005860:	4659      	mov	r1, fp
 8005862:	00cb      	lsls	r3, r1, #3
 8005864:	4651      	mov	r1, sl
 8005866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586a:	4651      	mov	r1, sl
 800586c:	00ca      	lsls	r2, r1, #3
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	4603      	mov	r3, r0
 8005874:	4642      	mov	r2, r8
 8005876:	189b      	adds	r3, r3, r2
 8005878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800587a:	464b      	mov	r3, r9
 800587c:	460a      	mov	r2, r1
 800587e:	eb42 0303 	adc.w	r3, r2, r3
 8005882:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	663b      	str	r3, [r7, #96]	@ 0x60
 800588e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ae:	f7fa fcef 	bl	8000290 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	@ 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	3332      	adds	r3, #50	@ 0x32
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4422      	add	r2, r4
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058e6:	46bd      	mov	sp, r7
 80058e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ec:	51eb851f 	.word	0x51eb851f

080058f0 <siprintf>:
 80058f0:	b40e      	push	{r1, r2, r3}
 80058f2:	b510      	push	{r4, lr}
 80058f4:	b09d      	sub	sp, #116	@ 0x74
 80058f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80058f8:	9002      	str	r0, [sp, #8]
 80058fa:	9006      	str	r0, [sp, #24]
 80058fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005900:	480a      	ldr	r0, [pc, #40]	@ (800592c <siprintf+0x3c>)
 8005902:	9107      	str	r1, [sp, #28]
 8005904:	9104      	str	r1, [sp, #16]
 8005906:	490a      	ldr	r1, [pc, #40]	@ (8005930 <siprintf+0x40>)
 8005908:	f853 2b04 	ldr.w	r2, [r3], #4
 800590c:	9105      	str	r1, [sp, #20]
 800590e:	2400      	movs	r4, #0
 8005910:	a902      	add	r1, sp, #8
 8005912:	6800      	ldr	r0, [r0, #0]
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005918:	f000 f994 	bl	8005c44 <_svfiprintf_r>
 800591c:	9b02      	ldr	r3, [sp, #8]
 800591e:	701c      	strb	r4, [r3, #0]
 8005920:	b01d      	add	sp, #116	@ 0x74
 8005922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005926:	b003      	add	sp, #12
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000010 	.word	0x20000010
 8005930:	ffff0208 	.word	0xffff0208

08005934 <memset>:
 8005934:	4402      	add	r2, r0
 8005936:	4603      	mov	r3, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <__errno>:
 8005944:	4b01      	ldr	r3, [pc, #4]	@ (800594c <__errno+0x8>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000010 	.word	0x20000010

08005950 <__libc_init_array>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4d0d      	ldr	r5, [pc, #52]	@ (8005988 <__libc_init_array+0x38>)
 8005954:	4c0d      	ldr	r4, [pc, #52]	@ (800598c <__libc_init_array+0x3c>)
 8005956:	1b64      	subs	r4, r4, r5
 8005958:	10a4      	asrs	r4, r4, #2
 800595a:	2600      	movs	r6, #0
 800595c:	42a6      	cmp	r6, r4
 800595e:	d109      	bne.n	8005974 <__libc_init_array+0x24>
 8005960:	4d0b      	ldr	r5, [pc, #44]	@ (8005990 <__libc_init_array+0x40>)
 8005962:	4c0c      	ldr	r4, [pc, #48]	@ (8005994 <__libc_init_array+0x44>)
 8005964:	f000 fc64 	bl	8006230 <_init>
 8005968:	1b64      	subs	r4, r4, r5
 800596a:	10a4      	asrs	r4, r4, #2
 800596c:	2600      	movs	r6, #0
 800596e:	42a6      	cmp	r6, r4
 8005970:	d105      	bne.n	800597e <__libc_init_array+0x2e>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	f855 3b04 	ldr.w	r3, [r5], #4
 8005978:	4798      	blx	r3
 800597a:	3601      	adds	r6, #1
 800597c:	e7ee      	b.n	800595c <__libc_init_array+0xc>
 800597e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005982:	4798      	blx	r3
 8005984:	3601      	adds	r6, #1
 8005986:	e7f2      	b.n	800596e <__libc_init_array+0x1e>
 8005988:	08006398 	.word	0x08006398
 800598c:	08006398 	.word	0x08006398
 8005990:	08006398 	.word	0x08006398
 8005994:	0800639c 	.word	0x0800639c

08005998 <__retarget_lock_acquire_recursive>:
 8005998:	4770      	bx	lr

0800599a <__retarget_lock_release_recursive>:
 800599a:	4770      	bx	lr

0800599c <_free_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4605      	mov	r5, r0
 80059a0:	2900      	cmp	r1, #0
 80059a2:	d041      	beq.n	8005a28 <_free_r+0x8c>
 80059a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a8:	1f0c      	subs	r4, r1, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfb8      	it	lt
 80059ae:	18e4      	addlt	r4, r4, r3
 80059b0:	f000 f8e0 	bl	8005b74 <__malloc_lock>
 80059b4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <_free_r+0x90>)
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	b933      	cbnz	r3, 80059c8 <_free_r+0x2c>
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	6014      	str	r4, [r2, #0]
 80059be:	4628      	mov	r0, r5
 80059c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059c4:	f000 b8dc 	b.w	8005b80 <__malloc_unlock>
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	d908      	bls.n	80059de <_free_r+0x42>
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	1821      	adds	r1, r4, r0
 80059d0:	428b      	cmp	r3, r1
 80059d2:	bf01      	itttt	eq
 80059d4:	6819      	ldreq	r1, [r3, #0]
 80059d6:	685b      	ldreq	r3, [r3, #4]
 80059d8:	1809      	addeq	r1, r1, r0
 80059da:	6021      	streq	r1, [r4, #0]
 80059dc:	e7ed      	b.n	80059ba <_free_r+0x1e>
 80059de:	461a      	mov	r2, r3
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b10b      	cbz	r3, 80059e8 <_free_r+0x4c>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d9fa      	bls.n	80059de <_free_r+0x42>
 80059e8:	6811      	ldr	r1, [r2, #0]
 80059ea:	1850      	adds	r0, r2, r1
 80059ec:	42a0      	cmp	r0, r4
 80059ee:	d10b      	bne.n	8005a08 <_free_r+0x6c>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	4401      	add	r1, r0
 80059f4:	1850      	adds	r0, r2, r1
 80059f6:	4283      	cmp	r3, r0
 80059f8:	6011      	str	r1, [r2, #0]
 80059fa:	d1e0      	bne.n	80059be <_free_r+0x22>
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	6053      	str	r3, [r2, #4]
 8005a02:	4408      	add	r0, r1
 8005a04:	6010      	str	r0, [r2, #0]
 8005a06:	e7da      	b.n	80059be <_free_r+0x22>
 8005a08:	d902      	bls.n	8005a10 <_free_r+0x74>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	e7d6      	b.n	80059be <_free_r+0x22>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf04      	itt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	bf04      	itt	eq
 8005a20:	1809      	addeq	r1, r1, r0
 8005a22:	6021      	streq	r1, [r4, #0]
 8005a24:	6054      	str	r4, [r2, #4]
 8005a26:	e7ca      	b.n	80059be <_free_r+0x22>
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200003dc 	.word	0x200003dc

08005a30 <sbrk_aligned>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4e0f      	ldr	r6, [pc, #60]	@ (8005a70 <sbrk_aligned+0x40>)
 8005a34:	460c      	mov	r4, r1
 8005a36:	6831      	ldr	r1, [r6, #0]
 8005a38:	4605      	mov	r5, r0
 8005a3a:	b911      	cbnz	r1, 8005a42 <sbrk_aligned+0x12>
 8005a3c:	f000 fba4 	bl	8006188 <_sbrk_r>
 8005a40:	6030      	str	r0, [r6, #0]
 8005a42:	4621      	mov	r1, r4
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 fb9f 	bl	8006188 <_sbrk_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d103      	bne.n	8005a56 <sbrk_aligned+0x26>
 8005a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8005a52:	4620      	mov	r0, r4
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
 8005a56:	1cc4      	adds	r4, r0, #3
 8005a58:	f024 0403 	bic.w	r4, r4, #3
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d0f8      	beq.n	8005a52 <sbrk_aligned+0x22>
 8005a60:	1a21      	subs	r1, r4, r0
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 fb90 	bl	8006188 <_sbrk_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d1f2      	bne.n	8005a52 <sbrk_aligned+0x22>
 8005a6c:	e7ef      	b.n	8005a4e <sbrk_aligned+0x1e>
 8005a6e:	bf00      	nop
 8005a70:	200003d8 	.word	0x200003d8

08005a74 <_malloc_r>:
 8005a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	1ccd      	adds	r5, r1, #3
 8005a7a:	f025 0503 	bic.w	r5, r5, #3
 8005a7e:	3508      	adds	r5, #8
 8005a80:	2d0c      	cmp	r5, #12
 8005a82:	bf38      	it	cc
 8005a84:	250c      	movcc	r5, #12
 8005a86:	2d00      	cmp	r5, #0
 8005a88:	4606      	mov	r6, r0
 8005a8a:	db01      	blt.n	8005a90 <_malloc_r+0x1c>
 8005a8c:	42a9      	cmp	r1, r5
 8005a8e:	d904      	bls.n	8005a9a <_malloc_r+0x26>
 8005a90:	230c      	movs	r3, #12
 8005a92:	6033      	str	r3, [r6, #0]
 8005a94:	2000      	movs	r0, #0
 8005a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b70 <_malloc_r+0xfc>
 8005a9e:	f000 f869 	bl	8005b74 <__malloc_lock>
 8005aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa6:	461c      	mov	r4, r3
 8005aa8:	bb44      	cbnz	r4, 8005afc <_malloc_r+0x88>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff ffbf 	bl	8005a30 <sbrk_aligned>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	d158      	bne.n	8005b6a <_malloc_r+0xf6>
 8005ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8005abc:	4627      	mov	r7, r4
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d143      	bne.n	8005b4a <_malloc_r+0xd6>
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	d04b      	beq.n	8005b5e <_malloc_r+0xea>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	4639      	mov	r1, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	eb04 0903 	add.w	r9, r4, r3
 8005ad0:	f000 fb5a 	bl	8006188 <_sbrk_r>
 8005ad4:	4581      	cmp	r9, r0
 8005ad6:	d142      	bne.n	8005b5e <_malloc_r+0xea>
 8005ad8:	6821      	ldr	r1, [r4, #0]
 8005ada:	1a6d      	subs	r5, r5, r1
 8005adc:	4629      	mov	r1, r5
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7ff ffa6 	bl	8005a30 <sbrk_aligned>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d03a      	beq.n	8005b5e <_malloc_r+0xea>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	442b      	add	r3, r5
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	f8d8 3000 	ldr.w	r3, [r8]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	bb62      	cbnz	r2, 8005b50 <_malloc_r+0xdc>
 8005af6:	f8c8 7000 	str.w	r7, [r8]
 8005afa:	e00f      	b.n	8005b1c <_malloc_r+0xa8>
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	1b52      	subs	r2, r2, r5
 8005b00:	d420      	bmi.n	8005b44 <_malloc_r+0xd0>
 8005b02:	2a0b      	cmp	r2, #11
 8005b04:	d917      	bls.n	8005b36 <_malloc_r+0xc2>
 8005b06:	1961      	adds	r1, r4, r5
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	6025      	str	r5, [r4, #0]
 8005b0c:	bf18      	it	ne
 8005b0e:	6059      	strne	r1, [r3, #4]
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	bf08      	it	eq
 8005b14:	f8c8 1000 	streq.w	r1, [r8]
 8005b18:	5162      	str	r2, [r4, r5]
 8005b1a:	604b      	str	r3, [r1, #4]
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f82f 	bl	8005b80 <__malloc_unlock>
 8005b22:	f104 000b 	add.w	r0, r4, #11
 8005b26:	1d23      	adds	r3, r4, #4
 8005b28:	f020 0007 	bic.w	r0, r0, #7
 8005b2c:	1ac2      	subs	r2, r0, r3
 8005b2e:	bf1c      	itt	ne
 8005b30:	1a1b      	subne	r3, r3, r0
 8005b32:	50a3      	strne	r3, [r4, r2]
 8005b34:	e7af      	b.n	8005a96 <_malloc_r+0x22>
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	bf0c      	ite	eq
 8005b3c:	f8c8 2000 	streq.w	r2, [r8]
 8005b40:	605a      	strne	r2, [r3, #4]
 8005b42:	e7eb      	b.n	8005b1c <_malloc_r+0xa8>
 8005b44:	4623      	mov	r3, r4
 8005b46:	6864      	ldr	r4, [r4, #4]
 8005b48:	e7ae      	b.n	8005aa8 <_malloc_r+0x34>
 8005b4a:	463c      	mov	r4, r7
 8005b4c:	687f      	ldr	r7, [r7, #4]
 8005b4e:	e7b6      	b.n	8005abe <_malloc_r+0x4a>
 8005b50:	461a      	mov	r2, r3
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d1fb      	bne.n	8005b50 <_malloc_r+0xdc>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6053      	str	r3, [r2, #4]
 8005b5c:	e7de      	b.n	8005b1c <_malloc_r+0xa8>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 f80c 	bl	8005b80 <__malloc_unlock>
 8005b68:	e794      	b.n	8005a94 <_malloc_r+0x20>
 8005b6a:	6005      	str	r5, [r0, #0]
 8005b6c:	e7d6      	b.n	8005b1c <_malloc_r+0xa8>
 8005b6e:	bf00      	nop
 8005b70:	200003dc 	.word	0x200003dc

08005b74 <__malloc_lock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	@ (8005b7c <__malloc_lock+0x8>)
 8005b76:	f7ff bf0f 	b.w	8005998 <__retarget_lock_acquire_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200003d4 	.word	0x200003d4

08005b80 <__malloc_unlock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	@ (8005b88 <__malloc_unlock+0x8>)
 8005b82:	f7ff bf0a 	b.w	800599a <__retarget_lock_release_recursive>
 8005b86:	bf00      	nop
 8005b88:	200003d4 	.word	0x200003d4

08005b8c <__ssputs_r>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	688e      	ldr	r6, [r1, #8]
 8005b92:	461f      	mov	r7, r3
 8005b94:	42be      	cmp	r6, r7
 8005b96:	680b      	ldr	r3, [r1, #0]
 8005b98:	4682      	mov	sl, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	d82d      	bhi.n	8005bfc <__ssputs_r+0x70>
 8005ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ba8:	d026      	beq.n	8005bf8 <__ssputs_r+0x6c>
 8005baa:	6965      	ldr	r5, [r4, #20]
 8005bac:	6909      	ldr	r1, [r1, #16]
 8005bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bb2:	eba3 0901 	sub.w	r9, r3, r1
 8005bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bba:	1c7b      	adds	r3, r7, #1
 8005bbc:	444b      	add	r3, r9
 8005bbe:	106d      	asrs	r5, r5, #1
 8005bc0:	429d      	cmp	r5, r3
 8005bc2:	bf38      	it	cc
 8005bc4:	461d      	movcc	r5, r3
 8005bc6:	0553      	lsls	r3, r2, #21
 8005bc8:	d527      	bpl.n	8005c1a <__ssputs_r+0x8e>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7ff ff52 	bl	8005a74 <_malloc_r>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	b360      	cbz	r0, 8005c2e <__ssputs_r+0xa2>
 8005bd4:	6921      	ldr	r1, [r4, #16]
 8005bd6:	464a      	mov	r2, r9
 8005bd8:	f000 fae6 	bl	80061a8 <memcpy>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	6126      	str	r6, [r4, #16]
 8005bea:	6165      	str	r5, [r4, #20]
 8005bec:	444e      	add	r6, r9
 8005bee:	eba5 0509 	sub.w	r5, r5, r9
 8005bf2:	6026      	str	r6, [r4, #0]
 8005bf4:	60a5      	str	r5, [r4, #8]
 8005bf6:	463e      	mov	r6, r7
 8005bf8:	42be      	cmp	r6, r7
 8005bfa:	d900      	bls.n	8005bfe <__ssputs_r+0x72>
 8005bfc:	463e      	mov	r6, r7
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	4632      	mov	r2, r6
 8005c02:	4641      	mov	r1, r8
 8005c04:	f000 faa6 	bl	8006154 <memmove>
 8005c08:	68a3      	ldr	r3, [r4, #8]
 8005c0a:	1b9b      	subs	r3, r3, r6
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	4433      	add	r3, r6
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	2000      	movs	r0, #0
 8005c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	f000 fad2 	bl	80061c4 <_realloc_r>
 8005c20:	4606      	mov	r6, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d1e0      	bne.n	8005be8 <__ssputs_r+0x5c>
 8005c26:	6921      	ldr	r1, [r4, #16]
 8005c28:	4650      	mov	r0, sl
 8005c2a:	f7ff feb7 	bl	800599c <_free_r>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	f8ca 3000 	str.w	r3, [sl]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	e7e9      	b.n	8005c16 <__ssputs_r+0x8a>
	...

08005c44 <_svfiprintf_r>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4698      	mov	r8, r3
 8005c4a:	898b      	ldrh	r3, [r1, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	b09d      	sub	sp, #116	@ 0x74
 8005c50:	4607      	mov	r7, r0
 8005c52:	460d      	mov	r5, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	d510      	bpl.n	8005c7a <_svfiprintf_r+0x36>
 8005c58:	690b      	ldr	r3, [r1, #16]
 8005c5a:	b973      	cbnz	r3, 8005c7a <_svfiprintf_r+0x36>
 8005c5c:	2140      	movs	r1, #64	@ 0x40
 8005c5e:	f7ff ff09 	bl	8005a74 <_malloc_r>
 8005c62:	6028      	str	r0, [r5, #0]
 8005c64:	6128      	str	r0, [r5, #16]
 8005c66:	b930      	cbnz	r0, 8005c76 <_svfiprintf_r+0x32>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	b01d      	add	sp, #116	@ 0x74
 8005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	2340      	movs	r3, #64	@ 0x40
 8005c78:	616b      	str	r3, [r5, #20]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c7e:	2320      	movs	r3, #32
 8005c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c88:	2330      	movs	r3, #48	@ 0x30
 8005c8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e28 <_svfiprintf_r+0x1e4>
 8005c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c92:	f04f 0901 	mov.w	r9, #1
 8005c96:	4623      	mov	r3, r4
 8005c98:	469a      	mov	sl, r3
 8005c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9e:	b10a      	cbz	r2, 8005ca4 <_svfiprintf_r+0x60>
 8005ca0:	2a25      	cmp	r2, #37	@ 0x25
 8005ca2:	d1f9      	bne.n	8005c98 <_svfiprintf_r+0x54>
 8005ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca8:	d00b      	beq.n	8005cc2 <_svfiprintf_r+0x7e>
 8005caa:	465b      	mov	r3, fp
 8005cac:	4622      	mov	r2, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f7ff ff6b 	bl	8005b8c <__ssputs_r>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f000 80a7 	beq.w	8005e0a <_svfiprintf_r+0x1c6>
 8005cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cbe:	445a      	add	r2, fp
 8005cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 809f 	beq.w	8005e0a <_svfiprintf_r+0x1c6>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd6:	f10a 0a01 	add.w	sl, sl, #1
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ce4:	4654      	mov	r4, sl
 8005ce6:	2205      	movs	r2, #5
 8005ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cec:	484e      	ldr	r0, [pc, #312]	@ (8005e28 <_svfiprintf_r+0x1e4>)
 8005cee:	f7fa fa7f 	bl	80001f0 <memchr>
 8005cf2:	9a04      	ldr	r2, [sp, #16]
 8005cf4:	b9d8      	cbnz	r0, 8005d2e <_svfiprintf_r+0xea>
 8005cf6:	06d0      	lsls	r0, r2, #27
 8005cf8:	bf44      	itt	mi
 8005cfa:	2320      	movmi	r3, #32
 8005cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d00:	0711      	lsls	r1, r2, #28
 8005d02:	bf44      	itt	mi
 8005d04:	232b      	movmi	r3, #43	@ 0x2b
 8005d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d10:	d015      	beq.n	8005d3e <_svfiprintf_r+0xfa>
 8005d12:	9a07      	ldr	r2, [sp, #28]
 8005d14:	4654      	mov	r4, sl
 8005d16:	2000      	movs	r0, #0
 8005d18:	f04f 0c0a 	mov.w	ip, #10
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d22:	3b30      	subs	r3, #48	@ 0x30
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d94b      	bls.n	8005dc0 <_svfiprintf_r+0x17c>
 8005d28:	b1b0      	cbz	r0, 8005d58 <_svfiprintf_r+0x114>
 8005d2a:	9207      	str	r2, [sp, #28]
 8005d2c:	e014      	b.n	8005d58 <_svfiprintf_r+0x114>
 8005d2e:	eba0 0308 	sub.w	r3, r0, r8
 8005d32:	fa09 f303 	lsl.w	r3, r9, r3
 8005d36:	4313      	orrs	r3, r2
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	46a2      	mov	sl, r4
 8005d3c:	e7d2      	b.n	8005ce4 <_svfiprintf_r+0xa0>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	1d19      	adds	r1, r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	9103      	str	r1, [sp, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbb      	ittet	lt
 8005d4a:	425b      	neglt	r3, r3
 8005d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d50:	9307      	strge	r3, [sp, #28]
 8005d52:	9307      	strlt	r3, [sp, #28]
 8005d54:	bfb8      	it	lt
 8005d56:	9204      	strlt	r2, [sp, #16]
 8005d58:	7823      	ldrb	r3, [r4, #0]
 8005d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d5c:	d10a      	bne.n	8005d74 <_svfiprintf_r+0x130>
 8005d5e:	7863      	ldrb	r3, [r4, #1]
 8005d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d62:	d132      	bne.n	8005dca <_svfiprintf_r+0x186>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	9203      	str	r2, [sp, #12]
 8005d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d70:	3402      	adds	r4, #2
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e38 <_svfiprintf_r+0x1f4>
 8005d78:	7821      	ldrb	r1, [r4, #0]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	f7fa fa37 	bl	80001f0 <memchr>
 8005d82:	b138      	cbz	r0, 8005d94 <_svfiprintf_r+0x150>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	eba0 000a 	sub.w	r0, r0, sl
 8005d8a:	2240      	movs	r2, #64	@ 0x40
 8005d8c:	4082      	lsls	r2, r0
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	3401      	adds	r4, #1
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	4824      	ldr	r0, [pc, #144]	@ (8005e2c <_svfiprintf_r+0x1e8>)
 8005d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d9e:	2206      	movs	r2, #6
 8005da0:	f7fa fa26 	bl	80001f0 <memchr>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d036      	beq.n	8005e16 <_svfiprintf_r+0x1d2>
 8005da8:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <_svfiprintf_r+0x1ec>)
 8005daa:	bb1b      	cbnz	r3, 8005df4 <_svfiprintf_r+0x1b0>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	3307      	adds	r3, #7
 8005db0:	f023 0307 	bic.w	r3, r3, #7
 8005db4:	3308      	adds	r3, #8
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dba:	4433      	add	r3, r6
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	e76a      	b.n	8005c96 <_svfiprintf_r+0x52>
 8005dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	e7a8      	b.n	8005d1c <_svfiprintf_r+0xd8>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	3401      	adds	r4, #1
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ddc:	3a30      	subs	r2, #48	@ 0x30
 8005dde:	2a09      	cmp	r2, #9
 8005de0:	d903      	bls.n	8005dea <_svfiprintf_r+0x1a6>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0c6      	beq.n	8005d74 <_svfiprintf_r+0x130>
 8005de6:	9105      	str	r1, [sp, #20]
 8005de8:	e7c4      	b.n	8005d74 <_svfiprintf_r+0x130>
 8005dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dee:	4604      	mov	r4, r0
 8005df0:	2301      	movs	r3, #1
 8005df2:	e7f0      	b.n	8005dd6 <_svfiprintf_r+0x192>
 8005df4:	ab03      	add	r3, sp, #12
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <_svfiprintf_r+0x1f0>)
 8005dfc:	a904      	add	r1, sp, #16
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f3af 8000 	nop.w
 8005e04:	1c42      	adds	r2, r0, #1
 8005e06:	4606      	mov	r6, r0
 8005e08:	d1d6      	bne.n	8005db8 <_svfiprintf_r+0x174>
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	065b      	lsls	r3, r3, #25
 8005e0e:	f53f af2d 	bmi.w	8005c6c <_svfiprintf_r+0x28>
 8005e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e14:	e72c      	b.n	8005c70 <_svfiprintf_r+0x2c>
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <_svfiprintf_r+0x1f0>)
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	4638      	mov	r0, r7
 8005e22:	f000 f879 	bl	8005f18 <_printf_i>
 8005e26:	e7ed      	b.n	8005e04 <_svfiprintf_r+0x1c0>
 8005e28:	0800635c 	.word	0x0800635c
 8005e2c:	08006366 	.word	0x08006366
 8005e30:	00000000 	.word	0x00000000
 8005e34:	08005b8d 	.word	0x08005b8d
 8005e38:	08006362 	.word	0x08006362

08005e3c <_printf_common>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	4616      	mov	r6, r2
 8005e42:	4698      	mov	r8, r3
 8005e44:	688a      	ldr	r2, [r1, #8]
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bfb8      	it	lt
 8005e50:	4613      	movlt	r3, r2
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e58:	4607      	mov	r7, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b10a      	cbz	r2, 8005e62 <_printf_common+0x26>
 8005e5e:	3301      	adds	r3, #1
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	0699      	lsls	r1, r3, #26
 8005e66:	bf42      	ittt	mi
 8005e68:	6833      	ldrmi	r3, [r6, #0]
 8005e6a:	3302      	addmi	r3, #2
 8005e6c:	6033      	strmi	r3, [r6, #0]
 8005e6e:	6825      	ldr	r5, [r4, #0]
 8005e70:	f015 0506 	ands.w	r5, r5, #6
 8005e74:	d106      	bne.n	8005e84 <_printf_common+0x48>
 8005e76:	f104 0a19 	add.w	sl, r4, #25
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	6832      	ldr	r2, [r6, #0]
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	dc26      	bgt.n	8005ed2 <_printf_common+0x96>
 8005e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	3b00      	subs	r3, #0
 8005e8c:	bf18      	it	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	0692      	lsls	r2, r2, #26
 8005e92:	d42b      	bmi.n	8005eec <_printf_common+0xb0>
 8005e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c8      	blx	r9
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d01e      	beq.n	8005ee0 <_printf_common+0xa4>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	6922      	ldr	r2, [r4, #16]
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	bf02      	ittt	eq
 8005eae:	68e5      	ldreq	r5, [r4, #12]
 8005eb0:	6833      	ldreq	r3, [r6, #0]
 8005eb2:	1aed      	subeq	r5, r5, r3
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	bf0c      	ite	eq
 8005eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ebc:	2500      	movne	r5, #0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	bfc4      	itt	gt
 8005ec2:	1a9b      	subgt	r3, r3, r2
 8005ec4:	18ed      	addgt	r5, r5, r3
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	341a      	adds	r4, #26
 8005eca:	42b5      	cmp	r5, r6
 8005ecc:	d11a      	bne.n	8005f04 <_printf_common+0xc8>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e008      	b.n	8005ee4 <_printf_common+0xa8>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	4638      	mov	r0, r7
 8005eda:	47c8      	blx	r9
 8005edc:	3001      	adds	r0, #1
 8005ede:	d103      	bne.n	8005ee8 <_printf_common+0xac>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	3501      	adds	r5, #1
 8005eea:	e7c6      	b.n	8005e7a <_printf_common+0x3e>
 8005eec:	18e1      	adds	r1, r4, r3
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	2030      	movs	r0, #48	@ 0x30
 8005ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ef6:	4422      	add	r2, r4
 8005ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f00:	3302      	adds	r3, #2
 8005f02:	e7c7      	b.n	8005e94 <_printf_common+0x58>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4622      	mov	r2, r4
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	47c8      	blx	r9
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d0e6      	beq.n	8005ee0 <_printf_common+0xa4>
 8005f12:	3601      	adds	r6, #1
 8005f14:	e7d9      	b.n	8005eca <_printf_common+0x8e>
	...

08005f18 <_printf_i>:
 8005f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	7e0f      	ldrb	r7, [r1, #24]
 8005f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f20:	2f78      	cmp	r7, #120	@ 0x78
 8005f22:	4691      	mov	r9, r2
 8005f24:	4680      	mov	r8, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	469a      	mov	sl, r3
 8005f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f2e:	d807      	bhi.n	8005f40 <_printf_i+0x28>
 8005f30:	2f62      	cmp	r7, #98	@ 0x62
 8005f32:	d80a      	bhi.n	8005f4a <_printf_i+0x32>
 8005f34:	2f00      	cmp	r7, #0
 8005f36:	f000 80d1 	beq.w	80060dc <_printf_i+0x1c4>
 8005f3a:	2f58      	cmp	r7, #88	@ 0x58
 8005f3c:	f000 80b8 	beq.w	80060b0 <_printf_i+0x198>
 8005f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f48:	e03a      	b.n	8005fc0 <_printf_i+0xa8>
 8005f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f4e:	2b15      	cmp	r3, #21
 8005f50:	d8f6      	bhi.n	8005f40 <_printf_i+0x28>
 8005f52:	a101      	add	r1, pc, #4	@ (adr r1, 8005f58 <_printf_i+0x40>)
 8005f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fc5 	.word	0x08005fc5
 8005f60:	08005f41 	.word	0x08005f41
 8005f64:	08005f41 	.word	0x08005f41
 8005f68:	08005f41 	.word	0x08005f41
 8005f6c:	08005f41 	.word	0x08005f41
 8005f70:	08005fc5 	.word	0x08005fc5
 8005f74:	08005f41 	.word	0x08005f41
 8005f78:	08005f41 	.word	0x08005f41
 8005f7c:	08005f41 	.word	0x08005f41
 8005f80:	08005f41 	.word	0x08005f41
 8005f84:	080060c3 	.word	0x080060c3
 8005f88:	08005fef 	.word	0x08005fef
 8005f8c:	0800607d 	.word	0x0800607d
 8005f90:	08005f41 	.word	0x08005f41
 8005f94:	08005f41 	.word	0x08005f41
 8005f98:	080060e5 	.word	0x080060e5
 8005f9c:	08005f41 	.word	0x08005f41
 8005fa0:	08005fef 	.word	0x08005fef
 8005fa4:	08005f41 	.word	0x08005f41
 8005fa8:	08005f41 	.word	0x08005f41
 8005fac:	08006085 	.word	0x08006085
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6032      	str	r2, [r6, #0]
 8005fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e09c      	b.n	80060fe <_printf_i+0x1e6>
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	6031      	str	r1, [r6, #0]
 8005fcc:	0606      	lsls	r6, r0, #24
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0xbc>
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	e003      	b.n	8005fdc <_printf_i+0xc4>
 8005fd4:	0645      	lsls	r5, r0, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0xb8>
 8005fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	da03      	bge.n	8005fe8 <_printf_i+0xd0>
 8005fe0:	232d      	movs	r3, #45	@ 0x2d
 8005fe2:	426d      	negs	r5, r5
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe8:	4858      	ldr	r0, [pc, #352]	@ (800614c <_printf_i+0x234>)
 8005fea:	230a      	movs	r3, #10
 8005fec:	e011      	b.n	8006012 <_printf_i+0xfa>
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	0608      	lsls	r0, r1, #24
 8005ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ff8:	d402      	bmi.n	8006000 <_printf_i+0xe8>
 8005ffa:	0649      	lsls	r1, r1, #25
 8005ffc:	bf48      	it	mi
 8005ffe:	b2ad      	uxthmi	r5, r5
 8006000:	2f6f      	cmp	r7, #111	@ 0x6f
 8006002:	4852      	ldr	r0, [pc, #328]	@ (800614c <_printf_i+0x234>)
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	bf14      	ite	ne
 8006008:	230a      	movne	r3, #10
 800600a:	2308      	moveq	r3, #8
 800600c:	2100      	movs	r1, #0
 800600e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006012:	6866      	ldr	r6, [r4, #4]
 8006014:	60a6      	str	r6, [r4, #8]
 8006016:	2e00      	cmp	r6, #0
 8006018:	db05      	blt.n	8006026 <_printf_i+0x10e>
 800601a:	6821      	ldr	r1, [r4, #0]
 800601c:	432e      	orrs	r6, r5
 800601e:	f021 0104 	bic.w	r1, r1, #4
 8006022:	6021      	str	r1, [r4, #0]
 8006024:	d04b      	beq.n	80060be <_printf_i+0x1a6>
 8006026:	4616      	mov	r6, r2
 8006028:	fbb5 f1f3 	udiv	r1, r5, r3
 800602c:	fb03 5711 	mls	r7, r3, r1, r5
 8006030:	5dc7      	ldrb	r7, [r0, r7]
 8006032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006036:	462f      	mov	r7, r5
 8006038:	42bb      	cmp	r3, r7
 800603a:	460d      	mov	r5, r1
 800603c:	d9f4      	bls.n	8006028 <_printf_i+0x110>
 800603e:	2b08      	cmp	r3, #8
 8006040:	d10b      	bne.n	800605a <_printf_i+0x142>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	07df      	lsls	r7, r3, #31
 8006046:	d508      	bpl.n	800605a <_printf_i+0x142>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	6861      	ldr	r1, [r4, #4]
 800604c:	4299      	cmp	r1, r3
 800604e:	bfde      	ittt	le
 8006050:	2330      	movle	r3, #48	@ 0x30
 8006052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800605a:	1b92      	subs	r2, r2, r6
 800605c:	6122      	str	r2, [r4, #16]
 800605e:	f8cd a000 	str.w	sl, [sp]
 8006062:	464b      	mov	r3, r9
 8006064:	aa03      	add	r2, sp, #12
 8006066:	4621      	mov	r1, r4
 8006068:	4640      	mov	r0, r8
 800606a:	f7ff fee7 	bl	8005e3c <_printf_common>
 800606e:	3001      	adds	r0, #1
 8006070:	d14a      	bne.n	8006108 <_printf_i+0x1f0>
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	b004      	add	sp, #16
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	4832      	ldr	r0, [pc, #200]	@ (8006150 <_printf_i+0x238>)
 8006086:	2778      	movs	r7, #120	@ 0x78
 8006088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	6831      	ldr	r1, [r6, #0]
 8006090:	061f      	lsls	r7, r3, #24
 8006092:	f851 5b04 	ldr.w	r5, [r1], #4
 8006096:	d402      	bmi.n	800609e <_printf_i+0x186>
 8006098:	065f      	lsls	r7, r3, #25
 800609a:	bf48      	it	mi
 800609c:	b2ad      	uxthmi	r5, r5
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	07d9      	lsls	r1, r3, #31
 80060a2:	bf44      	itt	mi
 80060a4:	f043 0320 	orrmi.w	r3, r3, #32
 80060a8:	6023      	strmi	r3, [r4, #0]
 80060aa:	b11d      	cbz	r5, 80060b4 <_printf_i+0x19c>
 80060ac:	2310      	movs	r3, #16
 80060ae:	e7ad      	b.n	800600c <_printf_i+0xf4>
 80060b0:	4826      	ldr	r0, [pc, #152]	@ (800614c <_printf_i+0x234>)
 80060b2:	e7e9      	b.n	8006088 <_printf_i+0x170>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	f023 0320 	bic.w	r3, r3, #32
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	e7f6      	b.n	80060ac <_printf_i+0x194>
 80060be:	4616      	mov	r6, r2
 80060c0:	e7bd      	b.n	800603e <_printf_i+0x126>
 80060c2:	6833      	ldr	r3, [r6, #0]
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	6961      	ldr	r1, [r4, #20]
 80060c8:	1d18      	adds	r0, r3, #4
 80060ca:	6030      	str	r0, [r6, #0]
 80060cc:	062e      	lsls	r6, r5, #24
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	d501      	bpl.n	80060d6 <_printf_i+0x1be>
 80060d2:	6019      	str	r1, [r3, #0]
 80060d4:	e002      	b.n	80060dc <_printf_i+0x1c4>
 80060d6:	0668      	lsls	r0, r5, #25
 80060d8:	d5fb      	bpl.n	80060d2 <_printf_i+0x1ba>
 80060da:	8019      	strh	r1, [r3, #0]
 80060dc:	2300      	movs	r3, #0
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	4616      	mov	r6, r2
 80060e2:	e7bc      	b.n	800605e <_printf_i+0x146>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	6032      	str	r2, [r6, #0]
 80060ea:	681e      	ldr	r6, [r3, #0]
 80060ec:	6862      	ldr	r2, [r4, #4]
 80060ee:	2100      	movs	r1, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fa f87d 	bl	80001f0 <memchr>
 80060f6:	b108      	cbz	r0, 80060fc <_printf_i+0x1e4>
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	6060      	str	r0, [r4, #4]
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	2300      	movs	r3, #0
 8006102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006106:	e7aa      	b.n	800605e <_printf_i+0x146>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	4632      	mov	r2, r6
 800610c:	4649      	mov	r1, r9
 800610e:	4640      	mov	r0, r8
 8006110:	47d0      	blx	sl
 8006112:	3001      	adds	r0, #1
 8006114:	d0ad      	beq.n	8006072 <_printf_i+0x15a>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	079b      	lsls	r3, r3, #30
 800611a:	d413      	bmi.n	8006144 <_printf_i+0x22c>
 800611c:	68e0      	ldr	r0, [r4, #12]
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	4298      	cmp	r0, r3
 8006122:	bfb8      	it	lt
 8006124:	4618      	movlt	r0, r3
 8006126:	e7a6      	b.n	8006076 <_printf_i+0x15e>
 8006128:	2301      	movs	r3, #1
 800612a:	4632      	mov	r2, r6
 800612c:	4649      	mov	r1, r9
 800612e:	4640      	mov	r0, r8
 8006130:	47d0      	blx	sl
 8006132:	3001      	adds	r0, #1
 8006134:	d09d      	beq.n	8006072 <_printf_i+0x15a>
 8006136:	3501      	adds	r5, #1
 8006138:	68e3      	ldr	r3, [r4, #12]
 800613a:	9903      	ldr	r1, [sp, #12]
 800613c:	1a5b      	subs	r3, r3, r1
 800613e:	42ab      	cmp	r3, r5
 8006140:	dcf2      	bgt.n	8006128 <_printf_i+0x210>
 8006142:	e7eb      	b.n	800611c <_printf_i+0x204>
 8006144:	2500      	movs	r5, #0
 8006146:	f104 0619 	add.w	r6, r4, #25
 800614a:	e7f5      	b.n	8006138 <_printf_i+0x220>
 800614c:	0800636d 	.word	0x0800636d
 8006150:	0800637e 	.word	0x0800637e

08006154 <memmove>:
 8006154:	4288      	cmp	r0, r1
 8006156:	b510      	push	{r4, lr}
 8006158:	eb01 0402 	add.w	r4, r1, r2
 800615c:	d902      	bls.n	8006164 <memmove+0x10>
 800615e:	4284      	cmp	r4, r0
 8006160:	4623      	mov	r3, r4
 8006162:	d807      	bhi.n	8006174 <memmove+0x20>
 8006164:	1e43      	subs	r3, r0, #1
 8006166:	42a1      	cmp	r1, r4
 8006168:	d008      	beq.n	800617c <memmove+0x28>
 800616a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800616e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006172:	e7f8      	b.n	8006166 <memmove+0x12>
 8006174:	4402      	add	r2, r0
 8006176:	4601      	mov	r1, r0
 8006178:	428a      	cmp	r2, r1
 800617a:	d100      	bne.n	800617e <memmove+0x2a>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006186:	e7f7      	b.n	8006178 <memmove+0x24>

08006188 <_sbrk_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	@ (80061a4 <_sbrk_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fb fa78 	bl	8001688 <_sbrk>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_sbrk_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_sbrk_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	200003d0 	.word	0x200003d0

080061a8 <memcpy>:
 80061a8:	440a      	add	r2, r1
 80061aa:	4291      	cmp	r1, r2
 80061ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b0:	d100      	bne.n	80061b4 <memcpy+0xc>
 80061b2:	4770      	bx	lr
 80061b4:	b510      	push	{r4, lr}
 80061b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061be:	4291      	cmp	r1, r2
 80061c0:	d1f9      	bne.n	80061b6 <memcpy+0xe>
 80061c2:	bd10      	pop	{r4, pc}

080061c4 <_realloc_r>:
 80061c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	4607      	mov	r7, r0
 80061ca:	4614      	mov	r4, r2
 80061cc:	460d      	mov	r5, r1
 80061ce:	b921      	cbnz	r1, 80061da <_realloc_r+0x16>
 80061d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	4611      	mov	r1, r2
 80061d6:	f7ff bc4d 	b.w	8005a74 <_malloc_r>
 80061da:	b92a      	cbnz	r2, 80061e8 <_realloc_r+0x24>
 80061dc:	f7ff fbde 	bl	800599c <_free_r>
 80061e0:	4625      	mov	r5, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	f000 f81a 	bl	8006220 <_malloc_usable_size_r>
 80061ec:	4284      	cmp	r4, r0
 80061ee:	4606      	mov	r6, r0
 80061f0:	d802      	bhi.n	80061f8 <_realloc_r+0x34>
 80061f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061f6:	d8f4      	bhi.n	80061e2 <_realloc_r+0x1e>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4638      	mov	r0, r7
 80061fc:	f7ff fc3a 	bl	8005a74 <_malloc_r>
 8006200:	4680      	mov	r8, r0
 8006202:	b908      	cbnz	r0, 8006208 <_realloc_r+0x44>
 8006204:	4645      	mov	r5, r8
 8006206:	e7ec      	b.n	80061e2 <_realloc_r+0x1e>
 8006208:	42b4      	cmp	r4, r6
 800620a:	4622      	mov	r2, r4
 800620c:	4629      	mov	r1, r5
 800620e:	bf28      	it	cs
 8006210:	4632      	movcs	r2, r6
 8006212:	f7ff ffc9 	bl	80061a8 <memcpy>
 8006216:	4629      	mov	r1, r5
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff fbbf 	bl	800599c <_free_r>
 800621e:	e7f1      	b.n	8006204 <_realloc_r+0x40>

08006220 <_malloc_usable_size_r>:
 8006220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006224:	1f18      	subs	r0, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	bfbc      	itt	lt
 800622a:	580b      	ldrlt	r3, [r1, r0]
 800622c:	18c0      	addlt	r0, r0, r3
 800622e:	4770      	bx	lr

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
