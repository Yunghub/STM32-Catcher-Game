
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800634c  0800634c  0000734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006494  08006494  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006494  08006494  00007494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800649c  0800649c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800649c  0800649c  0000749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080064a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000060  08006504  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006504  000083ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001288a  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f3  00000000  00000000  0001a91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  0001e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018339  00000000  00000000  0001eec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bba  00000000  00000000  000371fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd82  00000000  00000000  0004bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e7c  00000000  00000000  000e7b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000ec9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006334 	.word	0x08006334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006334 	.word	0x08006334

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <LEDMatrix_ClearScreen>:
};

/* LED Matrix Functions Implementation */

void LEDMatrix_ClearScreen(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af02      	add	r7, sp, #8
  uint8_t data[2];
  for (uint8_t r = 0; r < 11; r++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e022      	b.n	800060e <LEDMatrix_ClearScreen+0x52>
  {
    data[0] = COM_REG;
 80005c8:	23fd      	movs	r3, #253	@ 0xfd
 80005ca:	713b      	strb	r3, [r7, #4]
    data[1] = PAGE_1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2302      	movs	r3, #2
 80005da:	21ea      	movs	r1, #234	@ 0xea
 80005dc:	4810      	ldr	r0, [pc, #64]	@ (8000620 <LEDMatrix_ClearScreen+0x64>)
 80005de:	f002 fe89 	bl	80032f4 <HAL_I2C_Master_Transmit>

    data[0] = MAT_ROW[r];
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <LEDMatrix_ClearScreen+0x68>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2302      	movs	r3, #2
 80005f8:	21ea      	movs	r1, #234	@ 0xea
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <LEDMatrix_ClearScreen+0x64>)
 80005fc:	f002 fe7a 	bl	80032f4 <HAL_I2C_Master_Transmit>

    screenstatus[r] = 0;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <LEDMatrix_ClearScreen+0x6c>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
  for (uint8_t r = 0; r < 11; r++)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b0a      	cmp	r3, #10
 8000612:	d9d9      	bls.n	80005c8 <LEDMatrix_ClearScreen+0xc>
  }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000130 	.word	0x20000130
 8000624:	08006394 	.word	0x08006394
 8000628:	2000007c 	.word	0x2000007c

0800062c <LEDMatrix_TurnOn>:
  data[1] = 0x00;
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
}

void LEDMatrix_TurnOn(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
  uint8_t data[2];
  data[0] = COM_REG;
 8000632:	23fd      	movs	r3, #253	@ 0xfd
 8000634:	713b      	strb	r3, [r7, #4]
  data[1] = FUN_REG;
 8000636:	230b      	movs	r3, #11
 8000638:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2302      	movs	r3, #2
 8000644:	21ea      	movs	r1, #234	@ 0xea
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <LEDMatrix_TurnOn+0x44>)
 8000648:	f002 fe54 	bl	80032f4 <HAL_I2C_Master_Transmit>

  data[0] = 0x0A;
 800064c:	230a      	movs	r3, #10
 800064e:	713b      	strb	r3, [r7, #4]
  data[1] = 0x01;
 8000650:	2301      	movs	r3, #1
 8000652:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000654:	1d3a      	adds	r2, r7, #4
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2302      	movs	r3, #2
 800065e:	21ea      	movs	r1, #234	@ 0xea
 8000660:	4803      	ldr	r0, [pc, #12]	@ (8000670 <LEDMatrix_TurnOn+0x44>)
 8000662:	f002 fe47 	bl	80032f4 <HAL_I2C_Master_Transmit>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000130 	.word	0x20000130

08000674 <LEDMatrix_AddPixel>:

void LEDMatrix_AddPixel(uint8_t r, uint8_t c)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  screenstatus[r] |= MAT_COL[c];
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <LEDMatrix_AddPixel+0x70>)
 8000688:	5cd1      	ldrb	r1, [r2, r3]
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	4a16      	ldr	r2, [pc, #88]	@ (80006e8 <LEDMatrix_AddPixel+0x74>)
 800068e:	5cd2      	ldrb	r2, [r2, r3]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	430a      	orrs	r2, r1
 8000694:	b2d1      	uxtb	r1, r2
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <LEDMatrix_AddPixel+0x70>)
 8000698:	54d1      	strb	r1, [r2, r3]

  data[0] = COM_REG;
 800069a:	23fd      	movs	r3, #253	@ 0xfd
 800069c:	733b      	strb	r3, [r7, #12]
  data[1] = PAGE_1;
 800069e:	2300      	movs	r3, #0
 80006a0:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80006a2:	f107 020c 	add.w	r2, r7, #12
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	21ea      	movs	r1, #234	@ 0xea
 80006b0:	480e      	ldr	r0, [pc, #56]	@ (80006ec <LEDMatrix_AddPixel+0x78>)
 80006b2:	f002 fe1f 	bl	80032f4 <HAL_I2C_Master_Transmit>

  data[0] = MAT_ROW[r];
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LEDMatrix_AddPixel+0x7c>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	733b      	strb	r3, [r7, #12]
  data[1] = screenstatus[r];
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <LEDMatrix_AddPixel+0x70>)
 80006c2:	5cd3      	ldrb	r3, [r2, r3]
 80006c4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2302      	movs	r3, #2
 80006d2:	21ea      	movs	r1, #234	@ 0xea
 80006d4:	4805      	ldr	r0, [pc, #20]	@ (80006ec <LEDMatrix_AddPixel+0x78>)
 80006d6:	f002 fe0d 	bl	80032f4 <HAL_I2C_Master_Transmit>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	080063a0 	.word	0x080063a0
 80006ec:	20000130 	.word	0x20000130
 80006f0:	08006394 	.word	0x08006394

080006f4 <LEDMatrix_DrawPaddle>:
  data[1] = screenstatus[r];
  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
}

void LEDMatrix_DrawPaddle(uint8_t centerCol)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if (centerCol == 0)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10c      	bne.n	800071e <LEDMatrix_DrawPaddle+0x2a>
  {
    LEDMatrix_AddPixel(10, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	200a      	movs	r0, #10
 8000708:	f7ff ffb4 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, 1);
 800070c:	2101      	movs	r1, #1
 800070e:	200a      	movs	r0, #10
 8000710:	f7ff ffb0 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, 2);
 8000714:	2102      	movs	r1, #2
 8000716:	200a      	movs	r0, #10
 8000718:	f7ff ffac 	bl	8000674 <LEDMatrix_AddPixel>
  {
    LEDMatrix_AddPixel(10, centerCol - 1);
    LEDMatrix_AddPixel(10, centerCol);
    LEDMatrix_AddPixel(10, centerCol + 1);
  }
}
 800071c:	e022      	b.n	8000764 <LEDMatrix_DrawPaddle+0x70>
  else if (centerCol >= 6)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b05      	cmp	r3, #5
 8000722:	d90c      	bls.n	800073e <LEDMatrix_DrawPaddle+0x4a>
    LEDMatrix_AddPixel(10, 4);
 8000724:	2104      	movs	r1, #4
 8000726:	200a      	movs	r0, #10
 8000728:	f7ff ffa4 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, 5);
 800072c:	2105      	movs	r1, #5
 800072e:	200a      	movs	r0, #10
 8000730:	f7ff ffa0 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, 6);
 8000734:	2106      	movs	r1, #6
 8000736:	200a      	movs	r0, #10
 8000738:	f7ff ff9c 	bl	8000674 <LEDMatrix_AddPixel>
}
 800073c:	e012      	b.n	8000764 <LEDMatrix_DrawPaddle+0x70>
    LEDMatrix_AddPixel(10, centerCol - 1);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3b01      	subs	r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	200a      	movs	r0, #10
 8000748:	f7ff ff94 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, centerCol);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4619      	mov	r1, r3
 8000750:	200a      	movs	r0, #10
 8000752:	f7ff ff8f 	bl	8000674 <LEDMatrix_AddPixel>
    LEDMatrix_AddPixel(10, centerCol + 1);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	200a      	movs	r0, #10
 8000760:	f7ff ff88 	bl	8000674 <LEDMatrix_AddPixel>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <LEDMatrix_DrawDigit>:

void LEDMatrix_DrawDigit(uint8_t digit, uint8_t topRow, uint8_t leftCol)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	460b      	mov	r3, r1
 8000778:	71bb      	strb	r3, [r7, #6]
 800077a:	4613      	mov	r3, r2
 800077c:	717b      	strb	r3, [r7, #5]
  if (digit > 9) return;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b09      	cmp	r3, #9
 8000782:	d82d      	bhi.n	80007e0 <LEDMatrix_DrawDigit+0x74>
  for (uint8_t i = 0; i < 5; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e026      	b.n	80007d8 <LEDMatrix_DrawDigit+0x6c>
  {
    for (uint8_t j = 0; j < 3; j++)
 800078a:	2300      	movs	r3, #0
 800078c:	73bb      	strb	r3, [r7, #14]
 800078e:	e01d      	b.n	80007cc <LEDMatrix_DrawDigit+0x60>
    {
      if (digitPatterns[digit][i][j])
 8000790:	79f9      	ldrb	r1, [r7, #7]
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	7bb8      	ldrb	r0, [r7, #14]
 8000796:	4c14      	ldr	r4, [pc, #80]	@ (80007e8 <LEDMatrix_DrawDigit+0x7c>)
 8000798:	461a      	mov	r2, r3
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	441a      	add	r2, r3
 800079e:	460b      	mov	r3, r1
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	1a5b      	subs	r3, r3, r1
 80007a4:	4413      	add	r3, r2
 80007a6:	4423      	add	r3, r4
 80007a8:	4403      	add	r3, r0
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00a      	beq.n	80007c6 <LEDMatrix_DrawDigit+0x5a>
      {
        LEDMatrix_AddPixel(topRow + i, leftCol + j);
 80007b0:	79ba      	ldrb	r2, [r7, #6]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4413      	add	r3, r2
 80007b6:	b2d8      	uxtb	r0, r3
 80007b8:	797a      	ldrb	r2, [r7, #5]
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	4413      	add	r3, r2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	f7ff ff57 	bl	8000674 <LEDMatrix_AddPixel>
    for (uint8_t j = 0; j < 3; j++)
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	3301      	adds	r3, #1
 80007ca:	73bb      	strb	r3, [r7, #14]
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d9de      	bls.n	8000790 <LEDMatrix_DrawDigit+0x24>
  for (uint8_t i = 0; i < 5; i++)
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3301      	adds	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d9d5      	bls.n	800078a <LEDMatrix_DrawDigit+0x1e>
 80007de:	e000      	b.n	80007e2 <LEDMatrix_DrawDigit+0x76>
  if (digit > 9) return;
 80007e0:	bf00      	nop
      }
    }
  }
}
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	080063a8 	.word	0x080063a8

080007ec <LEDMatrix_DisplayScore>:

void LEDMatrix_DisplayScore(uint32_t score)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  LEDMatrix_ClearScreen();
 80007f4:	f7ff fee2 	bl	80005bc <LEDMatrix_ClearScreen>
  uint8_t topRow = 3;
 80007f8:	2303      	movs	r3, #3
 80007fa:	73fb      	strb	r3, [r7, #15]
  if (score < 10)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b09      	cmp	r3, #9
 8000800:	d807      	bhi.n	8000812 <LEDMatrix_DisplayScore+0x26>
  {
    LEDMatrix_DrawDigit((uint8_t)score, topRow, 2);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	7bf9      	ldrb	r1, [r7, #15]
 8000808:	2202      	movs	r2, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffae 	bl	800076c <LEDMatrix_DrawDigit>
    uint8_t tens = (score / 10) % 10;
    uint8_t ones = score % 10;
    LEDMatrix_DrawDigit(tens, topRow, 0);
    LEDMatrix_DrawDigit(ones, topRow, 4);
  }
}
 8000810:	e027      	b.n	8000862 <LEDMatrix_DisplayScore+0x76>
    uint8_t tens = (score / 10) % 10;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a15      	ldr	r2, [pc, #84]	@ (800086c <LEDMatrix_DisplayScore+0x80>)
 8000816:	fba2 2303 	umull	r2, r3, r2, r3
 800081a:	08d9      	lsrs	r1, r3, #3
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <LEDMatrix_DisplayScore+0x80>)
 800081e:	fba3 2301 	umull	r2, r3, r3, r1
 8000822:	08da      	lsrs	r2, r3, #3
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1aca      	subs	r2, r1, r3
 800082e:	4613      	mov	r3, r2
 8000830:	73bb      	strb	r3, [r7, #14]
    uint8_t ones = score % 10;
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <LEDMatrix_DisplayScore+0x80>)
 8000836:	fba3 2301 	umull	r2, r3, r3, r1
 800083a:	08da      	lsrs	r2, r3, #3
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	1aca      	subs	r2, r1, r3
 8000846:	4613      	mov	r3, r2
 8000848:	737b      	strb	r3, [r7, #13]
    LEDMatrix_DrawDigit(tens, topRow, 0);
 800084a:	7bf9      	ldrb	r1, [r7, #15]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2200      	movs	r2, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff8b 	bl	800076c <LEDMatrix_DrawDigit>
    LEDMatrix_DrawDigit(ones, topRow, 4);
 8000856:	7bf9      	ldrb	r1, [r7, #15]
 8000858:	7b7b      	ldrb	r3, [r7, #13]
 800085a:	2204      	movs	r2, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff85 	bl	800076c <LEDMatrix_DrawDigit>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	cccccccd 	.word	0xcccccccd

08000870 <LEDMatrix_FlashScreen>:

void LEDMatrix_FlashScreen(uint8_t times)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	@ 0x38
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  uint8_t data[2];
  uint32_t defaultPeriod = htim3.Init.Period;
 800087a:	4b4e      	ldr	r3, [pc, #312]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t notePeriods[3] = {999, 1249, 1666};
 8000880:	4a4d      	ldr	r2, [pc, #308]	@ (80009b8 <LEDMatrix_FlashScreen+0x148>)
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	ca07      	ldmia	r2, {r0, r1, r2}
 8000888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t noteDurations[3] = {150, 150, 300};
 800088c:	4a4b      	ldr	r2, [pc, #300]	@ (80009bc <LEDMatrix_FlashScreen+0x14c>)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	ca07      	ldmia	r2, {r0, r1, r2}
 8000894:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  for (uint8_t t = 0; t < times; t++)
 8000898:	2300      	movs	r3, #0
 800089a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800089e:	e078      	b.n	8000992 <LEDMatrix_FlashScreen+0x122>
  {
    for (uint8_t r = 0; r < 11; r++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80008a6:	e02c      	b.n	8000902 <LEDMatrix_FlashScreen+0x92>
    {
      data[0] = COM_REG;
 80008a8:	23fd      	movs	r3, #253	@ 0xfd
 80008aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      data[1] = PAGE_1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80008b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2302      	movs	r3, #2
 80008c0:	21ea      	movs	r1, #234	@ 0xea
 80008c2:	483f      	ldr	r0, [pc, #252]	@ (80009c0 <LEDMatrix_FlashScreen+0x150>)
 80008c4:	f002 fd16 	bl	80032f4 <HAL_I2C_Master_Transmit>

      data[0] = MAT_ROW[r];
 80008c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80008cc:	4a3d      	ldr	r2, [pc, #244]	@ (80009c4 <LEDMatrix_FlashScreen+0x154>)
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      data[1] = 0x7F;
 80008d4:	237f      	movs	r3, #127	@ 0x7f
 80008d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80008da:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	21ea      	movs	r1, #234	@ 0xea
 80008e8:	4835      	ldr	r0, [pc, #212]	@ (80009c0 <LEDMatrix_FlashScreen+0x150>)
 80008ea:	f002 fd03 	bl	80032f4 <HAL_I2C_Master_Transmit>

      screenstatus[r] = 0x7F;
 80008ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80008f2:	4a35      	ldr	r2, [pc, #212]	@ (80009c8 <LEDMatrix_FlashScreen+0x158>)
 80008f4:	217f      	movs	r1, #127	@ 0x7f
 80008f6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t r = 0; r < 11; r++)
 80008f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80008fc:	3301      	adds	r3, #1
 80008fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000902:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d9ce      	bls.n	80008a8 <LEDMatrix_FlashScreen+0x38>
    }
    if (t < 3)
 800090a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090e:	2b02      	cmp	r3, #2
 8000910:	d830      	bhi.n	8000974 <LEDMatrix_FlashScreen+0x104>
    {
      __HAL_TIM_SET_AUTORELOAD(&htim3, notePeriods[t]);
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000916:	4a27      	ldr	r2, [pc, #156]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	3330      	adds	r3, #48	@ 0x30
 800091e:	443b      	add	r3, r7
 8000920:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000924:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	3330      	adds	r3, #48	@ 0x30
 800092e:	443b      	add	r3, r7
 8000930:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000934:	4a1f      	ldr	r2, [pc, #124]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 8000936:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, notePeriods[t] / 2);
 8000938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	3330      	adds	r3, #48	@ 0x30
 8000940:	443b      	add	r3, r7
 8000942:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	0852      	lsrs	r2, r2, #1
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800094e:	2100      	movs	r1, #0
 8000950:	4818      	ldr	r0, [pc, #96]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 8000952:	f003 fd71 	bl	8004438 <HAL_TIM_PWM_Start>
      HAL_Delay(noteDurations[t]);
 8000956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	3330      	adds	r3, #48	@ 0x30
 800095e:	443b      	add	r3, r7
 8000960:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 ffdd 	bl	8001924 <HAL_Delay>
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800096a:	2100      	movs	r1, #0
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 800096e:	f003 fe13 	bl	8004598 <HAL_TIM_PWM_Stop>
 8000972:	e001      	b.n	8000978 <LEDMatrix_FlashScreen+0x108>
      /*
       * If no LED-matrix–related beep is desired here,
       * you can either remove this call or implement beepBlocking()
       * in the appropriate module.
       */
      beepBlocking();
 8000974:	f000 f872 	bl	8000a5c <beepBlocking>
    }
    HAL_Delay(200);
 8000978:	20c8      	movs	r0, #200	@ 0xc8
 800097a:	f000 ffd3 	bl	8001924 <HAL_Delay>
    LEDMatrix_ClearScreen();
 800097e:	f7ff fe1d 	bl	80005bc <LEDMatrix_ClearScreen>
    HAL_Delay(200);
 8000982:	20c8      	movs	r0, #200	@ 0xc8
 8000984:	f000 ffce 	bl	8001924 <HAL_Delay>
  for (uint8_t t = 0; t < times; t++)
 8000988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098c:	3301      	adds	r3, #1
 800098e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000992:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	429a      	cmp	r2, r3
 800099a:	d381      	bcc.n	80008a0 <LEDMatrix_FlashScreen+0x30>
  }
  __HAL_TIM_SET_AUTORELOAD(&htim3, defaultPeriod);
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009a4:	4a03      	ldr	r2, [pc, #12]	@ (80009b4 <LEDMatrix_FlashScreen+0x144>)
 80009a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a8:	60d3      	str	r3, [r2, #12]
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	@ 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001cc 	.word	0x200001cc
 80009b8:	0800634c 	.word	0x0800634c
 80009bc:	08006358 	.word	0x08006358
 80009c0:	20000130 	.word	0x20000130
 80009c4:	08006394 	.word	0x08006394
 80009c8:	2000007c 	.word	0x2000007c

080009cc <beep>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void beep(uint32_t score)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if (!beepActive)
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <beep+0x84>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f083 0301 	eor.w	r3, r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d032      	beq.n	8000a48 <beep+0x7c>
  {
    beepActive = true;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <beep+0x84>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
    beepStartTick = HAL_GetTick();
 80009e8:	f000 ff90 	bl	800190c <HAL_GetTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <beep+0x88>)
 80009f0:	6013      	str	r3, [r2, #0]

    // Calculate tone period based on score (lower period means higher pitch)
    uint32_t basePeriod = 3000; // Start with a low tone
 80009f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80009f6:	613b      	str	r3, [r7, #16]
    uint32_t decrement  = 50;
 80009f8:	2332      	movs	r3, #50	@ 0x32
 80009fa:	60fb      	str	r3, [r7, #12]
    uint32_t minPeriod  = 300;  // Clamp to a high tone at minimum period
 80009fc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a00:	60bb      	str	r3, [r7, #8]
    uint32_t tonePeriod;

    if (score * decrement < (basePeriod - minPeriod))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	fb03 f202 	mul.w	r2, r3, r2
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <beep+0x58>
    {
      tonePeriod = basePeriod - score * decrement;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e001      	b.n	8000a28 <beep+0x5c>
    }
    else
    {
      tonePeriod = minPeriod;
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	617b      	str	r3, [r7, #20]
    }

    __HAL_TIM_SET_AUTORELOAD(&htim3, tonePeriod);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <beep+0x8c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a30:	4a09      	ldr	r2, [pc, #36]	@ (8000a58 <beep+0x8c>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, tonePeriod / 2);
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <beep+0x8c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	0852      	lsrs	r2, r2, #1
 8000a3e:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <beep+0x8c>)
 8000a44:	f003 fcf8 	bl	8004438 <HAL_TIM_PWM_Start>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000288 	.word	0x20000288
 8000a54:	2000028c 	.word	0x2000028c
 8000a58:	200001cc 	.word	0x200001cc

08000a5c <beepBlocking>:

void beepBlocking(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period / 2);
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <beepBlocking+0x2c>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <beepBlocking+0x2c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	0852      	lsrs	r2, r2, #1
 8000a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <beepBlocking+0x2c>)
 8000a70:	f003 fce2 	bl	8004438 <HAL_TIM_PWM_Start>
  HAL_Delay(300);
 8000a74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a78:	f000 ff54 	bl	8001924 <HAL_Delay>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <beepBlocking+0x2c>)
 8000a80:	f003 fd8a 	bl	8004598 <HAL_TIM_PWM_Stop>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200001cc 	.word	0x200001cc

08000a8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a9c:	d10e      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x30>
  {
    // Toggle the pause flag when B1 is pressed.
    paused = !paused;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000aba:	701a      	strb	r2, [r3, #0]
  }
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20000290 	.word	0x20000290

08000acc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d107      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x22>
  {
    Xaxis = rawValues[0];
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ae0:	881a      	ldrh	r2, [r3, #0]
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ae4:	801a      	strh	r2, [r3, #0]
    Yaxis = rawValues[1];
 8000ae6:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ae8:	885a      	ldrh	r2, [r3, #2]
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000aec:	801a      	strh	r2, [r3, #0]
    // Uncomment below lines to debug joystick values via UART:
    // sprintf(msg, "X: %hu, Y: %hu\r\n", Xaxis, Yaxis);
    // HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
  }
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000025c 	.word	0x2000025c
 8000b00:	20000258 	.word	0x20000258
 8000b04:	2000025a 	.word	0x2000025a

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset all peripherals, initialize the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fe97 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */
  // (Additional initialization before system clock configuration)
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f98b 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // (Additional system initialization)
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 fb75 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1a:	f000 fb53 	bl	80011c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b1e:	f000 fb27 	bl	8001170 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b22:	f000 f9ef 	bl	8000f04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b26:	f000 fa7b 	bl	8001020 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b2a:	f000 fa4b 	bl	8000fc4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b2e:	f000 fac5 	bl	80010bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rawValues, 2);
 8000b32:	2202      	movs	r2, #2
 8000b34:	49aa      	ldr	r1, [pc, #680]	@ (8000de0 <main+0x2d8>)
 8000b36:	48ab      	ldr	r0, [pc, #684]	@ (8000de4 <main+0x2dc>)
 8000b38:	f001 f86c 	bl	8001c14 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b3c:	48aa      	ldr	r0, [pc, #680]	@ (8000de8 <main+0x2e0>)
 8000b3e:	f003 fbc9 	bl	80042d4 <HAL_TIM_Base_Start_IT>
  LEDMatrix_TurnOn();
 8000b42:	f7ff fd73 	bl	800062c <LEDMatrix_TurnOn>

  /* Game variables for paddle and falling object */
  uint8_t paddlePos = 3;
 8000b46:	2303      	movs	r3, #3
 8000b48:	73fb      	strb	r3, [r7, #15]
  uint8_t fallRow   = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73bb      	strb	r3, [r7, #14]
  uint8_t fallCol   = 3;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	737b      	strb	r3, [r7, #13]
  uint32_t scoreLocal = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]

  /* Joystick thresholds */
  const uint16_t thresholdRight = 2500;
 8000b56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000b5a:	80bb      	strh	r3, [r7, #4]
  const uint16_t thresholdLeft  = 1500;
 8000b5c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b60:	807b      	strh	r3, [r7, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* --- PB5 Button Polling --- */
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET)
 8000b62:	2120      	movs	r1, #32
 8000b64:	48a1      	ldr	r0, [pc, #644]	@ (8000dec <main+0x2e4>)
 8000b66:	f002 fa1d 	bl	8002fa4 <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d156      	bne.n	8000c1e <main+0x116>
    {
      if (!pb5_pressed_flag)
 8000b70:	4b9f      	ldr	r3, [pc, #636]	@ (8000df0 <main+0x2e8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <main+0x8e>
      {
        // Button pressed down for the first time.
        pb5_press_time = HAL_GetTick();
 8000b7e:	f000 fec5 	bl	800190c <HAL_GetTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a9b      	ldr	r2, [pc, #620]	@ (8000df4 <main+0x2ec>)
 8000b86:	6013      	str	r3, [r2, #0]
        pb5_pressed_flag = true;
 8000b88:	4b99      	ldr	r3, [pc, #612]	@ (8000df0 <main+0x2e8>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
        pb5_long_press_executed = false;
 8000b8e:	4b9a      	ldr	r3, [pc, #616]	@ (8000df8 <main+0x2f0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e05e      	b.n	8000c54 <main+0x14c>
      }
      else
      {
        // Button is still pressed.
        if (!pb5_long_press_executed &&
 8000b96:	4b98      	ldr	r3, [pc, #608]	@ (8000df8 <main+0x2f0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d057      	beq.n	8000c54 <main+0x14c>
            (HAL_GetTick() - pb5_press_time >= LONG_PRESS_THRESHOLD))
 8000ba4:	f000 feb2 	bl	800190c <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b92      	ldr	r3, [pc, #584]	@ (8000df4 <main+0x2ec>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1ad3      	subs	r3, r2, r3
        if (!pb5_long_press_executed &&
 8000bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bb4:	d34e      	bcc.n	8000c54 <main+0x14c>
        {
          // Long press detected: run game-over sequence.
          sprintf(msg, "Game Over! Final Score: %lu\r\n", scoreLocal);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4990      	ldr	r1, [pc, #576]	@ (8000dfc <main+0x2f4>)
 8000bba:	4891      	ldr	r0, [pc, #580]	@ (8000e00 <main+0x2f8>)
 8000bbc:	f004 ff1a 	bl	80059f4 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000bc0:	488f      	ldr	r0, [pc, #572]	@ (8000e00 <main+0x2f8>)
 8000bc2:	f7ff fb0d 	bl	80001e0 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	498c      	ldr	r1, [pc, #560]	@ (8000e00 <main+0x2f8>)
 8000bd0:	488c      	ldr	r0, [pc, #560]	@ (8000e04 <main+0x2fc>)
 8000bd2:	f004 fb9a 	bl	800530a <HAL_UART_Transmit>
          LEDMatrix_FlashScreen(3);
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f7ff fe4a 	bl	8000870 <LEDMatrix_FlashScreen>
          LEDMatrix_DisplayScore(scoreLocal);
 8000bdc:	68b8      	ldr	r0, [r7, #8]
 8000bde:	f7ff fe05 	bl	80007ec <LEDMatrix_DisplayScore>
          HAL_Delay(2000);
 8000be2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000be6:	f000 fe9d 	bl	8001924 <HAL_Delay>

          // Reset game variables.
          scoreLocal = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
          gameDelay = 150;
 8000bee:	4b86      	ldr	r3, [pc, #536]	@ (8000e08 <main+0x300>)
 8000bf0:	2296      	movs	r2, #150	@ 0x96
 8000bf2:	601a      	str	r2, [r3, #0]
          fallRow = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73bb      	strb	r3, [r7, #14]
          fallCol = (fallCol + 2) % 7;
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	1c9a      	adds	r2, r3, #2
 8000bfc:	4b83      	ldr	r3, [pc, #524]	@ (8000e0c <main+0x304>)
 8000bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000c02:	4413      	add	r3, r2
 8000c04:	1099      	asrs	r1, r3, #2
 8000c06:	17d3      	asrs	r3, r2, #31
 8000c08:	1ac9      	subs	r1, r1, r3
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	1a5b      	subs	r3, r3, r1
 8000c10:	1ad1      	subs	r1, r2, r3
 8000c12:	460b      	mov	r3, r1
 8000c14:	737b      	strb	r3, [r7, #13]
          pb5_long_press_executed = true;
 8000c16:	4b78      	ldr	r3, [pc, #480]	@ (8000df8 <main+0x2f0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e01a      	b.n	8000c54 <main+0x14c>
      }
    }
    else
    {
      // Button released.
      if (pb5_pressed_flag)
 8000c1e:	4b74      	ldr	r3, [pc, #464]	@ (8000df0 <main+0x2e8>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d016      	beq.n	8000c54 <main+0x14c>
      {
        // If button was released before the long-press threshold, it's a short press.
        if (!pb5_long_press_executed)
 8000c26:	4b74      	ldr	r3, [pc, #464]	@ (8000df8 <main+0x2f0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f083 0301 	eor.w	r3, r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <main+0x140>
        {
          if (gameDelay > minDelay)
 8000c34:	4b74      	ldr	r3, [pc, #464]	@ (8000e08 <main+0x300>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2232      	movs	r2, #50	@ 0x32
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d904      	bls.n	8000c48 <main+0x140>
          {
            gameDelay -= 10;
 8000c3e:	4b72      	ldr	r3, [pc, #456]	@ (8000e08 <main+0x300>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3b0a      	subs	r3, #10
 8000c44:	4a70      	ldr	r2, [pc, #448]	@ (8000e08 <main+0x300>)
 8000c46:	6013      	str	r3, [r2, #0]
          }
        }
        pb5_pressed_flag = false;
 8000c48:	4b69      	ldr	r3, [pc, #420]	@ (8000df0 <main+0x2e8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
        pb5_long_press_executed = false;
 8000c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000df8 <main+0x2f0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
      }
    }

    if (!paused)
 8000c54:	4b6e      	ldr	r3, [pc, #440]	@ (8000e10 <main+0x308>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 809f 	beq.w	8000da2 <main+0x29a>
    {
      LEDMatrix_ClearScreen();
 8000c64:	f7ff fcaa 	bl	80005bc <LEDMatrix_ClearScreen>

      if (Yaxis > thresholdRight && paddlePos > 0)
 8000c68:	4b6a      	ldr	r3, [pc, #424]	@ (8000e14 <main+0x30c>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d206      	bcs.n	8000c80 <main+0x178>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <main+0x178>
      {
        paddlePos--;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e00a      	b.n	8000c96 <main+0x18e>
      }
      else if (Yaxis < thresholdLeft && paddlePos < 6)
 8000c80:	4b64      	ldr	r3, [pc, #400]	@ (8000e14 <main+0x30c>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	887a      	ldrh	r2, [r7, #2]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d905      	bls.n	8000c96 <main+0x18e>
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	d802      	bhi.n	8000c96 <main+0x18e>
      {
        paddlePos++;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	3301      	adds	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
      }
      LEDMatrix_DrawPaddle(paddlePos);
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd2b 	bl	80006f4 <LEDMatrix_DrawPaddle>
      LEDMatrix_AddPixel(fallRow, fallCol);
 8000c9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fce5 	bl	8000674 <LEDMatrix_AddPixel>
      HAL_Delay(gameDelay);
 8000caa:	4b57      	ldr	r3, [pc, #348]	@ (8000e08 <main+0x300>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fe38 	bl	8001924 <HAL_Delay>

      if (fallRow < 10)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b09      	cmp	r3, #9
 8000cb8:	d803      	bhi.n	8000cc2 <main+0x1ba>
      {
        fallRow++;
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73bb      	strb	r3, [r7, #14]
 8000cc0:	e076      	b.n	8000db0 <main+0x2a8>
      }
      else
      {
        uint8_t catchStart, catchEnd;
        if (paddlePos == 0)
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <main+0x1ca>
        {
          catchStart = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71fb      	strb	r3, [r7, #7]
          catchEnd   = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	71bb      	strb	r3, [r7, #6]
 8000cd0:	e00d      	b.n	8000cee <main+0x1e6>
        }
        else if (paddlePos >= 6)
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	d904      	bls.n	8000ce2 <main+0x1da>
        {
          catchStart = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	71fb      	strb	r3, [r7, #7]
          catchEnd   = 6;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	71bb      	strb	r3, [r7, #6]
 8000ce0:	e005      	b.n	8000cee <main+0x1e6>
        }
        else
        {
          catchStart = paddlePos - 1;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	71fb      	strb	r3, [r7, #7]
          catchEnd   = paddlePos + 1;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3301      	adds	r3, #1
 8000cec:	71bb      	strb	r3, [r7, #6]
        }

        if (fallCol >= catchStart && fallCol <= catchEnd)
 8000cee:	7b7a      	ldrb	r2, [r7, #13]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d324      	bcc.n	8000d40 <main+0x238>
 8000cf6:	7b7a      	ldrb	r2, [r7, #13]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d820      	bhi.n	8000d40 <main+0x238>
        {
          beep(scoreLocal);
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f7ff fe64 	bl	80009cc <beep>
          scoreLocal++;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
          sprintf(msg, "Score: %lu\r\n", scoreLocal);
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4942      	ldr	r1, [pc, #264]	@ (8000e18 <main+0x310>)
 8000d0e:	483c      	ldr	r0, [pc, #240]	@ (8000e00 <main+0x2f8>)
 8000d10:	f004 fe70 	bl	80059f4 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d14:	483a      	ldr	r0, [pc, #232]	@ (8000e00 <main+0x2f8>)
 8000d16:	f7ff fa63 	bl	80001e0 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	4937      	ldr	r1, [pc, #220]	@ (8000e00 <main+0x2f8>)
 8000d24:	4837      	ldr	r0, [pc, #220]	@ (8000e04 <main+0x2fc>)
 8000d26:	f004 faf0 	bl	800530a <HAL_UART_Transmit>
          if (gameDelay > minDelay)
 8000d2a:	4b37      	ldr	r3, [pc, #220]	@ (8000e08 <main+0x300>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2232      	movs	r2, #50	@ 0x32
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d924      	bls.n	8000d7e <main+0x276>
          {
            gameDelay -= 10;
 8000d34:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <main+0x300>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b0a      	subs	r3, #10
 8000d3a:	4a33      	ldr	r2, [pc, #204]	@ (8000e08 <main+0x300>)
 8000d3c:	6013      	str	r3, [r2, #0]
          if (gameDelay > minDelay)
 8000d3e:	e01e      	b.n	8000d7e <main+0x276>
          }
        }
        else
        {
          sprintf(msg, "Game Over! Final Score: %lu\r\n", scoreLocal);
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	492e      	ldr	r1, [pc, #184]	@ (8000dfc <main+0x2f4>)
 8000d44:	482e      	ldr	r0, [pc, #184]	@ (8000e00 <main+0x2f8>)
 8000d46:	f004 fe55 	bl	80059f4 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000d4a:	482d      	ldr	r0, [pc, #180]	@ (8000e00 <main+0x2f8>)
 8000d4c:	f7ff fa48 	bl	80001e0 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	4929      	ldr	r1, [pc, #164]	@ (8000e00 <main+0x2f8>)
 8000d5a:	482a      	ldr	r0, [pc, #168]	@ (8000e04 <main+0x2fc>)
 8000d5c:	f004 fad5 	bl	800530a <HAL_UART_Transmit>
          LEDMatrix_FlashScreen(3);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f7ff fd85 	bl	8000870 <LEDMatrix_FlashScreen>
          LEDMatrix_DisplayScore(scoreLocal);
 8000d66:	68b8      	ldr	r0, [r7, #8]
 8000d68:	f7ff fd40 	bl	80007ec <LEDMatrix_DisplayScore>
          HAL_Delay(2000);
 8000d6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d70:	f000 fdd8 	bl	8001924 <HAL_Delay>
          scoreLocal = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
          gameDelay = 150;
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <main+0x300>)
 8000d7a:	2296      	movs	r2, #150	@ 0x96
 8000d7c:	601a      	str	r2, [r3, #0]
        }
        fallRow = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]
        fallCol = (fallCol + 2) % 7;
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	1c9a      	adds	r2, r3, #2
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <main+0x304>)
 8000d88:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	1099      	asrs	r1, r3, #2
 8000d90:	17d3      	asrs	r3, r2, #31
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	460b      	mov	r3, r1
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	737b      	strb	r3, [r7, #13]
 8000da0:	e006      	b.n	8000db0 <main+0x2a8>
      }
    }
    else
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000da2:	2120      	movs	r1, #32
 8000da4:	481d      	ldr	r0, [pc, #116]	@ (8000e1c <main+0x314>)
 8000da6:	f002 f92e 	bl	8003006 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8000daa:	20c8      	movs	r0, #200	@ 0xc8
 8000dac:	f000 fdba 	bl	8001924 <HAL_Delay>
    }

    if (beepActive && (HAL_GetTick() - beepStartTick >= beepDuration))
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <main+0x318>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f43f aed4 	beq.w	8000b62 <main+0x5a>
 8000dba:	f000 fda7 	bl	800190c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <main+0x31c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2264      	movs	r2, #100	@ 0x64
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	f4ff aeca 	bcc.w	8000b62 <main+0x5a>
    {
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <main+0x320>)
 8000dd2:	f003 fbe1 	bl	8004598 <HAL_TIM_PWM_Stop>
      beepActive = false;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <main+0x318>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET)
 8000ddc:	e6c1      	b.n	8000b62 <main+0x5a>
 8000dde:	bf00      	nop
 8000de0:	2000025c 	.word	0x2000025c
 8000de4:	20000088 	.word	0x20000088
 8000de8:	20000184 	.word	0x20000184
 8000dec:	40020400 	.word	0x40020400
 8000df0:	20000298 	.word	0x20000298
 8000df4:	20000294 	.word	0x20000294
 8000df8:	20000299 	.word	0x20000299
 8000dfc:	08006364 	.word	0x08006364
 8000e00:	20000260 	.word	0x20000260
 8000e04:	20000214 	.word	0x20000214
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	92492493 	.word	0x92492493
 8000e10:	20000290 	.word	0x20000290
 8000e14:	2000025a 	.word	0x2000025a
 8000e18:	08006384 	.word	0x08006384
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000288 	.word	0x20000288
 8000e24:	2000028c 	.word	0x2000028c
 8000e28:	200001cc 	.word	0x200001cc

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	@ 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2230      	movs	r2, #48	@ 0x30
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fdfc 	bl	8005a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e78:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e94:	2310      	movs	r3, #16
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ea8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fd24 	bl	8003904 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fa2d 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	60fb      	str	r3, [r7, #12]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 ff86 	bl	8003df4 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eee:	f000 fa17 	bl	8001320 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	@ 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f18:	4a28      	ldr	r2, [pc, #160]	@ (8000fbc <MX_ADC1_Init+0xb8>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f30:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f46:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc0 <MX_ADC1_Init+0xbc>)
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f64:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f66:	f000 fd01 	bl	800196c <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f9d6 	bl	8001320 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000f86:	f000 ff5d 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f90:	f000 f9c6 	bl	8001320 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_ADC1_Init+0xb4>)
 8000fa2:	f000 ff4f 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fac:	f000 f9b8 	bl	8001320 <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000088 	.word	0x20000088
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	0f000001 	.word	0x0f000001

08000fc4 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 234;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	22ea      	movs	r2, #234	@ 0xea
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f002 f833 	bl	800306c <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f988 	bl	8001320 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000130 	.word	0x20000130
 8001018:	40005400 	.word	0x40005400
 800101c:	00061a80 	.word	0x00061a80

08001020 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_TIM2_Init+0x94>)
 800103e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_TIM2_Init+0x94>)
 8001046:	220a      	movs	r2, #10
 8001048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_TIM2_Init+0x94>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000 - 1;
 8001050:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_TIM2_Init+0x94>)
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <MX_TIM2_Init+0x98>)
 8001054:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <MX_TIM2_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_TIM2_Init+0x94>)
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001062:	4814      	ldr	r0, [pc, #80]	@ (80010b4 <MX_TIM2_Init+0x94>)
 8001064:	f003 f8e6 	bl	8004234 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 f957 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_TIM2_Init+0x94>)
 8001080:	f003 fcb8 	bl	80049f4 <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f949 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800108e:	2320      	movs	r3, #32
 8001090:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_TIM2_Init+0x94>)
 800109c:	f004 f866 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010a6:	f000 f93b 	bl	8001320 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000184 	.word	0x20000184
 80010b8:	0001481f 	.word	0x0001481f

080010bc <MX_TIM3_Init>:
/**
  * @brief TIM3 Initialization Function
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_TIM3_Init+0xac>)
 80010e0:	4a22      	ldr	r2, [pc, #136]	@ (800116c <MX_TIM3_Init+0xb0>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_TIM3_Init+0xac>)
 80010e6:	2253      	movs	r2, #83	@ 0x53
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_TIM3_Init+0xac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_TIM3_Init+0xac>)
 80010f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_TIM3_Init+0xac>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_TIM3_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001104:	4818      	ldr	r0, [pc, #96]	@ (8001168 <MX_TIM3_Init+0xac>)
 8001106:	f003 f947 	bl	8004398 <HAL_TIM_PWM_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 f906 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4619      	mov	r1, r3
 8001122:	4811      	ldr	r0, [pc, #68]	@ (8001168 <MX_TIM3_Init+0xac>)
 8001124:	f004 f822 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800112e:	f000 f8f7 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001132:	2360      	movs	r3, #96	@ 0x60
 8001134:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	@ (8001168 <MX_TIM3_Init+0xac>)
 800114a:	f003 fb91 	bl	8004870 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001154:	f000 f8e4 	bl	8001320 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <MX_TIM3_Init+0xac>)
 800115a:	f000 fa1f 	bl	800159c <HAL_TIM_MspPostInit>
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	@ 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001cc 	.word	0x200001cc
 800116c:	40000400 	.word	0x40000400

08001170 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f004 f862 	bl	8005270 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f000 f8b5 	bl	8001320 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000214 	.word	0x20000214
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_DMA_Init>:
/**
  * @brief Enable DMA controller clock and configure interrupts.
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <MX_DMA_Init+0x3c>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2038      	movs	r0, #56	@ 0x38
 80011ec:	f001 f9af 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f0:	2038      	movs	r0, #56	@ 0x38
 80011f2:	f001 f9c8 	bl	8002586 <HAL_NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b3c      	ldr	r3, [pc, #240]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3b      	ldr	r2, [pc, #236]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b39      	ldr	r3, [pc, #228]	@ (8001310 <MX_GPIO_Init+0x10c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <MX_GPIO_Init+0x10c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a34      	ldr	r2, [pc, #208]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <MX_GPIO_Init+0x10c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <MX_GPIO_Init+0x10c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level for LD2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2120      	movs	r1, #32
 800128e:	4821      	ldr	r0, [pc, #132]	@ (8001314 <MX_GPIO_Init+0x110>)
 8001290:	f001 fea0 	bl	8002fd4 <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PC13 (B1 button) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	481b      	ldr	r0, [pc, #108]	@ (8001318 <MX_GPIO_Init+0x114>)
 80012ac:	f001 fcf6 	bl	8002c9c <HAL_GPIO_Init>

  /* Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b0:	2320      	movs	r3, #32
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4813      	ldr	r0, [pc, #76]	@ (8001314 <MX_GPIO_Init+0x110>)
 80012c8:	f001 fce8 	bl	8002c9c <HAL_GPIO_Init>

  /* Configure GPIO pin : PB5 (game control button) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012cc:	2320      	movs	r3, #32
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480e      	ldr	r0, [pc, #56]	@ (800131c <MX_GPIO_Init+0x118>)
 80012e2:	f001 fcdb 	bl	8002c9c <HAL_GPIO_Init>

  /* EXTI interrupt init */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2017      	movs	r0, #23
 80012ec:	f001 f92f 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f0:	2017      	movs	r0, #23
 80012f2:	f001 f948 	bl	8002586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2028      	movs	r0, #40	@ 0x28
 80012fc:	f001 f927 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001300:	2028      	movs	r0, #40	@ 0x28
 8001302:	f001 f940 	bl	8002586 <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	@ 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020800 	.word	0x40020800
 800131c:	40020400 	.word	0x40020400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  __disable_irq();
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a33      	ldr	r2, [pc, #204]	@ (8001468 <HAL_ADC_MspInit+0xec>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d15f      	bne.n	800145e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	4a31      	ldr	r2, [pc, #196]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a2a      	ldr	r2, [pc, #168]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_ADC_MspInit+0xf0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d6:	2303      	movs	r3, #3
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4821      	ldr	r0, [pc, #132]	@ (8001470 <HAL_ADC_MspInit+0xf4>)
 80013ea:	f001 fc57 	bl	8002c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 80013f0:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <HAL_ADC_MspInit+0xfc>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001408:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001410:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001414:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001424:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001432:	4810      	ldr	r0, [pc, #64]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001434:	f001 f8c2 	bl	80025bc <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800143e:	f7ff ff6f 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 8001446:	639a      	str	r2, [r3, #56]	@ 0x38
 8001448:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_ADC_MspInit+0xf8>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2101      	movs	r1, #1
 8001452:	2012      	movs	r0, #18
 8001454:	f001 f87b 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001458:	2012      	movs	r0, #18
 800145a:	f001 f894 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	@ 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012000 	.word	0x40012000
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	200000d0 	.word	0x200000d0
 8001478:	40026410 	.word	0x40026410

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_I2C_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <HAL_I2C_MspInit+0x8c>)
 80014d8:	f001 fbe0 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_I2C_MspInit+0x88>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800151c:	d115      	bne.n	800154a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_TIM_Base_MspInit+0x48>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_TIM_Base_MspInit+0x48>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_TIM_Base_MspInit+0x48>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201c      	movs	r0, #28
 8001540:	f001 f805 	bl	800254e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001544:	201c      	movs	r0, #28
 8001546:	f001 f81e 	bl	8002586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_TIM_PWM_MspInit+0x3c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10d      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_TIM_PWM_MspInit+0x40>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_TIM_PWM_MspInit+0x40>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <HAL_TIM_PWM_MspInit+0x40>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40000400 	.word	0x40000400
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_TIM_MspPostInit+0x68>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11d      	bne.n	80015fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_TIM_MspPostInit+0x6c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_TIM_MspPostInit+0x6c>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_TIM_MspPostInit+0x6c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015da:	2310      	movs	r3, #16
 80015dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <HAL_TIM_MspPostInit+0x70>)
 80015f6:	f001 fb51 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40000400 	.word	0x40000400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <HAL_UART_MspInit+0x84>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12b      	bne.n	800168a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_UART_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_UART_MspInit+0x88>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_UART_MspInit+0x88>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_UART_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_UART_MspInit+0x88>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_UART_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800166a:	230c      	movs	r3, #12
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800167a:	2307      	movs	r3, #7
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	@ (800169c <HAL_UART_MspInit+0x8c>)
 8001686:	f001 fb09 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40004400 	.word	0x40004400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <MemManage_Handler+0x4>

080016b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f6:	f000 f8f5 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <ADC_IRQHandler+0x10>)
 8001706:	f000 f974 	bl	80019f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000088 	.word	0x20000088

08001714 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001718:	2020      	movs	r0, #32
 800171a:	f001 fc8f 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <TIM2_IRQHandler+0x10>)
 800172a:	f002 ff99 	bl	8004660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000184 	.word	0x20000184

08001738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800173c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001740:	f001 fc7c 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA2_Stream0_IRQHandler+0x10>)
 800174e:	f001 f83b 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000d0 	.word	0x200000d0

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f004 f95c 	bl	8005a48 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20018000 	.word	0x20018000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	2000029c 	.word	0x2000029c
 80017c4:	200003f0 	.word	0x200003f0

080017c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f2:	490e      	ldr	r1, [pc, #56]	@ (800182c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001808:	4c0b      	ldr	r4, [pc, #44]	@ (8001838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001816:	f7ff ffd7 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f004 f91b 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7ff f973 	bl	8000b08 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001824:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001830:	080064a4 	.word	0x080064a4
  ldr r2, =_sbss
 8001834:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001838:	200003ec 	.word	0x200003ec

0800183c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <DMA1_Stream0_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 fe65 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fd5a 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fe7d 	bl	80025a2 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 fe45 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000004 	.word	0x20000004
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	2000000c 	.word	0x2000000c
 8001908:	200002a0 	.word	0x200002a0

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200002a0 	.word	0x200002a0

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000000c 	.word	0x2000000c

0800196c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e033      	b.n	80019ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fcf6 	bl	800137c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d118      	bne.n	80019dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019b2:	f023 0302 	bic.w	r3, r3, #2
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fb62 	bl	8002088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019da:	e001      	b.n	80019e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d049      	beq.n	8001abc <HAL_ADC_IRQHandler+0xca>
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d046      	beq.n	8001abc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d12b      	bne.n	8001aac <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d127      	bne.n	8001aac <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d119      	bne.n	8001aac <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0220 	bic.w	r2, r2, #32
 8001a86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f9a1 	bl	8001df4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0212 	mvn.w	r2, #18
 8001aba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d057      	beq.n	8001b82 <HAL_ADC_IRQHandler+0x190>
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d054      	beq.n	8001b82 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d139      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b04:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d12b      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d124      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11d      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b4c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fc06 	bl	8002384 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 020c 	mvn.w	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b90:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d017      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0x1d6>
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d014      	beq.n	8001bc8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10d      	bne.n	8001bc8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f92f 	bl	8001e1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0201 	mvn.w	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bd6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x218>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d012      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0220 	mvn.w	r2, #32
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f918 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0220 	mvn.w	r2, #32
 8001c08:	601a      	str	r2, [r3, #0]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Start_DMA+0x1e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0ce      	b.n	8001dd0 <HAL_ADC_Start_DMA+0x1bc>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d018      	beq.n	8001c7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <HAL_ADC_Start_DMA+0x1c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8001ddc <HAL_ADC_Start_DMA+0x1c8>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9a      	lsrs	r2, r3, #18
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c88:	d107      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f040 8086 	bne.w	8001db6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cd4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f023 0206 	bic.w	r2, r3, #6
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cf6:	e002      	b.n	8001cfe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d06:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_ADC_Start_DMA+0x1cc>)
 8001d08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0e:	4a35      	ldr	r2, [pc, #212]	@ (8001de4 <HAL_ADC_Start_DMA+0x1d0>)
 8001d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d16:	4a34      	ldr	r2, [pc, #208]	@ (8001de8 <HAL_ADC_Start_DMA+0x1d4>)
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1e:	4a33      	ldr	r2, [pc, #204]	@ (8001dec <HAL_ADC_Start_DMA+0x1d8>)
 8001d20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	334c      	adds	r3, #76	@ 0x4c
 8001d56:	4619      	mov	r1, r3
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f000 fcdc 	bl	8002718 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d129      	bne.n	8001dce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	e020      	b.n	8001dce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <HAL_ADC_Start_DMA+0x1dc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11b      	bne.n	8001dce <HAL_ADC_Start_DMA+0x1ba>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d114      	bne.n	8001dce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	e00b      	b.n	8001dce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	431bde83 	.word	0x431bde83
 8001de0:	40012300 	.word	0x40012300
 8001de4:	08002281 	.word	0x08002281
 8001de8:	0800233b 	.word	0x0800233b
 8001dec:	08002357 	.word	0x08002357
 8001df0:	40012000 	.word	0x40012000

08001df4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x1c>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e105      	b.n	800206c <HAL_ADC_ConfigChannel+0x228>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d925      	bls.n	8001ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68d9      	ldr	r1, [r3, #12]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1e      	subs	r3, #30
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	400a      	ands	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4403      	add	r3, r0
 8001eae:	3b1e      	subs	r3, #30
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	e022      	b.n	8001f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6919      	ldr	r1, [r3, #16]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	400a      	ands	r2, r1
 8001ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4403      	add	r3, r0
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d824      	bhi.n	8001f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b05      	subs	r3, #5
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b05      	subs	r3, #5
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f52:	e04c      	b.n	8001fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d824      	bhi.n	8001fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b23      	subs	r3, #35	@ 0x23
 8001f6e:	221f      	movs	r2, #31
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43da      	mvns	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b23      	subs	r3, #35	@ 0x23
 8001f98:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fa4:	e023      	b.n	8001fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b41      	subs	r3, #65	@ 0x41
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b41      	subs	r3, #65	@ 0x41
 8001fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fee:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <HAL_ADC_ConfigChannel+0x234>)
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a21      	ldr	r2, [pc, #132]	@ (800207c <HAL_ADC_ConfigChannel+0x238>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1cc>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b12      	cmp	r3, #18
 8002002:	d105      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <HAL_ADC_ConfigChannel+0x238>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d123      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x21e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d003      	beq.n	800202a <HAL_ADC_ConfigChannel+0x1e6>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b11      	cmp	r3, #17
 8002028:	d11b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b10      	cmp	r3, #16
 800203c:	d111      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_ADC_ConfigChannel+0x23c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a10      	ldr	r2, [pc, #64]	@ (8002084 <HAL_ADC_ConfigChannel+0x240>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	0c9a      	lsrs	r2, r3, #18
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002054:	e002      	b.n	800205c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3b01      	subs	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012300 	.word	0x40012300
 800207c:	40012000 	.word	0x40012000
 8002080:	20000004 	.word	0x20000004
 8002084:	431bde83 	.word	0x431bde83

08002088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002090:	4b79      	ldr	r3, [pc, #484]	@ (8002278 <ADC_Init+0x1f0>)
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	021a      	lsls	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	4a58      	ldr	r2, [pc, #352]	@ (800227c <ADC_Init+0x1f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800212e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e00f      	b.n	8002186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0202 	bic.w	r2, r2, #2
 8002194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e1b      	ldrb	r3, [r3, #24]
 80021a0:	005a      	lsls	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	3b01      	subs	r3, #1
 80021e0:	035a      	lsls	r2, r3, #13
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	e007      	b.n	80021fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800220a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	3b01      	subs	r3, #1
 8002218:	051a      	lsls	r2, r3, #20
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800223e:	025a      	lsls	r2, r3, #9
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	029a      	lsls	r2, r3, #10
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40012300 	.word	0x40012300
 800227c:	0f000001 	.word	0x0f000001

08002280 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002296:	2b00      	cmp	r3, #0
 8002298:	d13c      	bne.n	8002314 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12b      	bne.n	800230c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d127      	bne.n	800230c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d119      	bne.n	800230c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0220 	bic.w	r2, r2, #32
 80022e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fd71 	bl	8001df4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002312:	e00e      	b.n	8002332 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fd85 	bl	8001e30 <HAL_ADC_ErrorCallback>
}
 8002326:	e004      	b.n	8002332 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002346:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff fd5d 	bl	8001e08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002362:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2240      	movs	r2, #64	@ 0x40
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff fd5a 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4907      	ldr	r1, [pc, #28]	@ (8002434 <__NVIC_EnableIRQ+0x38>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	@ 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff29 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff3e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff f9a0 	bl	800190c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e099      	b.n	800270c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f8:	e00f      	b.n	800261a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025fa:	f7ff f987 	bl	800190c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b05      	cmp	r3, #5
 8002606:	d908      	bls.n	800261a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e078      	b.n	800270c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e8      	bne.n	80025fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <HAL_DMA_Init+0x158>)
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002670:	2b04      	cmp	r3, #4
 8002672:	d107      	bne.n	8002684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	4313      	orrs	r3, r2
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d117      	bne.n	80026de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa6f 	bl	8002ba4 <DMA_CheckFifoParam>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026da:	2301      	movs	r3, #1
 80026dc:	e016      	b.n	800270c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa26 	bl	8002b38 <DMA_CalcBaseAndBitshift>
 80026ec:	4603      	mov	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	223f      	movs	r2, #63	@ 0x3f
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	f010803f 	.word	0xf010803f

08002718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_DMA_Start_IT+0x26>
 800273a:	2302      	movs	r3, #2
 800273c:	e040      	b.n	80027c0 <HAL_DMA_Start_IT+0xa8>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12f      	bne.n	80027b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f9b8 	bl	8002adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	223f      	movs	r2, #63	@ 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0216 	orr.w	r2, r2, #22
 8002786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e005      	b.n	80027be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a10 <HAL_DMA_IRQHandler+0x248>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002a14 <HAL_DMA_IRQHandler+0x24c>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2208      	movs	r2, #8
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002820:	2208      	movs	r2, #8
 8002822:	409a      	lsls	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2204      	movs	r2, #4
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2210      	movs	r2, #16
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d043      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03c      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2210      	movs	r2, #16
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d018      	beq.n	800290a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d024      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e01f      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
 8002908:	e016      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0208 	bic.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2220      	movs	r2, #32
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 808f 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8087 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	2220      	movs	r2, #32
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b05      	cmp	r3, #5
 8002970:	d136      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0216 	bic.w	r2, r2, #22
 8002980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x1da>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d07e      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
        }
        return;
 80029de:	e079      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e02c      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
 8002a0e:	bf00      	nop
 8002a10:	20000004 	.word	0x20000004
 8002a14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e01e      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0210 	bic.w	r2, r2, #16
 8002a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d032      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d307      	bcc.n	8002ab0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f2      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x2cc>
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ab0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e000      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad4:	bf00      	nop
    }
  }
}
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b40      	cmp	r3, #64	@ 0x40
 8002b08:	d108      	bne.n	8002b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b1a:	e007      	b.n	8002b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3b10      	subs	r3, #16
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <DMA_CalcBaseAndBitshift+0x64>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d909      	bls.n	8002b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	1d1a      	adds	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b78:	e007      	b.n	8002b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	aaaaaaab 	.word	0xaaaaaaab
 8002ba0:	08006458 	.word	0x08006458

08002ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11f      	bne.n	8002bfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d856      	bhi.n	8002c72 <DMA_CheckFifoParam+0xce>
 8002bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <DMA_CheckFifoParam+0x28>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002bef 	.word	0x08002bef
 8002bd4:	08002bdd 	.word	0x08002bdd
 8002bd8:	08002c73 	.word	0x08002c73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d046      	beq.n	8002c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e043      	b.n	8002c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bf6:	d140      	bne.n	8002c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e03d      	b.n	8002c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c06:	d121      	bne.n	8002c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d837      	bhi.n	8002c7e <DMA_CheckFifoParam+0xda>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <DMA_CheckFifoParam+0x70>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c2b 	.word	0x08002c2b
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002c3d 	.word	0x08002c3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e030      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d025      	beq.n	8002c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3a:	e022      	b.n	8002c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c44:	d11f      	bne.n	8002c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c4a:	e01c      	b.n	8002c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d903      	bls.n	8002c5a <DMA_CheckFifoParam+0xb6>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d003      	beq.n	8002c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c58:	e018      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5e:	e015      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e00b      	b.n	8002c8a <DMA_CheckFifoParam+0xe6>
      break;
 8002c72:	bf00      	nop
 8002c74:	e00a      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e008      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e006      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e004      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	e159      	b.n	8002f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8148 	bne.w	8002f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d005      	beq.n	8002cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d130      	bne.n	8002d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 0201 	and.w	r2, r3, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d017      	beq.n	8002d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d123      	bne.n	8002de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	220f      	movs	r2, #15
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0203 	and.w	r2, r3, #3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a2 	beq.w	8002f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b57      	ldr	r3, [pc, #348]	@ (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a56      	ldr	r2, [pc, #344]	@ (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b54      	ldr	r3, [pc, #336]	@ (8002f84 <HAL_GPIO_Init+0x2e8>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3e:	4a52      	ldr	r2, [pc, #328]	@ (8002f88 <HAL_GPIO_Init+0x2ec>)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a49      	ldr	r2, [pc, #292]	@ (8002f8c <HAL_GPIO_Init+0x2f0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_Init+0x202>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	@ (8002f90 <HAL_GPIO_Init+0x2f4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_Init+0x1fe>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a47      	ldr	r2, [pc, #284]	@ (8002f94 <HAL_GPIO_Init+0x2f8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_Init+0x1fa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a46      	ldr	r2, [pc, #280]	@ (8002f98 <HAL_GPIO_Init+0x2fc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_Init+0x1f6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a45      	ldr	r2, [pc, #276]	@ (8002f9c <HAL_GPIO_Init+0x300>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_Init+0x1f2>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	@ (8002f88 <HAL_GPIO_Init+0x2ec>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f aea2 	bls.w	8002cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e001      	b.n	8002fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003018:	887a      	ldrh	r2, [r7, #2]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4013      	ands	r3, r2
 800301e:	041a      	lsls	r2, r3, #16
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	43d9      	mvns	r1, r3
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	400b      	ands	r3, r1
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fd16 	bl	8000a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e12b      	b.n	80032d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f9f2 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d0:	f001 f888 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80030d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a81      	ldr	r2, [pc, #516]	@ (80032e0 <HAL_I2C_Init+0x274>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d807      	bhi.n	80030f0 <HAL_I2C_Init+0x84>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a80      	ldr	r2, [pc, #512]	@ (80032e4 <HAL_I2C_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e006      	b.n	80030fe <HAL_I2C_Init+0x92>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a7d      	ldr	r2, [pc, #500]	@ (80032e8 <HAL_I2C_Init+0x27c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0e7      	b.n	80032d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a78      	ldr	r2, [pc, #480]	@ (80032ec <HAL_I2C_Init+0x280>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_I2C_Init+0x274>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d802      	bhi.n	8003140 <HAL_I2C_Init+0xd4>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3301      	adds	r3, #1
 800313e:	e009      	b.n	8003154 <HAL_I2C_Init+0xe8>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	4a69      	ldr	r2, [pc, #420]	@ (80032f0 <HAL_I2C_Init+0x284>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	3301      	adds	r3, #1
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	495c      	ldr	r1, [pc, #368]	@ (80032e0 <HAL_I2C_Init+0x274>)
 8003170:	428b      	cmp	r3, r1
 8003172:	d819      	bhi.n	80031a8 <HAL_I2C_Init+0x13c>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e59      	subs	r1, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003188:	400b      	ands	r3, r1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_I2C_Init+0x138>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e59      	subs	r1, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	e051      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 80031a4:	2304      	movs	r3, #4
 80031a6:	e04f      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d111      	bne.n	80031d4 <HAL_I2C_Init+0x168>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e58      	subs	r0, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e012      	b.n	80031fa <HAL_I2C_Init+0x18e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	0099      	lsls	r1, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Init+0x196>
 80031fe:	2301      	movs	r3, #1
 8003200:	e022      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10e      	bne.n	8003228 <HAL_I2C_Init+0x1bc>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e58      	subs	r0, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	440b      	add	r3, r1
 8003218:	fbb0 f3f3 	udiv	r3, r0, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003226:	e00f      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	6809      	ldr	r1, [r1, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6911      	ldr	r1, [r2, #16]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	000186a0 	.word	0x000186a0
 80032e4:	001e847f 	.word	0x001e847f
 80032e8:	003d08ff 	.word	0x003d08ff
 80032ec:	431bde83 	.word	0x431bde83
 80032f0:	10624dd3 	.word	0x10624dd3

080032f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	461a      	mov	r2, r3
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
 8003304:	4613      	mov	r3, r2
 8003306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7fe fb00 	bl	800190c <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 80e0 	bne.w	80034dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2319      	movs	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	4970      	ldr	r1, [pc, #448]	@ (80034e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f964 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003332:	2302      	movs	r3, #2
 8003334:	e0d3      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_I2C_Master_Transmit+0x50>
 8003340:	2302      	movs	r3, #2
 8003342:	e0cc      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d007      	beq.n	800336a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2221      	movs	r2, #33	@ 0x21
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2210      	movs	r2, #16
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a50      	ldr	r2, [pc, #320]	@ (80034ec <HAL_I2C_Master_Transmit+0x1f8>)
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f89c 	bl	80034f0 <I2C_MasterRequestWrite>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e08d      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033d8:	e066      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f9de 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d107      	bne.n	8003402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d11b      	bne.n	800347c <HAL_I2C_Master_Transmit+0x188>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6a39      	ldr	r1, [r7, #32]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f9ce 	bl	8003822 <I2C_WaitOnBTFFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	2b04      	cmp	r3, #4
 8003492:	d107      	bne.n	80034a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01a      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d194      	bne.n	80033da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00100002 	.word	0x00100002
 80034ec:	ffff0000 	.word	0xffff0000

080034f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d006      	beq.n	800351a <I2C_MasterRequestWrite+0x2a>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <I2C_MasterRequestWrite+0x2a>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003518:	d108      	bne.n	800352c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00b      	b.n	8003544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	2b12      	cmp	r3, #18
 8003532:	d107      	bne.n	8003544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f84f 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356a:	d103      	bne.n	8003574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e035      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003580:	d108      	bne.n	8003594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	e01b      	b.n	80035cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	11db      	asrs	r3, r3, #7
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0306 	and.w	r3, r3, #6
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f063 030f 	orn	r3, r3, #15
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	490e      	ldr	r1, [pc, #56]	@ (80035ec <I2C_MasterRequestWrite+0xfc>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f875 	bl	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e010      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <I2C_MasterRequestWrite+0x100>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f865 	bl	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	00010008 	.word	0x00010008
 80035f0:	00010002 	.word	0x00010002

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e025      	b.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe f97d 	bl	800190c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e023      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10d      	bne.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x84>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	e00c      	b.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	429a      	cmp	r2, r3
 8003696:	d0b6      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b0:	e051      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c0:	d123      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e046      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d021      	beq.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fe f8fb 	bl	800190c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e020      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d18d      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f878 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e02d      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe f8a1 	bl	800190c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d1ca      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f837 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e02d      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d021      	beq.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7fe f860 	bl	800190c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d1ca      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ba:	d11b      	bne.n	80038f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e267      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d075      	beq.n	8003a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003922:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b04      	cmp	r3, #4
 800392c:	d00c      	beq.n	8003948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b85      	ldr	r3, [pc, #532]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003936:	2b08      	cmp	r3, #8
 8003938:	d112      	bne.n	8003960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b82      	ldr	r3, [pc, #520]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003946:	d10b      	bne.n	8003960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	4b7e      	ldr	r3, [pc, #504]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05b      	beq.n	8003a0c <HAL_RCC_OscConfig+0x108>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d157      	bne.n	8003a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e242      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003968:	d106      	bne.n	8003978 <HAL_RCC_OscConfig+0x74>
 800396a:	4b76      	ldr	r3, [pc, #472]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a75      	ldr	r2, [pc, #468]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e01d      	b.n	80039b4 <HAL_RCC_OscConfig+0xb0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x98>
 8003982:	4b70      	ldr	r3, [pc, #448]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6f      	ldr	r2, [pc, #444]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6c      	ldr	r2, [pc, #432]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0xb0>
 800399c:	4b69      	ldr	r3, [pc, #420]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a68      	ldr	r2, [pc, #416]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b66      	ldr	r3, [pc, #408]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a65      	ldr	r2, [pc, #404]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd ffa6 	bl	800190c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fd ffa2 	bl	800190c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	@ 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e207      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0xc0>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd ff92 	bl	800190c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fd ff8e 	bl	800190c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1f3      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fe:	4b51      	ldr	r3, [pc, #324]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0xe8>
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d063      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d11c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b44      	ldr	r3, [pc, #272]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x152>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e1c7      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4937      	ldr	r1, [pc, #220]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	e03a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a74:	4b34      	ldr	r3, [pc, #208]	@ (8003b48 <HAL_RCC_OscConfig+0x244>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd ff47 	bl	800190c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a82:	f7fd ff43 	bl	800190c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e1a8      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4925      	ldr	r1, [pc, #148]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]
 8003ab4:	e015      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x244>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd ff26 	bl	800190c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fd ff22 	bl	800190c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e187      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d036      	beq.n	8003b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_RCC_OscConfig+0x248>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd ff06 	bl	800190c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fd ff02 	bl	800190c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e167      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCC_OscConfig+0x240>)
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x200>
 8003b22:	e01b      	b.n	8003b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_OscConfig+0x248>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2a:	f7fd feef 	bl	800190c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b30:	e00e      	b.n	8003b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b32:	f7fd feeb 	bl	800190c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d907      	bls.n	8003b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e150      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
 8003b44:	40023800 	.word	0x40023800
 8003b48:	42470000 	.word	0x42470000
 8003b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	4b88      	ldr	r3, [pc, #544]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ea      	bne.n	8003b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8097 	beq.w	8003c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6e:	4b81      	ldr	r3, [pc, #516]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	4a7c      	ldr	r2, [pc, #496]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9a:	4b77      	ldr	r3, [pc, #476]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba6:	4b74      	ldr	r3, [pc, #464]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a73      	ldr	r2, [pc, #460]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7fd feab 	bl	800190c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bba:	f7fd fea7 	bl	800190c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e10c      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d78 <HAL_RCC_OscConfig+0x474>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x2ea>
 8003be0:	4b64      	ldr	r3, [pc, #400]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a63      	ldr	r2, [pc, #396]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	e01c      	b.n	8003c28 <HAL_RCC_OscConfig+0x324>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x30c>
 8003bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	4b5c      	ldr	r3, [pc, #368]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a5b      	ldr	r2, [pc, #364]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0x324>
 8003c10:	4b58      	ldr	r3, [pc, #352]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a57      	ldr	r2, [pc, #348]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	4b55      	ldr	r3, [pc, #340]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a54      	ldr	r2, [pc, #336]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0304 	bic.w	r3, r3, #4
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd fe6c 	bl	800190c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fd fe68 	bl	800190c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0cb      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	4b49      	ldr	r3, [pc, #292]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ee      	beq.n	8003c38 <HAL_RCC_OscConfig+0x334>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fe56 	bl	800190c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd fe52 	bl	800190c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0b5      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ee      	bne.n	8003c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8c:	4b39      	ldr	r3, [pc, #228]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	4a38      	ldr	r2, [pc, #224]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a1 	beq.w	8003de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca2:	4b34      	ldr	r3, [pc, #208]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d05c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d141      	bne.n	8003d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb6:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fe26 	bl	800190c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd fe22 	bl	800190c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e087      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd6:	4b27      	ldr	r3, [pc, #156]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	491b      	ldr	r1, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fd fdfb 	bl	800190c <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fd fdf7 	bl	800190c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e05c      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2c:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x416>
 8003d38:	e054      	b.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <HAL_RCC_OscConfig+0x478>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd fde4 	bl	800190c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fde0 	bl	800190c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e045      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x444>
 8003d66:	e03d      	b.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e038      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x4ec>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d121      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d11a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d111      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0cc      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d90c      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b65      	ldr	r3, [pc, #404]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b63      	ldr	r3, [pc, #396]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b8      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e48:	4b59      	ldr	r3, [pc, #356]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a52      	ldr	r2, [pc, #328]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	494d      	ldr	r1, [pc, #308]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d044      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e07f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e067      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4934      	ldr	r1, [pc, #208]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fd12 	bl	800190c <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fd fd0e 	bl	800190c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e04f      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d20c      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e032      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f66:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	490e      	ldr	r1, [pc, #56]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7a:	f000 f821 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	490a      	ldr	r1, [pc, #40]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	5ccb      	ldrb	r3, [r1, r3]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fc72 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08006440 	.word	0x08006440
 8003fb8:	20000004 	.word	0x20000004
 8003fbc:	20000008 	.word	0x20000008

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc4:	b094      	sub	sp, #80	@ 0x50
 8003fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fcc:	2300      	movs	r3, #0
 8003fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd8:	4b79      	ldr	r3, [pc, #484]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d00d      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	f200 80e1 	bhi.w	80041ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff2:	e0db      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b73      	ldr	r3, [pc, #460]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ff8:	e0db      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffa:	4b73      	ldr	r3, [pc, #460]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ffe:	e0d8      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004000:	4b6f      	ldr	r3, [pc, #444]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400a:	4b6d      	ldr	r3, [pc, #436]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d063      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004016:	4b6a      	ldr	r3, [pc, #424]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	099b      	lsrs	r3, r3, #6
 800401c:	2200      	movs	r2, #0
 800401e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	633b      	str	r3, [r7, #48]	@ 0x30
 800402a:	2300      	movs	r3, #0
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
 800402e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	f04f 0000 	mov.w	r0, #0
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	0159      	lsls	r1, r3, #5
 8004040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004044:	0150      	lsls	r0, r2, #5
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4621      	mov	r1, r4
 800404c:	1a51      	subs	r1, r2, r1
 800404e:	6139      	str	r1, [r7, #16]
 8004050:	4629      	mov	r1, r5
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004064:	4659      	mov	r1, fp
 8004066:	018b      	lsls	r3, r1, #6
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800406e:	4651      	mov	r1, sl
 8004070:	018a      	lsls	r2, r1, #6
 8004072:	4651      	mov	r1, sl
 8004074:	ebb2 0801 	subs.w	r8, r2, r1
 8004078:	4659      	mov	r1, fp
 800407a:	eb63 0901 	sbc.w	r9, r3, r1
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800408e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004092:	4690      	mov	r8, r2
 8004094:	4699      	mov	r9, r3
 8004096:	4623      	mov	r3, r4
 8004098:	eb18 0303 	adds.w	r3, r8, r3
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	462b      	mov	r3, r5
 80040a0:	eb49 0303 	adc.w	r3, r9, r3
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040b2:	4629      	mov	r1, r5
 80040b4:	024b      	lsls	r3, r1, #9
 80040b6:	4621      	mov	r1, r4
 80040b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040bc:	4621      	mov	r1, r4
 80040be:	024a      	lsls	r2, r1, #9
 80040c0:	4610      	mov	r0, r2
 80040c2:	4619      	mov	r1, r3
 80040c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c6:	2200      	movs	r2, #0
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040d0:	f7fc f8de 	bl	8000290 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4613      	mov	r3, r2
 80040da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040dc:	e058      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b38      	ldr	r3, [pc, #224]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	4611      	mov	r1, r2
 80040ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	f04f 0000 	mov.w	r0, #0
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	0159      	lsls	r1, r3, #5
 8004106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410a:	0150      	lsls	r0, r2, #5
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4641      	mov	r1, r8
 8004112:	ebb2 0a01 	subs.w	sl, r2, r1
 8004116:	4649      	mov	r1, r9
 8004118:	eb63 0b01 	sbc.w	fp, r3, r1
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800412c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004130:	ebb2 040a 	subs.w	r4, r2, sl
 8004134:	eb63 050b 	sbc.w	r5, r3, fp
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	00eb      	lsls	r3, r5, #3
 8004142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004146:	00e2      	lsls	r2, r4, #3
 8004148:	4614      	mov	r4, r2
 800414a:	461d      	mov	r5, r3
 800414c:	4643      	mov	r3, r8
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	464b      	mov	r3, r9
 8004154:	eb45 0303 	adc.w	r3, r5, r3
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004166:	4629      	mov	r1, r5
 8004168:	028b      	lsls	r3, r1, #10
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004170:	4621      	mov	r1, r4
 8004172:	028a      	lsls	r2, r1, #10
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	61fa      	str	r2, [r7, #28]
 8004180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004184:	f7fc f884 	bl	8000290 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80041a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041aa:	e002      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3750      	adds	r7, #80	@ 0x50
 80041b8:	46bd      	mov	sp, r7
 80041ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000004 	.word	0x20000004

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	08006450 	.word	0x08006450

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffdc 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0b5b      	lsrs	r3, r3, #13
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	08006450 	.word	0x08006450

08004234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e041      	b.n	80042ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd f956 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f000 fcae 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e044      	b.n	8004376 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_TIM_Base_Start_IT+0xb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d018      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004316:	d013      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1a      	ldr	r2, [pc, #104]	@ (8004388 <HAL_TIM_Base_Start_IT+0xb4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_TIM_Base_Start_IT+0xb8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <HAL_TIM_Base_Start_IT+0xbc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <HAL_TIM_Base_Start_IT+0xc0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d010      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	e007      	b.n	8004374 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd f8ca 	bl	8001558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fbfc 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_TIM_PWM_Start+0x24>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e022      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d109      	bne.n	8004476 <HAL_TIM_PWM_Start+0x3e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e015      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d109      	bne.n	8004490 <HAL_TIM_PWM_Start+0x58>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e008      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e068      	b.n	800457c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0x82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0x92>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fe18 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <HAL_TIM_PWM_Start+0x14c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d107      	bne.n	800450a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <HAL_TIM_PWM_Start+0x14c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d013      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_TIM_PWM_Start+0x150>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_TIM_PWM_Start+0x154>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIM_PWM_Start+0x158>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_TIM_PWM_Start+0x15c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d111      	bne.n	800456a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b06      	cmp	r3, #6
 8004556:	d010      	beq.n	800457a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	e007      	b.n	800457a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40010000 	.word	0x40010000
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40014000 	.word	0x40014000

08004598 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fdb8 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a29      	ldr	r2, [pc, #164]	@ (800465c <HAL_TIM_PWM_Stop+0xc4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d117      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <HAL_TIM_PWM_Stop+0x82>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	f240 4344 	movw	r3, #1092	@ 0x444
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_TIM_PWM_Stop+0x82>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Stop+0x92>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004628:	e013      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Stop+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004638:	e00b      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d104      	bne.n	800464a <HAL_TIM_PWM_Stop+0xb2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004648:	e003      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000

08004660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0202 	mvn.w	r2, #2
 800468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa77 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa69 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa7a 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0204 	mvn.w	r2, #4
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa4d 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa3f 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fa50 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b08      	cmp	r3, #8
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0208 	mvn.w	r2, #8
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa23 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa15 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fa26 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b10      	cmp	r3, #16
 8004770:	d122      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0210 	mvn.w	r2, #16
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2208      	movs	r2, #8
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9f9 	bl	8004b96 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9eb 	bl	8004b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f9fc 	bl	8004baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0201 	mvn.w	r2, #1
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc f974 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ee:	2b80      	cmp	r3, #128	@ 0x80
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b80      	cmp	r3, #128	@ 0x80
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fd26 	bl	800525c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d10e      	bne.n	800483c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	d107      	bne.n	800483c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9c1 	bl	8004bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b20      	cmp	r3, #32
 8004848:	d10e      	bne.n	8004868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b20      	cmp	r3, #32
 8004856:	d107      	bne.n	8004868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0220 	mvn.w	r2, #32
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fcf0 	bl	8005248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800488a:	2302      	movs	r3, #2
 800488c:	e0ae      	b.n	80049ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	f200 809f 	bhi.w	80049dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	080049dd 	.word	0x080049dd
 80048ac:	080049dd 	.word	0x080049dd
 80048b0:	080049dd 	.word	0x080049dd
 80048b4:	08004919 	.word	0x08004919
 80048b8:	080049dd 	.word	0x080049dd
 80048bc:	080049dd 	.word	0x080049dd
 80048c0:	080049dd 	.word	0x080049dd
 80048c4:	0800495b 	.word	0x0800495b
 80048c8:	080049dd 	.word	0x080049dd
 80048cc:	080049dd 	.word	0x080049dd
 80048d0:	080049dd 	.word	0x080049dd
 80048d4:	0800499b 	.word	0x0800499b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f9f8 	bl	8004cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0204 	bic.w	r2, r2, #4
 8004902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6999      	ldr	r1, [r3, #24]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	619a      	str	r2, [r3, #24]
      break;
 8004916:	e064      	b.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fa3e 	bl	8004da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6999      	ldr	r1, [r3, #24]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	021a      	lsls	r2, r3, #8
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	619a      	str	r2, [r3, #24]
      break;
 8004958:	e043      	b.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fa89 	bl	8004e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0208 	orr.w	r2, r2, #8
 8004974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0204 	bic.w	r2, r2, #4
 8004984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69d9      	ldr	r1, [r3, #28]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	61da      	str	r2, [r3, #28]
      break;
 8004998:	e023      	b.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fad3 	bl	8004f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69d9      	ldr	r1, [r3, #28]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	021a      	lsls	r2, r3, #8
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	61da      	str	r2, [r3, #28]
      break;
 80049da:	e002      	b.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
      break;
 80049e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIM_ConfigClockSource+0x1c>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e0b4      	b.n	8004b7a <HAL_TIM_ConfigClockSource+0x186>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a48:	d03e      	beq.n	8004ac8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4e:	f200 8087 	bhi.w	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a56:	f000 8086 	beq.w	8004b66 <HAL_TIM_ConfigClockSource+0x172>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d87f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b70      	cmp	r3, #112	@ 0x70
 8004a62:	d01a      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0xa6>
 8004a64:	2b70      	cmp	r3, #112	@ 0x70
 8004a66:	d87b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b60      	cmp	r3, #96	@ 0x60
 8004a6a:	d050      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x11a>
 8004a6c:	2b60      	cmp	r3, #96	@ 0x60
 8004a6e:	d877      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b50      	cmp	r3, #80	@ 0x50
 8004a72:	d03c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0xfa>
 8004a74:	2b50      	cmp	r3, #80	@ 0x50
 8004a76:	d873      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b40      	cmp	r3, #64	@ 0x40
 8004a7a:	d058      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x13a>
 8004a7c:	2b40      	cmp	r3, #64	@ 0x40
 8004a7e:	d86f      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b30      	cmp	r3, #48	@ 0x30
 8004a82:	d064      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	2b30      	cmp	r3, #48	@ 0x30
 8004a86:	d86b      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d060      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d867      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05c      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d05a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x15a>
 8004a98:	e062      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6899      	ldr	r1, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f000 fb19 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004abc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	609a      	str	r2, [r3, #8]
      break;
 8004ac6:	e04f      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f000 fb02 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aea:	609a      	str	r2, [r3, #8]
      break;
 8004aec:	e03c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fa76 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2150      	movs	r1, #80	@ 0x50
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 facf 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e02c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fa95 	bl	800504a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2160      	movs	r1, #96	@ 0x60
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fabf 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e01c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 fa56 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2140      	movs	r1, #64	@ 0x40
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 faaf 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e00c      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f000 faa6 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b5e:	e003      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      break;
 8004b64:	e000      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a34      	ldr	r2, [pc, #208]	@ (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a31      	ldr	r2, [pc, #196]	@ (8004cbc <TIM_Base_SetConfig+0xe8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a30      	ldr	r2, [pc, #192]	@ (8004cc0 <TIM_Base_SetConfig+0xec>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x38>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc4 <TIM_Base_SetConfig+0xf0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	@ (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a22      	ldr	r2, [pc, #136]	@ (8004cbc <TIM_Base_SetConfig+0xe8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a21      	ldr	r2, [pc, #132]	@ (8004cc0 <TIM_Base_SetConfig+0xec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a20      	ldr	r2, [pc, #128]	@ (8004cc4 <TIM_Base_SetConfig+0xf0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <TIM_Base_SetConfig+0xf4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <TIM_Base_SetConfig+0xf8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0x8a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <TIM_Base_SetConfig+0xfc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <TIM_Base_SetConfig+0xe4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d103      	bne.n	8004ca4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <TIM_OC1_SetConfig+0xc8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10c      	bne.n	8004d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0308 	bic.w	r3, r3, #8
 8004d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <TIM_OC1_SetConfig+0xc8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d111      	bne.n	8004d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	621a      	str	r2, [r3, #32]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40010000 	.word	0x40010000

08004da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0210 	bic.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0320 	bic.w	r3, r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <TIM_OC2_SetConfig+0xd4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10d      	bne.n	8004e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	@ (8004e74 <TIM_OC2_SetConfig+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d113      	bne.n	8004e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000

08004e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <TIM_OC3_SetConfig+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10d      	bne.n	8004ef2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <TIM_OC3_SetConfig+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40010000 	.word	0x40010000

08004f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	031b      	lsls	r3, r3, #12
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <TIM_OC4_SetConfig+0x9c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d109      	bne.n	8004fc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0210 	bic.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005180:	2302      	movs	r3, #2
 8005182:	e050      	b.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d0:	d013      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a13      	ldr	r2, [pc, #76]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40010000 	.word	0x40010000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40000c00 	.word	0x40000c00
 8005244:	40014000 	.word	0x40014000

08005248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e03f      	b.n	8005302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc f9ba 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	@ 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f929 	bl	800550c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08a      	sub	sp, #40	@ 0x28
 800530e:	af02      	add	r7, sp, #8
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d17c      	bne.n	8005424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_UART_Transmit+0x2c>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e075      	b.n	8005426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UART_Transmit+0x3e>
 8005344:	2302      	movs	r3, #2
 8005346:	e06e      	b.n	8005426 <HAL_UART_Transmit+0x11c>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	@ 0x21
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535e:	f7fc fad5 	bl	800190c <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005378:	d108      	bne.n	800538c <HAL_UART_Transmit+0x82>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e003      	b.n	8005394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800539c:	e02a      	b.n	80053f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	@ 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f840 	bl	800542e <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e036      	b.n	8005426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3302      	adds	r3, #2
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e007      	b.n	80053e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1cf      	bne.n	800539e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2140      	movs	r1, #64	@ 0x40
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f810 	bl	800542e <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b090      	sub	sp, #64	@ 0x40
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543e:	e050      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d04c      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0x30>
 800544e:	f7fc fa5d 	bl	800190c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800545a:	429a      	cmp	r2, r3
 800545c:	d241      	bcs.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800547e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	613b      	str	r3, [r7, #16]
   return(result);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3314      	adds	r3, #20
 80054b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b2:	623a      	str	r2, [r7, #32]
 80054b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e00f      	b.n	8005502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4013      	ands	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	bf0c      	ite	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	2300      	movne	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d09f      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3740      	adds	r7, #64	@ 0x40
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b0c0      	sub	sp, #256	@ 0x100
 8005512:	af00      	add	r7, sp, #0
 8005514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	ea40 0301 	orr.w	r3, r0, r1
 8005534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005564:	f021 010c 	bic.w	r1, r1, #12
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005572:	430b      	orrs	r3, r1
 8005574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	6999      	ldr	r1, [r3, #24]
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	ea40 0301 	orr.w	r3, r0, r1
 8005592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8f      	ldr	r3, [pc, #572]	@ (80057d8 <UART_SetConfig+0x2cc>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d005      	beq.n	80055ac <UART_SetConfig+0xa0>
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8d      	ldr	r3, [pc, #564]	@ (80057dc <UART_SetConfig+0x2d0>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fe fe2e 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 80055b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055b4:	e003      	b.n	80055be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b6:	f7fe fe15 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80055ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c8:	f040 810c 	bne.w	80057e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055e6:	415b      	adcs	r3, r3
 80055e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055ee:	4621      	mov	r1, r4
 80055f0:	eb12 0801 	adds.w	r8, r2, r1
 80055f4:	4629      	mov	r1, r5
 80055f6:	eb43 0901 	adc.w	r9, r3, r1
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560e:	4690      	mov	r8, r2
 8005610:	4699      	mov	r9, r3
 8005612:	4623      	mov	r3, r4
 8005614:	eb18 0303 	adds.w	r3, r8, r3
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800561c:	462b      	mov	r3, r5
 800561e:	eb49 0303 	adc.w	r3, r9, r3
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800563a:	460b      	mov	r3, r1
 800563c:	18db      	adds	r3, r3, r3
 800563e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005640:	4613      	mov	r3, r2
 8005642:	eb42 0303 	adc.w	r3, r2, r3
 8005646:	657b      	str	r3, [r7, #84]	@ 0x54
 8005648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800564c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005650:	f7fa fe1e 	bl	8000290 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b61      	ldr	r3, [pc, #388]	@ (80057e0 <UART_SetConfig+0x2d4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800566c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800567c:	415b      	adcs	r3, r3
 800567e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005684:	4641      	mov	r1, r8
 8005686:	eb12 0a01 	adds.w	sl, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0b01 	adc.w	fp, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800569c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a4:	4692      	mov	sl, r2
 80056a6:	469b      	mov	fp, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	eb1a 0303 	adds.w	r3, sl, r3
 80056ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb4b 0303 	adc.w	r3, fp, r3
 80056b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056d0:	460b      	mov	r3, r1
 80056d2:	18db      	adds	r3, r3, r3
 80056d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d6:	4613      	mov	r3, r2
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056e6:	f7fa fdd3 	bl	8000290 <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	4b3b      	ldr	r3, [pc, #236]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2301 	umull	r2, r3, r3, r1
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2264      	movs	r2, #100	@ 0x64
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	1acb      	subs	r3, r1, r3
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005706:	4b36      	ldr	r3, [pc, #216]	@ (80057e0 <UART_SetConfig+0x2d4>)
 8005708:	fba3 2302 	umull	r2, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005714:	441c      	add	r4, r3
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005730:	415b      	adcs	r3, r3
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6339      	str	r1, [r7, #48]	@ 0x30
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800576c:	464b      	mov	r3, r9
 800576e:	460a      	mov	r2, r1
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800578c:	460b      	mov	r3, r1
 800578e:	18db      	adds	r3, r3, r3
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005792:	4613      	mov	r3, r2
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800579e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057a2:	f7fa fd75 	bl	8000290 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	@ 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	3332      	adds	r3, #50	@ 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	@ (80057e0 <UART_SetConfig+0x2d4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d4:	e106      	b.n	80059e4 <UART_SetConfig+0x4d8>
 80057d6:	bf00      	nop
 80057d8:	40011000 	.word	0x40011000
 80057dc:	40011400 	.word	0x40011400
 80057e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	6239      	str	r1, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	4641      	mov	r1, r8
 8005808:	1854      	adds	r4, r2, r1
 800580a:	4649      	mov	r1, r9
 800580c:	eb43 0501 	adc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800582c:	464b      	mov	r3, r9
 800582e:	eb45 0303 	adc.w	r3, r5, r3
 8005832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005852:	4629      	mov	r1, r5
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4621      	mov	r1, r4
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005864:	f7fa fd14 	bl	8000290 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b60      	ldr	r3, [pc, #384]	@ (80059f0 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011c      	lsls	r4, r3, #4
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	61b9      	str	r1, [r7, #24]
 8005890:	415b      	adcs	r3, r3
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005898:	4641      	mov	r1, r8
 800589a:	1851      	adds	r1, r2, r1
 800589c:	6139      	str	r1, [r7, #16]
 800589e:	4649      	mov	r1, r9
 80058a0:	414b      	adcs	r3, r1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b0:	4659      	mov	r1, fp
 80058b2:	00cb      	lsls	r3, r1, #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ba:	4651      	mov	r1, sl
 80058bc:	00ca      	lsls	r2, r1, #3
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	4642      	mov	r2, r8
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058cc:	464b      	mov	r3, r9
 80058ce:	460a      	mov	r2, r1
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058f0:	4649      	mov	r1, r9
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fa:	4641      	mov	r1, r8
 80058fc:	008a      	lsls	r2, r1, #2
 80058fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005902:	f7fa fcc5 	bl	8000290 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	@ 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	@ 0x32
 8005920:	4a33      	ldr	r2, [pc, #204]	@ (80059f0 <UART_SetConfig+0x4e4>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800592c:	441c      	add	r4, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	673b      	str	r3, [r7, #112]	@ 0x70
 8005936:	677a      	str	r2, [r7, #116]	@ 0x74
 8005938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	415b      	adcs	r3, r3
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597e:	464b      	mov	r3, r9
 8005980:	460a      	mov	r2, r1
 8005982:	eb42 0303 	adc.w	r3, r2, r3
 8005986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	663b      	str	r3, [r7, #96]	@ 0x60
 8005992:	667a      	str	r2, [r7, #100]	@ 0x64
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059a0:	4649      	mov	r1, r9
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	4641      	mov	r1, r8
 80059a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059aa:	4641      	mov	r1, r8
 80059ac:	008a      	lsls	r2, r1, #2
 80059ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059b2:	f7fa fc6d 	bl	8000290 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <UART_SetConfig+0x4e4>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	@ 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	3332      	adds	r3, #50	@ 0x32
 80059ce:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <UART_SetConfig+0x4e4>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4422      	add	r2, r4
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ea:	46bd      	mov	sp, r7
 80059ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <siprintf>:
 80059f4:	b40e      	push	{r1, r2, r3}
 80059f6:	b510      	push	{r4, lr}
 80059f8:	b09d      	sub	sp, #116	@ 0x74
 80059fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80059fc:	9002      	str	r0, [sp, #8]
 80059fe:	9006      	str	r0, [sp, #24]
 8005a00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a04:	480a      	ldr	r0, [pc, #40]	@ (8005a30 <siprintf+0x3c>)
 8005a06:	9107      	str	r1, [sp, #28]
 8005a08:	9104      	str	r1, [sp, #16]
 8005a0a:	490a      	ldr	r1, [pc, #40]	@ (8005a34 <siprintf+0x40>)
 8005a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a10:	9105      	str	r1, [sp, #20]
 8005a12:	2400      	movs	r4, #0
 8005a14:	a902      	add	r1, sp, #8
 8005a16:	6800      	ldr	r0, [r0, #0]
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a1c:	f000 f994 	bl	8005d48 <_svfiprintf_r>
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	701c      	strb	r4, [r3, #0]
 8005a24:	b01d      	add	sp, #116	@ 0x74
 8005a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2a:	b003      	add	sp, #12
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000010 	.word	0x20000010
 8005a34:	ffff0208 	.word	0xffff0208

08005a38 <memset>:
 8005a38:	4402      	add	r2, r0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memset+0xa>
 8005a40:	4770      	bx	lr
 8005a42:	f803 1b01 	strb.w	r1, [r3], #1
 8005a46:	e7f9      	b.n	8005a3c <memset+0x4>

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	@ (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000010 	.word	0x20000010

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	@ (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	@ (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	@ (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	@ (8005a98 <__libc_init_array+0x44>)
 8005a68:	f000 fc64 	bl	8006334 <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	0800649c 	.word	0x0800649c
 8005a90:	0800649c 	.word	0x0800649c
 8005a94:	0800649c 	.word	0x0800649c
 8005a98:	080064a0 	.word	0x080064a0

08005a9c <__retarget_lock_acquire_recursive>:
 8005a9c:	4770      	bx	lr

08005a9e <__retarget_lock_release_recursive>:
 8005a9e:	4770      	bx	lr

08005aa0 <_free_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	2900      	cmp	r1, #0
 8005aa6:	d041      	beq.n	8005b2c <_free_r+0x8c>
 8005aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aac:	1f0c      	subs	r4, r1, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bfb8      	it	lt
 8005ab2:	18e4      	addlt	r4, r4, r3
 8005ab4:	f000 f8e0 	bl	8005c78 <__malloc_lock>
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <_free_r+0x90>)
 8005aba:	6813      	ldr	r3, [r2, #0]
 8005abc:	b933      	cbnz	r3, 8005acc <_free_r+0x2c>
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	6014      	str	r4, [r2, #0]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac8:	f000 b8dc 	b.w	8005c84 <__malloc_unlock>
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	d908      	bls.n	8005ae2 <_free_r+0x42>
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	1821      	adds	r1, r4, r0
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	bf01      	itttt	eq
 8005ad8:	6819      	ldreq	r1, [r3, #0]
 8005ada:	685b      	ldreq	r3, [r3, #4]
 8005adc:	1809      	addeq	r1, r1, r0
 8005ade:	6021      	streq	r1, [r4, #0]
 8005ae0:	e7ed      	b.n	8005abe <_free_r+0x1e>
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	b10b      	cbz	r3, 8005aec <_free_r+0x4c>
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d9fa      	bls.n	8005ae2 <_free_r+0x42>
 8005aec:	6811      	ldr	r1, [r2, #0]
 8005aee:	1850      	adds	r0, r2, r1
 8005af0:	42a0      	cmp	r0, r4
 8005af2:	d10b      	bne.n	8005b0c <_free_r+0x6c>
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	4401      	add	r1, r0
 8005af8:	1850      	adds	r0, r2, r1
 8005afa:	4283      	cmp	r3, r0
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	d1e0      	bne.n	8005ac2 <_free_r+0x22>
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	6053      	str	r3, [r2, #4]
 8005b06:	4408      	add	r0, r1
 8005b08:	6010      	str	r0, [r2, #0]
 8005b0a:	e7da      	b.n	8005ac2 <_free_r+0x22>
 8005b0c:	d902      	bls.n	8005b14 <_free_r+0x74>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	e7d6      	b.n	8005ac2 <_free_r+0x22>
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	1821      	adds	r1, r4, r0
 8005b18:	428b      	cmp	r3, r1
 8005b1a:	bf04      	itt	eq
 8005b1c:	6819      	ldreq	r1, [r3, #0]
 8005b1e:	685b      	ldreq	r3, [r3, #4]
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	bf04      	itt	eq
 8005b24:	1809      	addeq	r1, r1, r0
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	6054      	str	r4, [r2, #4]
 8005b2a:	e7ca      	b.n	8005ac2 <_free_r+0x22>
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	200003e8 	.word	0x200003e8

08005b34 <sbrk_aligned>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4e0f      	ldr	r6, [pc, #60]	@ (8005b74 <sbrk_aligned+0x40>)
 8005b38:	460c      	mov	r4, r1
 8005b3a:	6831      	ldr	r1, [r6, #0]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b911      	cbnz	r1, 8005b46 <sbrk_aligned+0x12>
 8005b40:	f000 fba4 	bl	800628c <_sbrk_r>
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 fb9f 	bl	800628c <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d103      	bne.n	8005b5a <sbrk_aligned+0x26>
 8005b52:	f04f 34ff 	mov.w	r4, #4294967295
 8005b56:	4620      	mov	r0, r4
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
 8005b5a:	1cc4      	adds	r4, r0, #3
 8005b5c:	f024 0403 	bic.w	r4, r4, #3
 8005b60:	42a0      	cmp	r0, r4
 8005b62:	d0f8      	beq.n	8005b56 <sbrk_aligned+0x22>
 8005b64:	1a21      	subs	r1, r4, r0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fb90 	bl	800628c <_sbrk_r>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d1f2      	bne.n	8005b56 <sbrk_aligned+0x22>
 8005b70:	e7ef      	b.n	8005b52 <sbrk_aligned+0x1e>
 8005b72:	bf00      	nop
 8005b74:	200003e4 	.word	0x200003e4

08005b78 <_malloc_r>:
 8005b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b7c:	1ccd      	adds	r5, r1, #3
 8005b7e:	f025 0503 	bic.w	r5, r5, #3
 8005b82:	3508      	adds	r5, #8
 8005b84:	2d0c      	cmp	r5, #12
 8005b86:	bf38      	it	cc
 8005b88:	250c      	movcc	r5, #12
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	db01      	blt.n	8005b94 <_malloc_r+0x1c>
 8005b90:	42a9      	cmp	r1, r5
 8005b92:	d904      	bls.n	8005b9e <_malloc_r+0x26>
 8005b94:	230c      	movs	r3, #12
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c74 <_malloc_r+0xfc>
 8005ba2:	f000 f869 	bl	8005c78 <__malloc_lock>
 8005ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8005baa:	461c      	mov	r4, r3
 8005bac:	bb44      	cbnz	r4, 8005c00 <_malloc_r+0x88>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7ff ffbf 	bl	8005b34 <sbrk_aligned>
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	4604      	mov	r4, r0
 8005bba:	d158      	bne.n	8005c6e <_malloc_r+0xf6>
 8005bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc0:	4627      	mov	r7, r4
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d143      	bne.n	8005c4e <_malloc_r+0xd6>
 8005bc6:	2c00      	cmp	r4, #0
 8005bc8:	d04b      	beq.n	8005c62 <_malloc_r+0xea>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	4639      	mov	r1, r7
 8005bce:	4630      	mov	r0, r6
 8005bd0:	eb04 0903 	add.w	r9, r4, r3
 8005bd4:	f000 fb5a 	bl	800628c <_sbrk_r>
 8005bd8:	4581      	cmp	r9, r0
 8005bda:	d142      	bne.n	8005c62 <_malloc_r+0xea>
 8005bdc:	6821      	ldr	r1, [r4, #0]
 8005bde:	1a6d      	subs	r5, r5, r1
 8005be0:	4629      	mov	r1, r5
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7ff ffa6 	bl	8005b34 <sbrk_aligned>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d03a      	beq.n	8005c62 <_malloc_r+0xea>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	442b      	add	r3, r5
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	bb62      	cbnz	r2, 8005c54 <_malloc_r+0xdc>
 8005bfa:	f8c8 7000 	str.w	r7, [r8]
 8005bfe:	e00f      	b.n	8005c20 <_malloc_r+0xa8>
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	1b52      	subs	r2, r2, r5
 8005c04:	d420      	bmi.n	8005c48 <_malloc_r+0xd0>
 8005c06:	2a0b      	cmp	r2, #11
 8005c08:	d917      	bls.n	8005c3a <_malloc_r+0xc2>
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	6025      	str	r5, [r4, #0]
 8005c10:	bf18      	it	ne
 8005c12:	6059      	strne	r1, [r3, #4]
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	bf08      	it	eq
 8005c18:	f8c8 1000 	streq.w	r1, [r8]
 8005c1c:	5162      	str	r2, [r4, r5]
 8005c1e:	604b      	str	r3, [r1, #4]
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f82f 	bl	8005c84 <__malloc_unlock>
 8005c26:	f104 000b 	add.w	r0, r4, #11
 8005c2a:	1d23      	adds	r3, r4, #4
 8005c2c:	f020 0007 	bic.w	r0, r0, #7
 8005c30:	1ac2      	subs	r2, r0, r3
 8005c32:	bf1c      	itt	ne
 8005c34:	1a1b      	subne	r3, r3, r0
 8005c36:	50a3      	strne	r3, [r4, r2]
 8005c38:	e7af      	b.n	8005b9a <_malloc_r+0x22>
 8005c3a:	6862      	ldr	r2, [r4, #4]
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	bf0c      	ite	eq
 8005c40:	f8c8 2000 	streq.w	r2, [r8]
 8005c44:	605a      	strne	r2, [r3, #4]
 8005c46:	e7eb      	b.n	8005c20 <_malloc_r+0xa8>
 8005c48:	4623      	mov	r3, r4
 8005c4a:	6864      	ldr	r4, [r4, #4]
 8005c4c:	e7ae      	b.n	8005bac <_malloc_r+0x34>
 8005c4e:	463c      	mov	r4, r7
 8005c50:	687f      	ldr	r7, [r7, #4]
 8005c52:	e7b6      	b.n	8005bc2 <_malloc_r+0x4a>
 8005c54:	461a      	mov	r2, r3
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d1fb      	bne.n	8005c54 <_malloc_r+0xdc>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6053      	str	r3, [r2, #4]
 8005c60:	e7de      	b.n	8005c20 <_malloc_r+0xa8>
 8005c62:	230c      	movs	r3, #12
 8005c64:	6033      	str	r3, [r6, #0]
 8005c66:	4630      	mov	r0, r6
 8005c68:	f000 f80c 	bl	8005c84 <__malloc_unlock>
 8005c6c:	e794      	b.n	8005b98 <_malloc_r+0x20>
 8005c6e:	6005      	str	r5, [r0, #0]
 8005c70:	e7d6      	b.n	8005c20 <_malloc_r+0xa8>
 8005c72:	bf00      	nop
 8005c74:	200003e8 	.word	0x200003e8

08005c78 <__malloc_lock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	@ (8005c80 <__malloc_lock+0x8>)
 8005c7a:	f7ff bf0f 	b.w	8005a9c <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	200003e0 	.word	0x200003e0

08005c84 <__malloc_unlock>:
 8005c84:	4801      	ldr	r0, [pc, #4]	@ (8005c8c <__malloc_unlock+0x8>)
 8005c86:	f7ff bf0a 	b.w	8005a9e <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	200003e0 	.word	0x200003e0

08005c90 <__ssputs_r>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	688e      	ldr	r6, [r1, #8]
 8005c96:	461f      	mov	r7, r3
 8005c98:	42be      	cmp	r6, r7
 8005c9a:	680b      	ldr	r3, [r1, #0]
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4690      	mov	r8, r2
 8005ca2:	d82d      	bhi.n	8005d00 <__ssputs_r+0x70>
 8005ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ca8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cac:	d026      	beq.n	8005cfc <__ssputs_r+0x6c>
 8005cae:	6965      	ldr	r5, [r4, #20]
 8005cb0:	6909      	ldr	r1, [r1, #16]
 8005cb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb6:	eba3 0901 	sub.w	r9, r3, r1
 8005cba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cbe:	1c7b      	adds	r3, r7, #1
 8005cc0:	444b      	add	r3, r9
 8005cc2:	106d      	asrs	r5, r5, #1
 8005cc4:	429d      	cmp	r5, r3
 8005cc6:	bf38      	it	cc
 8005cc8:	461d      	movcc	r5, r3
 8005cca:	0553      	lsls	r3, r2, #21
 8005ccc:	d527      	bpl.n	8005d1e <__ssputs_r+0x8e>
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7ff ff52 	bl	8005b78 <_malloc_r>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	b360      	cbz	r0, 8005d32 <__ssputs_r+0xa2>
 8005cd8:	6921      	ldr	r1, [r4, #16]
 8005cda:	464a      	mov	r2, r9
 8005cdc:	f000 fae6 	bl	80062ac <memcpy>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	6126      	str	r6, [r4, #16]
 8005cee:	6165      	str	r5, [r4, #20]
 8005cf0:	444e      	add	r6, r9
 8005cf2:	eba5 0509 	sub.w	r5, r5, r9
 8005cf6:	6026      	str	r6, [r4, #0]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	463e      	mov	r6, r7
 8005cfc:	42be      	cmp	r6, r7
 8005cfe:	d900      	bls.n	8005d02 <__ssputs_r+0x72>
 8005d00:	463e      	mov	r6, r7
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	4632      	mov	r2, r6
 8005d06:	4641      	mov	r1, r8
 8005d08:	f000 faa6 	bl	8006258 <memmove>
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	1b9b      	subs	r3, r3, r6
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	4433      	add	r3, r6
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	2000      	movs	r0, #0
 8005d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1e:	462a      	mov	r2, r5
 8005d20:	f000 fad2 	bl	80062c8 <_realloc_r>
 8005d24:	4606      	mov	r6, r0
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d1e0      	bne.n	8005cec <__ssputs_r+0x5c>
 8005d2a:	6921      	ldr	r1, [r4, #16]
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	f7ff feb7 	bl	8005aa0 <_free_r>
 8005d32:	230c      	movs	r3, #12
 8005d34:	f8ca 3000 	str.w	r3, [sl]
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e7e9      	b.n	8005d1a <__ssputs_r+0x8a>
	...

08005d48 <_svfiprintf_r>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	4698      	mov	r8, r3
 8005d4e:	898b      	ldrh	r3, [r1, #12]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	b09d      	sub	sp, #116	@ 0x74
 8005d54:	4607      	mov	r7, r0
 8005d56:	460d      	mov	r5, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	d510      	bpl.n	8005d7e <_svfiprintf_r+0x36>
 8005d5c:	690b      	ldr	r3, [r1, #16]
 8005d5e:	b973      	cbnz	r3, 8005d7e <_svfiprintf_r+0x36>
 8005d60:	2140      	movs	r1, #64	@ 0x40
 8005d62:	f7ff ff09 	bl	8005b78 <_malloc_r>
 8005d66:	6028      	str	r0, [r5, #0]
 8005d68:	6128      	str	r0, [r5, #16]
 8005d6a:	b930      	cbnz	r0, 8005d7a <_svfiprintf_r+0x32>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	b01d      	add	sp, #116	@ 0x74
 8005d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7a:	2340      	movs	r3, #64	@ 0x40
 8005d7c:	616b      	str	r3, [r5, #20]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d82:	2320      	movs	r3, #32
 8005d84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8c:	2330      	movs	r3, #48	@ 0x30
 8005d8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f2c <_svfiprintf_r+0x1e4>
 8005d92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d96:	f04f 0901 	mov.w	r9, #1
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	469a      	mov	sl, r3
 8005d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da2:	b10a      	cbz	r2, 8005da8 <_svfiprintf_r+0x60>
 8005da4:	2a25      	cmp	r2, #37	@ 0x25
 8005da6:	d1f9      	bne.n	8005d9c <_svfiprintf_r+0x54>
 8005da8:	ebba 0b04 	subs.w	fp, sl, r4
 8005dac:	d00b      	beq.n	8005dc6 <_svfiprintf_r+0x7e>
 8005dae:	465b      	mov	r3, fp
 8005db0:	4622      	mov	r2, r4
 8005db2:	4629      	mov	r1, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff ff6b 	bl	8005c90 <__ssputs_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f000 80a7 	beq.w	8005f0e <_svfiprintf_r+0x1c6>
 8005dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc2:	445a      	add	r2, fp
 8005dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 809f 	beq.w	8005f0e <_svfiprintf_r+0x1c6>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dda:	f10a 0a01 	add.w	sl, sl, #1
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	9307      	str	r3, [sp, #28]
 8005de2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005de6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005de8:	4654      	mov	r4, sl
 8005dea:	2205      	movs	r2, #5
 8005dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df0:	484e      	ldr	r0, [pc, #312]	@ (8005f2c <_svfiprintf_r+0x1e4>)
 8005df2:	f7fa f9fd 	bl	80001f0 <memchr>
 8005df6:	9a04      	ldr	r2, [sp, #16]
 8005df8:	b9d8      	cbnz	r0, 8005e32 <_svfiprintf_r+0xea>
 8005dfa:	06d0      	lsls	r0, r2, #27
 8005dfc:	bf44      	itt	mi
 8005dfe:	2320      	movmi	r3, #32
 8005e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e04:	0711      	lsls	r1, r2, #28
 8005e06:	bf44      	itt	mi
 8005e08:	232b      	movmi	r3, #43	@ 0x2b
 8005e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e14:	d015      	beq.n	8005e42 <_svfiprintf_r+0xfa>
 8005e16:	9a07      	ldr	r2, [sp, #28]
 8005e18:	4654      	mov	r4, sl
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f04f 0c0a 	mov.w	ip, #10
 8005e20:	4621      	mov	r1, r4
 8005e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e26:	3b30      	subs	r3, #48	@ 0x30
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	d94b      	bls.n	8005ec4 <_svfiprintf_r+0x17c>
 8005e2c:	b1b0      	cbz	r0, 8005e5c <_svfiprintf_r+0x114>
 8005e2e:	9207      	str	r2, [sp, #28]
 8005e30:	e014      	b.n	8005e5c <_svfiprintf_r+0x114>
 8005e32:	eba0 0308 	sub.w	r3, r0, r8
 8005e36:	fa09 f303 	lsl.w	r3, r9, r3
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	46a2      	mov	sl, r4
 8005e40:	e7d2      	b.n	8005de8 <_svfiprintf_r+0xa0>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	9103      	str	r1, [sp, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	425b      	neglt	r3, r3
 8005e50:	f042 0202 	orrlt.w	r2, r2, #2
 8005e54:	9307      	strge	r3, [sp, #28]
 8005e56:	9307      	strlt	r3, [sp, #28]
 8005e58:	bfb8      	it	lt
 8005e5a:	9204      	strlt	r2, [sp, #16]
 8005e5c:	7823      	ldrb	r3, [r4, #0]
 8005e5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e60:	d10a      	bne.n	8005e78 <_svfiprintf_r+0x130>
 8005e62:	7863      	ldrb	r3, [r4, #1]
 8005e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e66:	d132      	bne.n	8005ece <_svfiprintf_r+0x186>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	9203      	str	r2, [sp, #12]
 8005e70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e74:	3402      	adds	r4, #2
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f3c <_svfiprintf_r+0x1f4>
 8005e7c:	7821      	ldrb	r1, [r4, #0]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	4650      	mov	r0, sl
 8005e82:	f7fa f9b5 	bl	80001f0 <memchr>
 8005e86:	b138      	cbz	r0, 8005e98 <_svfiprintf_r+0x150>
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	eba0 000a 	sub.w	r0, r0, sl
 8005e8e:	2240      	movs	r2, #64	@ 0x40
 8005e90:	4082      	lsls	r2, r0
 8005e92:	4313      	orrs	r3, r2
 8005e94:	3401      	adds	r4, #1
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9c:	4824      	ldr	r0, [pc, #144]	@ (8005f30 <_svfiprintf_r+0x1e8>)
 8005e9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ea2:	2206      	movs	r2, #6
 8005ea4:	f7fa f9a4 	bl	80001f0 <memchr>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d036      	beq.n	8005f1a <_svfiprintf_r+0x1d2>
 8005eac:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <_svfiprintf_r+0x1ec>)
 8005eae:	bb1b      	cbnz	r3, 8005ef8 <_svfiprintf_r+0x1b0>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	3308      	adds	r3, #8
 8005eba:	9303      	str	r3, [sp, #12]
 8005ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebe:	4433      	add	r3, r6
 8005ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec2:	e76a      	b.n	8005d9a <_svfiprintf_r+0x52>
 8005ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec8:	460c      	mov	r4, r1
 8005eca:	2001      	movs	r0, #1
 8005ecc:	e7a8      	b.n	8005e20 <_svfiprintf_r+0xd8>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	3401      	adds	r4, #1
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f04f 0c0a 	mov.w	ip, #10
 8005eda:	4620      	mov	r0, r4
 8005edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee0:	3a30      	subs	r2, #48	@ 0x30
 8005ee2:	2a09      	cmp	r2, #9
 8005ee4:	d903      	bls.n	8005eee <_svfiprintf_r+0x1a6>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0c6      	beq.n	8005e78 <_svfiprintf_r+0x130>
 8005eea:	9105      	str	r1, [sp, #20]
 8005eec:	e7c4      	b.n	8005e78 <_svfiprintf_r+0x130>
 8005eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e7f0      	b.n	8005eda <_svfiprintf_r+0x192>
 8005ef8:	ab03      	add	r3, sp, #12
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	462a      	mov	r2, r5
 8005efe:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <_svfiprintf_r+0x1f0>)
 8005f00:	a904      	add	r1, sp, #16
 8005f02:	4638      	mov	r0, r7
 8005f04:	f3af 8000 	nop.w
 8005f08:	1c42      	adds	r2, r0, #1
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	d1d6      	bne.n	8005ebc <_svfiprintf_r+0x174>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	065b      	lsls	r3, r3, #25
 8005f12:	f53f af2d 	bmi.w	8005d70 <_svfiprintf_r+0x28>
 8005f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f18:	e72c      	b.n	8005d74 <_svfiprintf_r+0x2c>
 8005f1a:	ab03      	add	r3, sp, #12
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <_svfiprintf_r+0x1f0>)
 8005f22:	a904      	add	r1, sp, #16
 8005f24:	4638      	mov	r0, r7
 8005f26:	f000 f879 	bl	800601c <_printf_i>
 8005f2a:	e7ed      	b.n	8005f08 <_svfiprintf_r+0x1c0>
 8005f2c:	08006460 	.word	0x08006460
 8005f30:	0800646a 	.word	0x0800646a
 8005f34:	00000000 	.word	0x00000000
 8005f38:	08005c91 	.word	0x08005c91
 8005f3c:	08006466 	.word	0x08006466

08005f40 <_printf_common>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	4616      	mov	r6, r2
 8005f46:	4698      	mov	r8, r3
 8005f48:	688a      	ldr	r2, [r1, #8]
 8005f4a:	690b      	ldr	r3, [r1, #16]
 8005f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bfb8      	it	lt
 8005f54:	4613      	movlt	r3, r2
 8005f56:	6033      	str	r3, [r6, #0]
 8005f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f5c:	4607      	mov	r7, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	b10a      	cbz	r2, 8005f66 <_printf_common+0x26>
 8005f62:	3301      	adds	r3, #1
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	0699      	lsls	r1, r3, #26
 8005f6a:	bf42      	ittt	mi
 8005f6c:	6833      	ldrmi	r3, [r6, #0]
 8005f6e:	3302      	addmi	r3, #2
 8005f70:	6033      	strmi	r3, [r6, #0]
 8005f72:	6825      	ldr	r5, [r4, #0]
 8005f74:	f015 0506 	ands.w	r5, r5, #6
 8005f78:	d106      	bne.n	8005f88 <_printf_common+0x48>
 8005f7a:	f104 0a19 	add.w	sl, r4, #25
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	6832      	ldr	r2, [r6, #0]
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dc26      	bgt.n	8005fd6 <_printf_common+0x96>
 8005f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	3b00      	subs	r3, #0
 8005f90:	bf18      	it	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	0692      	lsls	r2, r2, #26
 8005f96:	d42b      	bmi.n	8005ff0 <_printf_common+0xb0>
 8005f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f9c:	4641      	mov	r1, r8
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	47c8      	blx	r9
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d01e      	beq.n	8005fe4 <_printf_common+0xa4>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	6922      	ldr	r2, [r4, #16]
 8005faa:	f003 0306 	and.w	r3, r3, #6
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	bf02      	ittt	eq
 8005fb2:	68e5      	ldreq	r5, [r4, #12]
 8005fb4:	6833      	ldreq	r3, [r6, #0]
 8005fb6:	1aed      	subeq	r5, r5, r3
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	bf0c      	ite	eq
 8005fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc0:	2500      	movne	r5, #0
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	bfc4      	itt	gt
 8005fc6:	1a9b      	subgt	r3, r3, r2
 8005fc8:	18ed      	addgt	r5, r5, r3
 8005fca:	2600      	movs	r6, #0
 8005fcc:	341a      	adds	r4, #26
 8005fce:	42b5      	cmp	r5, r6
 8005fd0:	d11a      	bne.n	8006008 <_printf_common+0xc8>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e008      	b.n	8005fe8 <_printf_common+0xa8>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4652      	mov	r2, sl
 8005fda:	4641      	mov	r1, r8
 8005fdc:	4638      	mov	r0, r7
 8005fde:	47c8      	blx	r9
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d103      	bne.n	8005fec <_printf_common+0xac>
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fec:	3501      	adds	r5, #1
 8005fee:	e7c6      	b.n	8005f7e <_printf_common+0x3e>
 8005ff0:	18e1      	adds	r1, r4, r3
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	2030      	movs	r0, #48	@ 0x30
 8005ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ffa:	4422      	add	r2, r4
 8005ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006004:	3302      	adds	r3, #2
 8006006:	e7c7      	b.n	8005f98 <_printf_common+0x58>
 8006008:	2301      	movs	r3, #1
 800600a:	4622      	mov	r2, r4
 800600c:	4641      	mov	r1, r8
 800600e:	4638      	mov	r0, r7
 8006010:	47c8      	blx	r9
 8006012:	3001      	adds	r0, #1
 8006014:	d0e6      	beq.n	8005fe4 <_printf_common+0xa4>
 8006016:	3601      	adds	r6, #1
 8006018:	e7d9      	b.n	8005fce <_printf_common+0x8e>
	...

0800601c <_printf_i>:
 800601c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	7e0f      	ldrb	r7, [r1, #24]
 8006022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006024:	2f78      	cmp	r7, #120	@ 0x78
 8006026:	4691      	mov	r9, r2
 8006028:	4680      	mov	r8, r0
 800602a:	460c      	mov	r4, r1
 800602c:	469a      	mov	sl, r3
 800602e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006032:	d807      	bhi.n	8006044 <_printf_i+0x28>
 8006034:	2f62      	cmp	r7, #98	@ 0x62
 8006036:	d80a      	bhi.n	800604e <_printf_i+0x32>
 8006038:	2f00      	cmp	r7, #0
 800603a:	f000 80d1 	beq.w	80061e0 <_printf_i+0x1c4>
 800603e:	2f58      	cmp	r7, #88	@ 0x58
 8006040:	f000 80b8 	beq.w	80061b4 <_printf_i+0x198>
 8006044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800604c:	e03a      	b.n	80060c4 <_printf_i+0xa8>
 800604e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006052:	2b15      	cmp	r3, #21
 8006054:	d8f6      	bhi.n	8006044 <_printf_i+0x28>
 8006056:	a101      	add	r1, pc, #4	@ (adr r1, 800605c <_printf_i+0x40>)
 8006058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060c9 	.word	0x080060c9
 8006064:	08006045 	.word	0x08006045
 8006068:	08006045 	.word	0x08006045
 800606c:	08006045 	.word	0x08006045
 8006070:	08006045 	.word	0x08006045
 8006074:	080060c9 	.word	0x080060c9
 8006078:	08006045 	.word	0x08006045
 800607c:	08006045 	.word	0x08006045
 8006080:	08006045 	.word	0x08006045
 8006084:	08006045 	.word	0x08006045
 8006088:	080061c7 	.word	0x080061c7
 800608c:	080060f3 	.word	0x080060f3
 8006090:	08006181 	.word	0x08006181
 8006094:	08006045 	.word	0x08006045
 8006098:	08006045 	.word	0x08006045
 800609c:	080061e9 	.word	0x080061e9
 80060a0:	08006045 	.word	0x08006045
 80060a4:	080060f3 	.word	0x080060f3
 80060a8:	08006045 	.word	0x08006045
 80060ac:	08006045 	.word	0x08006045
 80060b0:	08006189 	.word	0x08006189
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	1d1a      	adds	r2, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6032      	str	r2, [r6, #0]
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060c4:	2301      	movs	r3, #1
 80060c6:	e09c      	b.n	8006202 <_printf_i+0x1e6>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	1d19      	adds	r1, r3, #4
 80060ce:	6031      	str	r1, [r6, #0]
 80060d0:	0606      	lsls	r6, r0, #24
 80060d2:	d501      	bpl.n	80060d8 <_printf_i+0xbc>
 80060d4:	681d      	ldr	r5, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <_printf_i+0xc4>
 80060d8:	0645      	lsls	r5, r0, #25
 80060da:	d5fb      	bpl.n	80060d4 <_printf_i+0xb8>
 80060dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	da03      	bge.n	80060ec <_printf_i+0xd0>
 80060e4:	232d      	movs	r3, #45	@ 0x2d
 80060e6:	426d      	negs	r5, r5
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ec:	4858      	ldr	r0, [pc, #352]	@ (8006250 <_printf_i+0x234>)
 80060ee:	230a      	movs	r3, #10
 80060f0:	e011      	b.n	8006116 <_printf_i+0xfa>
 80060f2:	6821      	ldr	r1, [r4, #0]
 80060f4:	6833      	ldr	r3, [r6, #0]
 80060f6:	0608      	lsls	r0, r1, #24
 80060f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060fc:	d402      	bmi.n	8006104 <_printf_i+0xe8>
 80060fe:	0649      	lsls	r1, r1, #25
 8006100:	bf48      	it	mi
 8006102:	b2ad      	uxthmi	r5, r5
 8006104:	2f6f      	cmp	r7, #111	@ 0x6f
 8006106:	4852      	ldr	r0, [pc, #328]	@ (8006250 <_printf_i+0x234>)
 8006108:	6033      	str	r3, [r6, #0]
 800610a:	bf14      	ite	ne
 800610c:	230a      	movne	r3, #10
 800610e:	2308      	moveq	r3, #8
 8006110:	2100      	movs	r1, #0
 8006112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006116:	6866      	ldr	r6, [r4, #4]
 8006118:	60a6      	str	r6, [r4, #8]
 800611a:	2e00      	cmp	r6, #0
 800611c:	db05      	blt.n	800612a <_printf_i+0x10e>
 800611e:	6821      	ldr	r1, [r4, #0]
 8006120:	432e      	orrs	r6, r5
 8006122:	f021 0104 	bic.w	r1, r1, #4
 8006126:	6021      	str	r1, [r4, #0]
 8006128:	d04b      	beq.n	80061c2 <_printf_i+0x1a6>
 800612a:	4616      	mov	r6, r2
 800612c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006130:	fb03 5711 	mls	r7, r3, r1, r5
 8006134:	5dc7      	ldrb	r7, [r0, r7]
 8006136:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800613a:	462f      	mov	r7, r5
 800613c:	42bb      	cmp	r3, r7
 800613e:	460d      	mov	r5, r1
 8006140:	d9f4      	bls.n	800612c <_printf_i+0x110>
 8006142:	2b08      	cmp	r3, #8
 8006144:	d10b      	bne.n	800615e <_printf_i+0x142>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	07df      	lsls	r7, r3, #31
 800614a:	d508      	bpl.n	800615e <_printf_i+0x142>
 800614c:	6923      	ldr	r3, [r4, #16]
 800614e:	6861      	ldr	r1, [r4, #4]
 8006150:	4299      	cmp	r1, r3
 8006152:	bfde      	ittt	le
 8006154:	2330      	movle	r3, #48	@ 0x30
 8006156:	f806 3c01 	strble.w	r3, [r6, #-1]
 800615a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800615e:	1b92      	subs	r2, r2, r6
 8006160:	6122      	str	r2, [r4, #16]
 8006162:	f8cd a000 	str.w	sl, [sp]
 8006166:	464b      	mov	r3, r9
 8006168:	aa03      	add	r2, sp, #12
 800616a:	4621      	mov	r1, r4
 800616c:	4640      	mov	r0, r8
 800616e:	f7ff fee7 	bl	8005f40 <_printf_common>
 8006172:	3001      	adds	r0, #1
 8006174:	d14a      	bne.n	800620c <_printf_i+0x1f0>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	b004      	add	sp, #16
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	f043 0320 	orr.w	r3, r3, #32
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	4832      	ldr	r0, [pc, #200]	@ (8006254 <_printf_i+0x238>)
 800618a:	2778      	movs	r7, #120	@ 0x78
 800618c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	6831      	ldr	r1, [r6, #0]
 8006194:	061f      	lsls	r7, r3, #24
 8006196:	f851 5b04 	ldr.w	r5, [r1], #4
 800619a:	d402      	bmi.n	80061a2 <_printf_i+0x186>
 800619c:	065f      	lsls	r7, r3, #25
 800619e:	bf48      	it	mi
 80061a0:	b2ad      	uxthmi	r5, r5
 80061a2:	6031      	str	r1, [r6, #0]
 80061a4:	07d9      	lsls	r1, r3, #31
 80061a6:	bf44      	itt	mi
 80061a8:	f043 0320 	orrmi.w	r3, r3, #32
 80061ac:	6023      	strmi	r3, [r4, #0]
 80061ae:	b11d      	cbz	r5, 80061b8 <_printf_i+0x19c>
 80061b0:	2310      	movs	r3, #16
 80061b2:	e7ad      	b.n	8006110 <_printf_i+0xf4>
 80061b4:	4826      	ldr	r0, [pc, #152]	@ (8006250 <_printf_i+0x234>)
 80061b6:	e7e9      	b.n	800618c <_printf_i+0x170>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	f023 0320 	bic.w	r3, r3, #32
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	e7f6      	b.n	80061b0 <_printf_i+0x194>
 80061c2:	4616      	mov	r6, r2
 80061c4:	e7bd      	b.n	8006142 <_printf_i+0x126>
 80061c6:	6833      	ldr	r3, [r6, #0]
 80061c8:	6825      	ldr	r5, [r4, #0]
 80061ca:	6961      	ldr	r1, [r4, #20]
 80061cc:	1d18      	adds	r0, r3, #4
 80061ce:	6030      	str	r0, [r6, #0]
 80061d0:	062e      	lsls	r6, r5, #24
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	d501      	bpl.n	80061da <_printf_i+0x1be>
 80061d6:	6019      	str	r1, [r3, #0]
 80061d8:	e002      	b.n	80061e0 <_printf_i+0x1c4>
 80061da:	0668      	lsls	r0, r5, #25
 80061dc:	d5fb      	bpl.n	80061d6 <_printf_i+0x1ba>
 80061de:	8019      	strh	r1, [r3, #0]
 80061e0:	2300      	movs	r3, #0
 80061e2:	6123      	str	r3, [r4, #16]
 80061e4:	4616      	mov	r6, r2
 80061e6:	e7bc      	b.n	8006162 <_printf_i+0x146>
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	6032      	str	r2, [r6, #0]
 80061ee:	681e      	ldr	r6, [r3, #0]
 80061f0:	6862      	ldr	r2, [r4, #4]
 80061f2:	2100      	movs	r1, #0
 80061f4:	4630      	mov	r0, r6
 80061f6:	f7f9 fffb 	bl	80001f0 <memchr>
 80061fa:	b108      	cbz	r0, 8006200 <_printf_i+0x1e4>
 80061fc:	1b80      	subs	r0, r0, r6
 80061fe:	6060      	str	r0, [r4, #4]
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	2300      	movs	r3, #0
 8006206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620a:	e7aa      	b.n	8006162 <_printf_i+0x146>
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	4632      	mov	r2, r6
 8006210:	4649      	mov	r1, r9
 8006212:	4640      	mov	r0, r8
 8006214:	47d0      	blx	sl
 8006216:	3001      	adds	r0, #1
 8006218:	d0ad      	beq.n	8006176 <_printf_i+0x15a>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	079b      	lsls	r3, r3, #30
 800621e:	d413      	bmi.n	8006248 <_printf_i+0x22c>
 8006220:	68e0      	ldr	r0, [r4, #12]
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	4298      	cmp	r0, r3
 8006226:	bfb8      	it	lt
 8006228:	4618      	movlt	r0, r3
 800622a:	e7a6      	b.n	800617a <_printf_i+0x15e>
 800622c:	2301      	movs	r3, #1
 800622e:	4632      	mov	r2, r6
 8006230:	4649      	mov	r1, r9
 8006232:	4640      	mov	r0, r8
 8006234:	47d0      	blx	sl
 8006236:	3001      	adds	r0, #1
 8006238:	d09d      	beq.n	8006176 <_printf_i+0x15a>
 800623a:	3501      	adds	r5, #1
 800623c:	68e3      	ldr	r3, [r4, #12]
 800623e:	9903      	ldr	r1, [sp, #12]
 8006240:	1a5b      	subs	r3, r3, r1
 8006242:	42ab      	cmp	r3, r5
 8006244:	dcf2      	bgt.n	800622c <_printf_i+0x210>
 8006246:	e7eb      	b.n	8006220 <_printf_i+0x204>
 8006248:	2500      	movs	r5, #0
 800624a:	f104 0619 	add.w	r6, r4, #25
 800624e:	e7f5      	b.n	800623c <_printf_i+0x220>
 8006250:	08006471 	.word	0x08006471
 8006254:	08006482 	.word	0x08006482

08006258 <memmove>:
 8006258:	4288      	cmp	r0, r1
 800625a:	b510      	push	{r4, lr}
 800625c:	eb01 0402 	add.w	r4, r1, r2
 8006260:	d902      	bls.n	8006268 <memmove+0x10>
 8006262:	4284      	cmp	r4, r0
 8006264:	4623      	mov	r3, r4
 8006266:	d807      	bhi.n	8006278 <memmove+0x20>
 8006268:	1e43      	subs	r3, r0, #1
 800626a:	42a1      	cmp	r1, r4
 800626c:	d008      	beq.n	8006280 <memmove+0x28>
 800626e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006276:	e7f8      	b.n	800626a <memmove+0x12>
 8006278:	4402      	add	r2, r0
 800627a:	4601      	mov	r1, r0
 800627c:	428a      	cmp	r2, r1
 800627e:	d100      	bne.n	8006282 <memmove+0x2a>
 8006280:	bd10      	pop	{r4, pc}
 8006282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800628a:	e7f7      	b.n	800627c <memmove+0x24>

0800628c <_sbrk_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d06      	ldr	r5, [pc, #24]	@ (80062a8 <_sbrk_r+0x1c>)
 8006290:	2300      	movs	r3, #0
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	f7fb fa60 	bl	800175c <_sbrk>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d102      	bne.n	80062a6 <_sbrk_r+0x1a>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	b103      	cbz	r3, 80062a6 <_sbrk_r+0x1a>
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	bd38      	pop	{r3, r4, r5, pc}
 80062a8:	200003dc 	.word	0x200003dc

080062ac <memcpy>:
 80062ac:	440a      	add	r2, r1
 80062ae:	4291      	cmp	r1, r2
 80062b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b4:	d100      	bne.n	80062b8 <memcpy+0xc>
 80062b6:	4770      	bx	lr
 80062b8:	b510      	push	{r4, lr}
 80062ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c2:	4291      	cmp	r1, r2
 80062c4:	d1f9      	bne.n	80062ba <memcpy+0xe>
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <_realloc_r>:
 80062c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062cc:	4607      	mov	r7, r0
 80062ce:	4614      	mov	r4, r2
 80062d0:	460d      	mov	r5, r1
 80062d2:	b921      	cbnz	r1, 80062de <_realloc_r+0x16>
 80062d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	4611      	mov	r1, r2
 80062da:	f7ff bc4d 	b.w	8005b78 <_malloc_r>
 80062de:	b92a      	cbnz	r2, 80062ec <_realloc_r+0x24>
 80062e0:	f7ff fbde 	bl	8005aa0 <_free_r>
 80062e4:	4625      	mov	r5, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ec:	f000 f81a 	bl	8006324 <_malloc_usable_size_r>
 80062f0:	4284      	cmp	r4, r0
 80062f2:	4606      	mov	r6, r0
 80062f4:	d802      	bhi.n	80062fc <_realloc_r+0x34>
 80062f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062fa:	d8f4      	bhi.n	80062e6 <_realloc_r+0x1e>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4638      	mov	r0, r7
 8006300:	f7ff fc3a 	bl	8005b78 <_malloc_r>
 8006304:	4680      	mov	r8, r0
 8006306:	b908      	cbnz	r0, 800630c <_realloc_r+0x44>
 8006308:	4645      	mov	r5, r8
 800630a:	e7ec      	b.n	80062e6 <_realloc_r+0x1e>
 800630c:	42b4      	cmp	r4, r6
 800630e:	4622      	mov	r2, r4
 8006310:	4629      	mov	r1, r5
 8006312:	bf28      	it	cs
 8006314:	4632      	movcs	r2, r6
 8006316:	f7ff ffc9 	bl	80062ac <memcpy>
 800631a:	4629      	mov	r1, r5
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff fbbf 	bl	8005aa0 <_free_r>
 8006322:	e7f1      	b.n	8006308 <_realloc_r+0x40>

08006324 <_malloc_usable_size_r>:
 8006324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006328:	1f18      	subs	r0, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfbc      	itt	lt
 800632e:	580b      	ldrlt	r3, [r1, r0]
 8006330:	18c0      	addlt	r0, r0, r3
 8006332:	4770      	bx	lr

08006334 <_init>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr

08006340 <_fini>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr
